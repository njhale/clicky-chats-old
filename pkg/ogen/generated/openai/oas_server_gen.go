// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CancelFineTuningJob implements cancelFineTuningJob operation.
	//
	// Immediately cancel a fine-tune job.
	//
	// POST /fine_tuning/jobs/{fine_tuning_job_id}/cancel
	CancelFineTuningJob(ctx context.Context, params CancelFineTuningJobParams) (*FineTuningJob, error)
	// CancelRun implements cancelRun operation.
	//
	// Cancels a run that is `in_progress`.
	//
	// POST /threads/{thread_id}/runs/{run_id}/cancel
	CancelRun(ctx context.Context, params CancelRunParams) (*RunObject, error)
	// CreateAssistant implements createAssistant operation.
	//
	// Create an assistant with a model and instructions.
	//
	// POST /assistants
	CreateAssistant(ctx context.Context, req *CreateAssistantRequest) (*AssistantObject, error)
	// CreateAssistantFile implements createAssistantFile operation.
	//
	// Create an assistant file by attaching a [File](/docs/api-reference/files) to an
	// [assistant](/docs/api-reference/assistants).
	//
	// POST /assistants/{assistant_id}/files
	CreateAssistantFile(ctx context.Context, req *CreateAssistantFileRequest, params CreateAssistantFileParams) (*AssistantFileObject, error)
	// CreateChatCompletion implements createChatCompletion operation.
	//
	// Creates a model response for the given chat conversation.
	//
	// POST /chat/completions
	CreateChatCompletion(ctx context.Context, req *CreateChatCompletionRequest) (*CreateChatCompletionResponse, error)
	// CreateFile implements createFile operation.
	//
	// Upload a file that can be used across various endpoints. The size of all the files uploaded by one
	// organization can be up to 100 GB.
	// The size of individual files can be a maximum of 512 MB or 2 million tokens for Assistants. See
	// the [Assistants Tools guide](/docs/assistants/tools) to learn more about the types of files
	// supported. The Fine-tuning API only supports `.jsonl` files.
	// Please [contact us](https://help.openai.com/) if you need to increase these storage limits.
	//
	// POST /files
	CreateFile(ctx context.Context, req *CreateFileRequestMultipart) (*OpenAIFile, error)
	// CreateFineTuningJob implements createFineTuningJob operation.
	//
	// Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
	// Response includes details of the enqueued job including job status and the name of the fine-tuned
	// models once complete.
	// [Learn more about fine-tuning](/docs/guides/fine-tuning).
	//
	// POST /fine_tuning/jobs
	CreateFineTuningJob(ctx context.Context, req *CreateFineTuningJobRequest) (*FineTuningJob, error)
	// CreateImage implements createImage operation.
	//
	// Creates an image given a prompt.
	//
	// POST /images/generations
	CreateImage(ctx context.Context, req *CreateImageRequest) (*ImagesResponse, error)
	// CreateImageEdit implements createImageEdit operation.
	//
	// Creates an edited or extended image given an original image and a prompt.
	//
	// POST /images/edits
	CreateImageEdit(ctx context.Context, req *CreateImageEditRequestMultipart) (*ImagesResponse, error)
	// CreateImageVariation implements createImageVariation operation.
	//
	// Creates a variation of a given image.
	//
	// POST /images/variations
	CreateImageVariation(ctx context.Context, req *CreateImageVariationRequestMultipart) (*ImagesResponse, error)
	// CreateMessage implements createMessage operation.
	//
	// Create a message.
	//
	// POST /threads/{thread_id}/messages
	CreateMessage(ctx context.Context, req *CreateMessageRequest, params CreateMessageParams) (*MessageObject, error)
	// CreateModeration implements createModeration operation.
	//
	// Classifies if text is potentially harmful.
	//
	// POST /moderations
	CreateModeration(ctx context.Context, req *CreateModerationRequest) (*CreateModerationResponse, error)
	// CreateRun implements createRun operation.
	//
	// Create a run.
	//
	// POST /threads/{thread_id}/runs
	CreateRun(ctx context.Context, req *CreateRunRequest, params CreateRunParams) (*RunObject, error)
	// CreateSpeech implements createSpeech operation.
	//
	// Generates audio from the input text.
	//
	// POST /audio/speech
	CreateSpeech(ctx context.Context, req *CreateSpeechRequest) (*CreateSpeechOKHeaders, error)
	// CreateThread implements createThread operation.
	//
	// Create a thread.
	//
	// POST /threads
	CreateThread(ctx context.Context, req OptCreateThreadRequest) (*ThreadObject, error)
	// CreateThreadAndRun implements createThreadAndRun operation.
	//
	// Create a thread and run it in one request.
	//
	// POST /threads/runs
	CreateThreadAndRun(ctx context.Context, req *CreateThreadAndRunRequest) (*RunObject, error)
	// CreateTranscription implements createTranscription operation.
	//
	// Transcribes audio into the input language.
	//
	// POST /audio/transcriptions
	CreateTranscription(ctx context.Context, req *CreateTranscriptionRequestMultipart) (CreateTranscriptionOK, error)
	// CreateTranslation implements createTranslation operation.
	//
	// Translates audio into English.
	//
	// POST /audio/translations
	CreateTranslation(ctx context.Context, req *CreateTranslationRequestMultipart) (CreateTranslationOK, error)
	// DeleteAssistant implements deleteAssistant operation.
	//
	// Delete an assistant.
	//
	// DELETE /assistants/{assistant_id}
	DeleteAssistant(ctx context.Context, params DeleteAssistantParams) (*DeleteAssistantResponse, error)
	// DeleteAssistantFile implements deleteAssistantFile operation.
	//
	// Delete an assistant file.
	//
	// DELETE /assistants/{assistant_id}/files/{file_id}
	DeleteAssistantFile(ctx context.Context, params DeleteAssistantFileParams) (*DeleteAssistantFileResponse, error)
	// DeleteFile implements deleteFile operation.
	//
	// Delete a file.
	//
	// DELETE /files/{file_id}
	DeleteFile(ctx context.Context, params DeleteFileParams) (*DeleteFileResponse, error)
	// DeleteModel implements deleteModel operation.
	//
	// Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
	//
	// DELETE /models/{model}
	DeleteModel(ctx context.Context, params DeleteModelParams) (*DeleteModelResponse, error)
	// DeleteThread implements deleteThread operation.
	//
	// Delete a thread.
	//
	// DELETE /threads/{thread_id}
	DeleteThread(ctx context.Context, params DeleteThreadParams) (*DeleteThreadResponse, error)
	// DownloadFile implements downloadFile operation.
	//
	// Returns the contents of the specified file.
	//
	// GET /files/{file_id}/content
	DownloadFile(ctx context.Context, params DownloadFileParams) (string, error)
	// GetAssistant implements getAssistant operation.
	//
	// Retrieves an assistant.
	//
	// GET /assistants/{assistant_id}
	GetAssistant(ctx context.Context, params GetAssistantParams) (*AssistantObject, error)
	// GetAssistantFile implements getAssistantFile operation.
	//
	// Retrieves an AssistantFile.
	//
	// GET /assistants/{assistant_id}/files/{file_id}
	GetAssistantFile(ctx context.Context, params GetAssistantFileParams) (*AssistantFileObject, error)
	// GetMessage implements getMessage operation.
	//
	// Retrieve a message.
	//
	// GET /threads/{thread_id}/messages/{message_id}
	GetMessage(ctx context.Context, params GetMessageParams) (*MessageObject, error)
	// GetMessageFile implements getMessageFile operation.
	//
	// Retrieves a message file.
	//
	// GET /threads/{thread_id}/messages/{message_id}/files/{file_id}
	GetMessageFile(ctx context.Context, params GetMessageFileParams) (*MessageFileObject, error)
	// GetRun implements getRun operation.
	//
	// Retrieves a run.
	//
	// GET /threads/{thread_id}/runs/{run_id}
	GetRun(ctx context.Context, params GetRunParams) (*RunObject, error)
	// GetRunStep implements getRunStep operation.
	//
	// Retrieves a run step.
	//
	// GET /threads/{thread_id}/runs/{run_id}/steps/{step_id}
	GetRunStep(ctx context.Context, params GetRunStepParams) (*RunStepObject, error)
	// GetThread implements getThread operation.
	//
	// Retrieves a thread.
	//
	// GET /threads/{thread_id}
	GetThread(ctx context.Context, params GetThreadParams) (*ThreadObject, error)
	// ListAssistantFiles implements listAssistantFiles operation.
	//
	// Returns a list of assistant files.
	//
	// GET /assistants/{assistant_id}/files
	ListAssistantFiles(ctx context.Context, params ListAssistantFilesParams) (*ListAssistantFilesResponse, error)
	// ListAssistants implements listAssistants operation.
	//
	// Returns a list of assistants.
	//
	// GET /assistants
	ListAssistants(ctx context.Context, params ListAssistantsParams) (*ListAssistantsResponse, error)
	// ListFiles implements listFiles operation.
	//
	// Returns a list of files that belong to the user's organization.
	//
	// GET /files
	ListFiles(ctx context.Context, params ListFilesParams) (*ListFilesResponse, error)
	// ListFineTuningEvents implements listFineTuningEvents operation.
	//
	// Get status updates for a fine-tuning job.
	//
	// GET /fine_tuning/jobs/{fine_tuning_job_id}/events
	ListFineTuningEvents(ctx context.Context, params ListFineTuningEventsParams) (*ListFineTuningJobEventsResponse, error)
	// ListMessageFiles implements listMessageFiles operation.
	//
	// Returns a list of message files.
	//
	// GET /threads/{thread_id}/messages/{message_id}/files
	ListMessageFiles(ctx context.Context, params ListMessageFilesParams) (*ListMessageFilesResponse, error)
	// ListMessages implements listMessages operation.
	//
	// Returns a list of messages for a given thread.
	//
	// GET /threads/{thread_id}/messages
	ListMessages(ctx context.Context, params ListMessagesParams) (*ListMessagesResponse, error)
	// ListModels implements listModels operation.
	//
	// Lists the currently available models, and provides basic information about each one such as the
	// owner and availability.
	//
	// GET /models
	ListModels(ctx context.Context) (*ListModelsResponse, error)
	// ListPaginatedFineTuningJobs implements listPaginatedFineTuningJobs operation.
	//
	// List your organization's fine-tuning jobs.
	//
	// GET /fine_tuning/jobs
	ListPaginatedFineTuningJobs(ctx context.Context, params ListPaginatedFineTuningJobsParams) (*ListPaginatedFineTuningJobsResponse, error)
	// ListRunSteps implements listRunSteps operation.
	//
	// Returns a list of run steps belonging to a run.
	//
	// GET /threads/{thread_id}/runs/{run_id}/steps
	ListRunSteps(ctx context.Context, params ListRunStepsParams) (*ListRunStepsResponse, error)
	// ListRuns implements listRuns operation.
	//
	// Returns a list of runs belonging to a thread.
	//
	// GET /threads/{thread_id}/runs
	ListRuns(ctx context.Context, params ListRunsParams) (*ListRunsResponse, error)
	// ModifyAssistant implements modifyAssistant operation.
	//
	// Modifies an assistant.
	//
	// POST /assistants/{assistant_id}
	ModifyAssistant(ctx context.Context, req *ModifyAssistantRequest, params ModifyAssistantParams) (*AssistantObject, error)
	// ModifyMessage implements modifyMessage operation.
	//
	// Modifies a message.
	//
	// POST /threads/{thread_id}/messages/{message_id}
	ModifyMessage(ctx context.Context, req *ModifyMessageRequest, params ModifyMessageParams) (*MessageObject, error)
	// ModifyRun implements modifyRun operation.
	//
	// Modifies a run.
	//
	// POST /threads/{thread_id}/runs/{run_id}
	ModifyRun(ctx context.Context, req *ModifyRunRequest, params ModifyRunParams) (*RunObject, error)
	// ModifyThread implements modifyThread operation.
	//
	// Modifies a thread.
	//
	// POST /threads/{thread_id}
	ModifyThread(ctx context.Context, req *ModifyThreadRequest, params ModifyThreadParams) (*ThreadObject, error)
	// RetrieveFile implements retrieveFile operation.
	//
	// Returns information about a specific file.
	//
	// GET /files/{file_id}
	RetrieveFile(ctx context.Context, params RetrieveFileParams) (*OpenAIFile, error)
	// RetrieveFineTuningJob implements retrieveFineTuningJob operation.
	//
	// Get info about a fine-tuning job.
	// [Learn more about fine-tuning](/docs/guides/fine-tuning).
	//
	// GET /fine_tuning/jobs/{fine_tuning_job_id}
	RetrieveFineTuningJob(ctx context.Context, params RetrieveFineTuningJobParams) (*FineTuningJob, error)
	// RetrieveModel implements retrieveModel operation.
	//
	// Retrieves a model instance, providing basic information about the model such as the owner and
	// permissioning.
	//
	// GET /models/{model}
	RetrieveModel(ctx context.Context, params RetrieveModelParams) (*Model, error)
	// SubmitToolOuputsToRun implements submitToolOuputsToRun operation.
	//
	// When a run has the `status: "requires_action"` and `required_action.type` is `submit_tool_outputs`,
	//  this endpoint can be used to submit the outputs from the tool calls once they're all completed.
	// All outputs must be submitted in a single request.
	//
	// POST /threads/{thread_id}/runs/{run_id}/submit_tool_outputs
	SubmitToolOuputsToRun(ctx context.Context, req *SubmitToolOutputsRunRequest, params SubmitToolOuputsToRunParams) (*RunObject, error)
	// NewError creates *ErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
