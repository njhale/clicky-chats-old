// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"
	"io"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

func (s *ErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type ApiKeyAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *ApiKeyAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *ApiKeyAuth) SetToken(val string) {
	s.Token = val
}

// A list of [Files](/docs/api-reference/files) attached to an `assistant`.
// Ref: #/components/schemas/AssistantFileObject
type AssistantFileObject struct {
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `assistant.file`.
	Object AssistantFileObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the assistant file was created.
	CreatedAt int `json:"created_at"`
	// The assistant ID that the file is attached to.
	AssistantID string `json:"assistant_id"`
}

// GetID returns the value of ID.
func (s *AssistantFileObject) GetID() string {
	return s.ID
}

// GetObject returns the value of Object.
func (s *AssistantFileObject) GetObject() AssistantFileObjectObject {
	return s.Object
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AssistantFileObject) GetCreatedAt() int {
	return s.CreatedAt
}

// GetAssistantID returns the value of AssistantID.
func (s *AssistantFileObject) GetAssistantID() string {
	return s.AssistantID
}

// SetID sets the value of ID.
func (s *AssistantFileObject) SetID(val string) {
	s.ID = val
}

// SetObject sets the value of Object.
func (s *AssistantFileObject) SetObject(val AssistantFileObjectObject) {
	s.Object = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AssistantFileObject) SetCreatedAt(val int) {
	s.CreatedAt = val
}

// SetAssistantID sets the value of AssistantID.
func (s *AssistantFileObject) SetAssistantID(val string) {
	s.AssistantID = val
}

// The object type, which is always `assistant.file`.
type AssistantFileObjectObject string

const (
	AssistantFileObjectObjectAssistantFile AssistantFileObjectObject = "assistant.file"
)

// AllValues returns all AssistantFileObjectObject values.
func (AssistantFileObjectObject) AllValues() []AssistantFileObjectObject {
	return []AssistantFileObjectObject{
		AssistantFileObjectObjectAssistantFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AssistantFileObjectObject) MarshalText() ([]byte, error) {
	switch s {
	case AssistantFileObjectObjectAssistantFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AssistantFileObjectObject) UnmarshalText(data []byte) error {
	switch AssistantFileObjectObject(data) {
	case AssistantFileObjectObjectAssistantFile:
		*s = AssistantFileObjectObjectAssistantFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents an `assistant` that can call the model and use tools.
// Ref: #/components/schemas/AssistantObject
type AssistantObject struct {
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `assistant`.
	Object AssistantObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the assistant was created.
	CreatedAt int `json:"created_at"`
	// The name of the assistant. The maximum length is 256 characters.
	Name NilString `json:"name"`
	// The description of the assistant. The maximum length is 512 characters.
	Description NilString `json:"description"`
	// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see
	// all of your available models, or see our [Model overview](/docs/models/overview) for descriptions
	// of them.
	Model string `json:"model"`
	// The system instructions that the assistant uses. The maximum length is 32768 characters.
	Instructions NilString `json:"instructions"`
	// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools
	// can be of types `code_interpreter`, `retrieval`, or `function`.
	Tools []AssistantObjectToolsItem `json:"tools"`
	// A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum
	// of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
	FileIds []string `json:"file_ids"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata *AssistantObjectMetadata `json:"metadata"`
}

// GetID returns the value of ID.
func (s *AssistantObject) GetID() string {
	return s.ID
}

// GetObject returns the value of Object.
func (s *AssistantObject) GetObject() AssistantObjectObject {
	return s.Object
}

// GetCreatedAt returns the value of CreatedAt.
func (s *AssistantObject) GetCreatedAt() int {
	return s.CreatedAt
}

// GetName returns the value of Name.
func (s *AssistantObject) GetName() NilString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *AssistantObject) GetDescription() NilString {
	return s.Description
}

// GetModel returns the value of Model.
func (s *AssistantObject) GetModel() string {
	return s.Model
}

// GetInstructions returns the value of Instructions.
func (s *AssistantObject) GetInstructions() NilString {
	return s.Instructions
}

// GetTools returns the value of Tools.
func (s *AssistantObject) GetTools() []AssistantObjectToolsItem {
	return s.Tools
}

// GetFileIds returns the value of FileIds.
func (s *AssistantObject) GetFileIds() []string {
	return s.FileIds
}

// GetMetadata returns the value of Metadata.
func (s *AssistantObject) GetMetadata() *AssistantObjectMetadata {
	return s.Metadata
}

// SetID sets the value of ID.
func (s *AssistantObject) SetID(val string) {
	s.ID = val
}

// SetObject sets the value of Object.
func (s *AssistantObject) SetObject(val AssistantObjectObject) {
	s.Object = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *AssistantObject) SetCreatedAt(val int) {
	s.CreatedAt = val
}

// SetName sets the value of Name.
func (s *AssistantObject) SetName(val NilString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *AssistantObject) SetDescription(val NilString) {
	s.Description = val
}

// SetModel sets the value of Model.
func (s *AssistantObject) SetModel(val string) {
	s.Model = val
}

// SetInstructions sets the value of Instructions.
func (s *AssistantObject) SetInstructions(val NilString) {
	s.Instructions = val
}

// SetTools sets the value of Tools.
func (s *AssistantObject) SetTools(val []AssistantObjectToolsItem) {
	s.Tools = val
}

// SetFileIds sets the value of FileIds.
func (s *AssistantObject) SetFileIds(val []string) {
	s.FileIds = val
}

// SetMetadata sets the value of Metadata.
func (s *AssistantObject) SetMetadata(val *AssistantObjectMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type AssistantObjectMetadata struct{}

// The object type, which is always `assistant`.
type AssistantObjectObject string

const (
	AssistantObjectObjectAssistant AssistantObjectObject = "assistant"
)

// AllValues returns all AssistantObjectObject values.
func (AssistantObjectObject) AllValues() []AssistantObjectObject {
	return []AssistantObjectObject{
		AssistantObjectObjectAssistant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AssistantObjectObject) MarshalText() ([]byte, error) {
	switch s {
	case AssistantObjectObjectAssistant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AssistantObjectObject) UnmarshalText(data []byte) error {
	switch AssistantObjectObject(data) {
	case AssistantObjectObjectAssistant:
		*s = AssistantObjectObjectAssistant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// AssistantObjectToolsItem represents sum type.
type AssistantObjectToolsItem struct {
	Type                    AssistantObjectToolsItemType // switch on this field
	AssistantToolsCode      AssistantToolsCode
	AssistantToolsRetrieval AssistantToolsRetrieval
	AssistantToolsFunction  AssistantToolsFunction
}

// AssistantObjectToolsItemType is oneOf type of AssistantObjectToolsItem.
type AssistantObjectToolsItemType string

// Possible values for AssistantObjectToolsItemType.
const (
	AssistantToolsCodeAssistantObjectToolsItem      AssistantObjectToolsItemType = "code_interpreter"
	AssistantToolsRetrievalAssistantObjectToolsItem AssistantObjectToolsItemType = "retrieval"
	AssistantToolsFunctionAssistantObjectToolsItem  AssistantObjectToolsItemType = "function"
)

// IsAssistantToolsCode reports whether AssistantObjectToolsItem is AssistantToolsCode.
func (s AssistantObjectToolsItem) IsAssistantToolsCode() bool {
	return s.Type == AssistantToolsCodeAssistantObjectToolsItem
}

// IsAssistantToolsRetrieval reports whether AssistantObjectToolsItem is AssistantToolsRetrieval.
func (s AssistantObjectToolsItem) IsAssistantToolsRetrieval() bool {
	return s.Type == AssistantToolsRetrievalAssistantObjectToolsItem
}

// IsAssistantToolsFunction reports whether AssistantObjectToolsItem is AssistantToolsFunction.
func (s AssistantObjectToolsItem) IsAssistantToolsFunction() bool {
	return s.Type == AssistantToolsFunctionAssistantObjectToolsItem
}

// SetAssistantToolsCode sets AssistantObjectToolsItem to AssistantToolsCode.
func (s *AssistantObjectToolsItem) SetAssistantToolsCode(v AssistantToolsCode) {
	s.Type = AssistantToolsCodeAssistantObjectToolsItem
	s.AssistantToolsCode = v
}

// GetAssistantToolsCode returns AssistantToolsCode and true boolean if AssistantObjectToolsItem is AssistantToolsCode.
func (s AssistantObjectToolsItem) GetAssistantToolsCode() (v AssistantToolsCode, ok bool) {
	if !s.IsAssistantToolsCode() {
		return v, false
	}
	return s.AssistantToolsCode, true
}

// NewAssistantToolsCodeAssistantObjectToolsItem returns new AssistantObjectToolsItem from AssistantToolsCode.
func NewAssistantToolsCodeAssistantObjectToolsItem(v AssistantToolsCode) AssistantObjectToolsItem {
	var s AssistantObjectToolsItem
	s.SetAssistantToolsCode(v)
	return s
}

// SetAssistantToolsRetrieval sets AssistantObjectToolsItem to AssistantToolsRetrieval.
func (s *AssistantObjectToolsItem) SetAssistantToolsRetrieval(v AssistantToolsRetrieval) {
	s.Type = AssistantToolsRetrievalAssistantObjectToolsItem
	s.AssistantToolsRetrieval = v
}

// GetAssistantToolsRetrieval returns AssistantToolsRetrieval and true boolean if AssistantObjectToolsItem is AssistantToolsRetrieval.
func (s AssistantObjectToolsItem) GetAssistantToolsRetrieval() (v AssistantToolsRetrieval, ok bool) {
	if !s.IsAssistantToolsRetrieval() {
		return v, false
	}
	return s.AssistantToolsRetrieval, true
}

// NewAssistantToolsRetrievalAssistantObjectToolsItem returns new AssistantObjectToolsItem from AssistantToolsRetrieval.
func NewAssistantToolsRetrievalAssistantObjectToolsItem(v AssistantToolsRetrieval) AssistantObjectToolsItem {
	var s AssistantObjectToolsItem
	s.SetAssistantToolsRetrieval(v)
	return s
}

// SetAssistantToolsFunction sets AssistantObjectToolsItem to AssistantToolsFunction.
func (s *AssistantObjectToolsItem) SetAssistantToolsFunction(v AssistantToolsFunction) {
	s.Type = AssistantToolsFunctionAssistantObjectToolsItem
	s.AssistantToolsFunction = v
}

// GetAssistantToolsFunction returns AssistantToolsFunction and true boolean if AssistantObjectToolsItem is AssistantToolsFunction.
func (s AssistantObjectToolsItem) GetAssistantToolsFunction() (v AssistantToolsFunction, ok bool) {
	if !s.IsAssistantToolsFunction() {
		return v, false
	}
	return s.AssistantToolsFunction, true
}

// NewAssistantToolsFunctionAssistantObjectToolsItem returns new AssistantObjectToolsItem from AssistantToolsFunction.
func NewAssistantToolsFunctionAssistantObjectToolsItem(v AssistantToolsFunction) AssistantObjectToolsItem {
	var s AssistantObjectToolsItem
	s.SetAssistantToolsFunction(v)
	return s
}

// Ref: #/components/schemas/AssistantToolsCode
type AssistantToolsCode struct{}

// The type of tool being defined: `code_interpreter`.
type AssistantToolsCodeType string

const (
	AssistantToolsCodeTypeCodeInterpreter AssistantToolsCodeType = "code_interpreter"
)

// AllValues returns all AssistantToolsCodeType values.
func (AssistantToolsCodeType) AllValues() []AssistantToolsCodeType {
	return []AssistantToolsCodeType{
		AssistantToolsCodeTypeCodeInterpreter,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AssistantToolsCodeType) MarshalText() ([]byte, error) {
	switch s {
	case AssistantToolsCodeTypeCodeInterpreter:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AssistantToolsCodeType) UnmarshalText(data []byte) error {
	switch AssistantToolsCodeType(data) {
	case AssistantToolsCodeTypeCodeInterpreter:
		*s = AssistantToolsCodeTypeCodeInterpreter
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AssistantToolsFunction
type AssistantToolsFunction struct {
	Function FunctionObject `json:"function"`
}

// GetFunction returns the value of Function.
func (s *AssistantToolsFunction) GetFunction() FunctionObject {
	return s.Function
}

// SetFunction sets the value of Function.
func (s *AssistantToolsFunction) SetFunction(val FunctionObject) {
	s.Function = val
}

// The type of tool being defined: `function`.
type AssistantToolsFunctionType string

const (
	AssistantToolsFunctionTypeFunction AssistantToolsFunctionType = "function"
)

// AllValues returns all AssistantToolsFunctionType values.
func (AssistantToolsFunctionType) AllValues() []AssistantToolsFunctionType {
	return []AssistantToolsFunctionType{
		AssistantToolsFunctionTypeFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AssistantToolsFunctionType) MarshalText() ([]byte, error) {
	switch s {
	case AssistantToolsFunctionTypeFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AssistantToolsFunctionType) UnmarshalText(data []byte) error {
	switch AssistantToolsFunctionType(data) {
	case AssistantToolsFunctionTypeFunction:
		*s = AssistantToolsFunctionTypeFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/AssistantToolsRetrieval
type AssistantToolsRetrieval struct{}

// The type of tool being defined: `retrieval`.
type AssistantToolsRetrievalType string

const (
	AssistantToolsRetrievalTypeRetrieval AssistantToolsRetrievalType = "retrieval"
)

// AllValues returns all AssistantToolsRetrievalType values.
func (AssistantToolsRetrievalType) AllValues() []AssistantToolsRetrievalType {
	return []AssistantToolsRetrievalType{
		AssistantToolsRetrievalTypeRetrieval,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s AssistantToolsRetrievalType) MarshalText() ([]byte, error) {
	switch s {
	case AssistantToolsRetrievalTypeRetrieval:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *AssistantToolsRetrievalType) UnmarshalText(data []byte) error {
	switch AssistantToolsRetrievalType(data) {
	case AssistantToolsRetrievalTypeRetrieval:
		*s = AssistantToolsRetrievalTypeRetrieval
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Specifying a particular function via `{"name": "my_function"}` forces the model to call that
// function.
// Ref: #/components/schemas/ChatCompletionFunctionCallOption
type ChatCompletionFunctionCallOption struct {
	// The name of the function to call.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *ChatCompletionFunctionCallOption) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *ChatCompletionFunctionCallOption) SetName(val string) {
	s.Name = val
}

// Deprecated: schema marks this type as deprecated.
// Ref: #/components/schemas/ChatCompletionFunctions
type ChatCompletionFunctions struct {
	// A description of what the function does, used by the model to choose when and how to call the
	// function.
	Description OptString `json:"description"`
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes,
	// with a maximum length of 64.
	Name       string                `json:"name"`
	Parameters OptFunctionParameters `json:"parameters"`
}

// GetDescription returns the value of Description.
func (s *ChatCompletionFunctions) GetDescription() OptString {
	return s.Description
}

// GetName returns the value of Name.
func (s *ChatCompletionFunctions) GetName() string {
	return s.Name
}

// GetParameters returns the value of Parameters.
func (s *ChatCompletionFunctions) GetParameters() OptFunctionParameters {
	return s.Parameters
}

// SetDescription sets the value of Description.
func (s *ChatCompletionFunctions) SetDescription(val OptString) {
	s.Description = val
}

// SetName sets the value of Name.
func (s *ChatCompletionFunctions) SetName(val string) {
	s.Name = val
}

// SetParameters sets the value of Parameters.
func (s *ChatCompletionFunctions) SetParameters(val OptFunctionParameters) {
	s.Parameters = val
}

// Ref: #/components/schemas/ChatCompletionMessageToolCall
type ChatCompletionMessageToolCall struct {
	// The ID of the tool call.
	ID string `json:"id"`
	// The type of the tool. Currently, only `function` is supported.
	Type ChatCompletionMessageToolCallType `json:"type"`
	// The function that the model called.
	Function ChatCompletionMessageToolCallFunction `json:"function"`
}

// GetID returns the value of ID.
func (s *ChatCompletionMessageToolCall) GetID() string {
	return s.ID
}

// GetType returns the value of Type.
func (s *ChatCompletionMessageToolCall) GetType() ChatCompletionMessageToolCallType {
	return s.Type
}

// GetFunction returns the value of Function.
func (s *ChatCompletionMessageToolCall) GetFunction() ChatCompletionMessageToolCallFunction {
	return s.Function
}

// SetID sets the value of ID.
func (s *ChatCompletionMessageToolCall) SetID(val string) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *ChatCompletionMessageToolCall) SetType(val ChatCompletionMessageToolCallType) {
	s.Type = val
}

// SetFunction sets the value of Function.
func (s *ChatCompletionMessageToolCall) SetFunction(val ChatCompletionMessageToolCallFunction) {
	s.Function = val
}

// The function that the model called.
type ChatCompletionMessageToolCallFunction struct {
	// The name of the function to call.
	Name string `json:"name"`
	// The arguments to call the function with, as generated by the model in JSON format. Note that the
	// model does not always generate valid JSON, and may hallucinate parameters not defined by your
	// function schema. Validate the arguments in your code before calling your function.
	Arguments string `json:"arguments"`
}

// GetName returns the value of Name.
func (s *ChatCompletionMessageToolCallFunction) GetName() string {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *ChatCompletionMessageToolCallFunction) GetArguments() string {
	return s.Arguments
}

// SetName sets the value of Name.
func (s *ChatCompletionMessageToolCallFunction) SetName(val string) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *ChatCompletionMessageToolCallFunction) SetArguments(val string) {
	s.Arguments = val
}

// The type of the tool. Currently, only `function` is supported.
type ChatCompletionMessageToolCallType string

const (
	ChatCompletionMessageToolCallTypeFunction ChatCompletionMessageToolCallType = "function"
)

// AllValues returns all ChatCompletionMessageToolCallType values.
func (ChatCompletionMessageToolCallType) AllValues() []ChatCompletionMessageToolCallType {
	return []ChatCompletionMessageToolCallType{
		ChatCompletionMessageToolCallTypeFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChatCompletionMessageToolCallType) MarshalText() ([]byte, error) {
	switch s {
	case ChatCompletionMessageToolCallTypeFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChatCompletionMessageToolCallType) UnmarshalText(data []byte) error {
	switch ChatCompletionMessageToolCallType(data) {
	case ChatCompletionMessageToolCallTypeFunction:
		*s = ChatCompletionMessageToolCallTypeFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ChatCompletionMessageToolCalls []ChatCompletionMessageToolCall

// Specifies a tool the model should use. Use to force the model to call a specific function.
// Ref: #/components/schemas/ChatCompletionNamedToolChoice
type ChatCompletionNamedToolChoice struct {
	// The type of the tool. Currently, only `function` is supported.
	Type     ChatCompletionNamedToolChoiceType     `json:"type"`
	Function ChatCompletionNamedToolChoiceFunction `json:"function"`
}

// GetType returns the value of Type.
func (s *ChatCompletionNamedToolChoice) GetType() ChatCompletionNamedToolChoiceType {
	return s.Type
}

// GetFunction returns the value of Function.
func (s *ChatCompletionNamedToolChoice) GetFunction() ChatCompletionNamedToolChoiceFunction {
	return s.Function
}

// SetType sets the value of Type.
func (s *ChatCompletionNamedToolChoice) SetType(val ChatCompletionNamedToolChoiceType) {
	s.Type = val
}

// SetFunction sets the value of Function.
func (s *ChatCompletionNamedToolChoice) SetFunction(val ChatCompletionNamedToolChoiceFunction) {
	s.Function = val
}

type ChatCompletionNamedToolChoiceFunction struct {
	// The name of the function to call.
	Name string `json:"name"`
}

// GetName returns the value of Name.
func (s *ChatCompletionNamedToolChoiceFunction) GetName() string {
	return s.Name
}

// SetName sets the value of Name.
func (s *ChatCompletionNamedToolChoiceFunction) SetName(val string) {
	s.Name = val
}

// The type of the tool. Currently, only `function` is supported.
type ChatCompletionNamedToolChoiceType string

const (
	ChatCompletionNamedToolChoiceTypeFunction ChatCompletionNamedToolChoiceType = "function"
)

// AllValues returns all ChatCompletionNamedToolChoiceType values.
func (ChatCompletionNamedToolChoiceType) AllValues() []ChatCompletionNamedToolChoiceType {
	return []ChatCompletionNamedToolChoiceType{
		ChatCompletionNamedToolChoiceTypeFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChatCompletionNamedToolChoiceType) MarshalText() ([]byte, error) {
	switch s {
	case ChatCompletionNamedToolChoiceTypeFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChatCompletionNamedToolChoiceType) UnmarshalText(data []byte) error {
	switch ChatCompletionNamedToolChoiceType(data) {
	case ChatCompletionNamedToolChoiceTypeFunction:
		*s = ChatCompletionNamedToolChoiceTypeFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ChatCompletionRequestSystemMessage
type ChatCompletionRequestSystemMessage struct {
	// The contents of the system message.
	Content string `json:"content"`
	// The role of the messages author, in this case `system`.
	Role ChatCompletionRequestSystemMessageRole `json:"role"`
	// An optional name for the participant. Provides the model information to differentiate between
	// participants of the same role.
	Name OptString `json:"name"`
}

// GetContent returns the value of Content.
func (s *ChatCompletionRequestSystemMessage) GetContent() string {
	return s.Content
}

// GetRole returns the value of Role.
func (s *ChatCompletionRequestSystemMessage) GetRole() ChatCompletionRequestSystemMessageRole {
	return s.Role
}

// GetName returns the value of Name.
func (s *ChatCompletionRequestSystemMessage) GetName() OptString {
	return s.Name
}

// SetContent sets the value of Content.
func (s *ChatCompletionRequestSystemMessage) SetContent(val string) {
	s.Content = val
}

// SetRole sets the value of Role.
func (s *ChatCompletionRequestSystemMessage) SetRole(val ChatCompletionRequestSystemMessageRole) {
	s.Role = val
}

// SetName sets the value of Name.
func (s *ChatCompletionRequestSystemMessage) SetName(val OptString) {
	s.Name = val
}

// The role of the messages author, in this case `system`.
type ChatCompletionRequestSystemMessageRole string

const (
	ChatCompletionRequestSystemMessageRoleSystem ChatCompletionRequestSystemMessageRole = "system"
)

// AllValues returns all ChatCompletionRequestSystemMessageRole values.
func (ChatCompletionRequestSystemMessageRole) AllValues() []ChatCompletionRequestSystemMessageRole {
	return []ChatCompletionRequestSystemMessageRole{
		ChatCompletionRequestSystemMessageRoleSystem,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChatCompletionRequestSystemMessageRole) MarshalText() ([]byte, error) {
	switch s {
	case ChatCompletionRequestSystemMessageRoleSystem:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChatCompletionRequestSystemMessageRole) UnmarshalText(data []byte) error {
	switch ChatCompletionRequestSystemMessageRole(data) {
	case ChatCompletionRequestSystemMessageRoleSystem:
		*s = ChatCompletionRequestSystemMessageRoleSystem
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A chat completion message generated by the model.
// Ref: #/components/schemas/ChatCompletionResponseMessage
type ChatCompletionResponseMessage struct {
	// The contents of the message.
	Content   NilString                      `json:"content"`
	ToolCalls ChatCompletionMessageToolCalls `json:"tool_calls"`
	// The role of the author of this message.
	Role ChatCompletionResponseMessageRole `json:"role"`
	// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be
	// called, as generated by the model.
	//
	// Deprecated: schema marks this property as deprecated.
	FunctionCall OptChatCompletionResponseMessageFunctionCall `json:"function_call"`
}

// GetContent returns the value of Content.
func (s *ChatCompletionResponseMessage) GetContent() NilString {
	return s.Content
}

// GetToolCalls returns the value of ToolCalls.
func (s *ChatCompletionResponseMessage) GetToolCalls() ChatCompletionMessageToolCalls {
	return s.ToolCalls
}

// GetRole returns the value of Role.
func (s *ChatCompletionResponseMessage) GetRole() ChatCompletionResponseMessageRole {
	return s.Role
}

// GetFunctionCall returns the value of FunctionCall.
func (s *ChatCompletionResponseMessage) GetFunctionCall() OptChatCompletionResponseMessageFunctionCall {
	return s.FunctionCall
}

// SetContent sets the value of Content.
func (s *ChatCompletionResponseMessage) SetContent(val NilString) {
	s.Content = val
}

// SetToolCalls sets the value of ToolCalls.
func (s *ChatCompletionResponseMessage) SetToolCalls(val ChatCompletionMessageToolCalls) {
	s.ToolCalls = val
}

// SetRole sets the value of Role.
func (s *ChatCompletionResponseMessage) SetRole(val ChatCompletionResponseMessageRole) {
	s.Role = val
}

// SetFunctionCall sets the value of FunctionCall.
func (s *ChatCompletionResponseMessage) SetFunctionCall(val OptChatCompletionResponseMessageFunctionCall) {
	s.FunctionCall = val
}

// Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be
// called, as generated by the model.
//
// Deprecated: schema marks this type as deprecated.
type ChatCompletionResponseMessageFunctionCall struct {
	// The arguments to call the function with, as generated by the model in JSON format. Note that the
	// model does not always generate valid JSON, and may hallucinate parameters not defined by your
	// function schema. Validate the arguments in your code before calling your function.
	Arguments string `json:"arguments"`
	// The name of the function to call.
	Name string `json:"name"`
}

// GetArguments returns the value of Arguments.
func (s *ChatCompletionResponseMessageFunctionCall) GetArguments() string {
	return s.Arguments
}

// GetName returns the value of Name.
func (s *ChatCompletionResponseMessageFunctionCall) GetName() string {
	return s.Name
}

// SetArguments sets the value of Arguments.
func (s *ChatCompletionResponseMessageFunctionCall) SetArguments(val string) {
	s.Arguments = val
}

// SetName sets the value of Name.
func (s *ChatCompletionResponseMessageFunctionCall) SetName(val string) {
	s.Name = val
}

// The role of the author of this message.
type ChatCompletionResponseMessageRole string

const (
	ChatCompletionResponseMessageRoleAssistant ChatCompletionResponseMessageRole = "assistant"
)

// AllValues returns all ChatCompletionResponseMessageRole values.
func (ChatCompletionResponseMessageRole) AllValues() []ChatCompletionResponseMessageRole {
	return []ChatCompletionResponseMessageRole{
		ChatCompletionResponseMessageRoleAssistant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChatCompletionResponseMessageRole) MarshalText() ([]byte, error) {
	switch s {
	case ChatCompletionResponseMessageRoleAssistant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChatCompletionResponseMessageRole) UnmarshalText(data []byte) error {
	switch ChatCompletionResponseMessageRole(data) {
	case ChatCompletionResponseMessageRoleAssistant:
		*s = ChatCompletionResponseMessageRoleAssistant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ChatCompletionTokenLogprob
type ChatCompletionTokenLogprob struct {
	// The token.
	Token string `json:"token"`
	// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the
	// value `-9999.0` is used to signify that the token is very unlikely.
	Logprob float64 `json:"logprob"`
	// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances
	// where characters are represented by multiple tokens and their byte representations must be
	// combined to generate the correct text representation. Can be `null` if there is no bytes
	// representation for the token.
	Bytes []int `json:"bytes"`
	// List of the most likely tokens and their log probability, at this token position. In rare cases,
	// there may be fewer than the number of requested `top_logprobs` returned.
	TopLogprobs []ChatCompletionTokenLogprobTopLogprobsItem `json:"top_logprobs"`
}

// GetToken returns the value of Token.
func (s *ChatCompletionTokenLogprob) GetToken() string {
	return s.Token
}

// GetLogprob returns the value of Logprob.
func (s *ChatCompletionTokenLogprob) GetLogprob() float64 {
	return s.Logprob
}

// GetBytes returns the value of Bytes.
func (s *ChatCompletionTokenLogprob) GetBytes() []int {
	return s.Bytes
}

// GetTopLogprobs returns the value of TopLogprobs.
func (s *ChatCompletionTokenLogprob) GetTopLogprobs() []ChatCompletionTokenLogprobTopLogprobsItem {
	return s.TopLogprobs
}

// SetToken sets the value of Token.
func (s *ChatCompletionTokenLogprob) SetToken(val string) {
	s.Token = val
}

// SetLogprob sets the value of Logprob.
func (s *ChatCompletionTokenLogprob) SetLogprob(val float64) {
	s.Logprob = val
}

// SetBytes sets the value of Bytes.
func (s *ChatCompletionTokenLogprob) SetBytes(val []int) {
	s.Bytes = val
}

// SetTopLogprobs sets the value of TopLogprobs.
func (s *ChatCompletionTokenLogprob) SetTopLogprobs(val []ChatCompletionTokenLogprobTopLogprobsItem) {
	s.TopLogprobs = val
}

type ChatCompletionTokenLogprobTopLogprobsItem struct {
	// The token.
	Token string `json:"token"`
	// The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the
	// value `-9999.0` is used to signify that the token is very unlikely.
	Logprob float64 `json:"logprob"`
	// A list of integers representing the UTF-8 bytes representation of the token. Useful in instances
	// where characters are represented by multiple tokens and their byte representations must be
	// combined to generate the correct text representation. Can be `null` if there is no bytes
	// representation for the token.
	Bytes []int `json:"bytes"`
}

// GetToken returns the value of Token.
func (s *ChatCompletionTokenLogprobTopLogprobsItem) GetToken() string {
	return s.Token
}

// GetLogprob returns the value of Logprob.
func (s *ChatCompletionTokenLogprobTopLogprobsItem) GetLogprob() float64 {
	return s.Logprob
}

// GetBytes returns the value of Bytes.
func (s *ChatCompletionTokenLogprobTopLogprobsItem) GetBytes() []int {
	return s.Bytes
}

// SetToken sets the value of Token.
func (s *ChatCompletionTokenLogprobTopLogprobsItem) SetToken(val string) {
	s.Token = val
}

// SetLogprob sets the value of Logprob.
func (s *ChatCompletionTokenLogprobTopLogprobsItem) SetLogprob(val float64) {
	s.Logprob = val
}

// SetBytes sets the value of Bytes.
func (s *ChatCompletionTokenLogprobTopLogprobsItem) SetBytes(val []int) {
	s.Bytes = val
}

// Ref: #/components/schemas/ChatCompletionTool
type ChatCompletionTool struct {
	// The type of the tool. Currently, only `function` is supported.
	Type     ChatCompletionToolType `json:"type"`
	Function FunctionObject         `json:"function"`
}

// GetType returns the value of Type.
func (s *ChatCompletionTool) GetType() ChatCompletionToolType {
	return s.Type
}

// GetFunction returns the value of Function.
func (s *ChatCompletionTool) GetFunction() FunctionObject {
	return s.Function
}

// SetType sets the value of Type.
func (s *ChatCompletionTool) SetType(val ChatCompletionToolType) {
	s.Type = val
}

// SetFunction sets the value of Function.
func (s *ChatCompletionTool) SetFunction(val FunctionObject) {
	s.Function = val
}

// Controls which (if any) function is called by the model.
// `none` means the model will not call a function and instead generates a message.
// `auto` means the model can pick between generating a message or calling a function.
// Specifying a particular function via `{"type": "function", "function": {"name": "my_function"}}`
// forces the model to call that function.
// `none` is the default when no functions are present. `auto` is the default if functions are
// present.
// Ref: #/components/schemas/ChatCompletionToolChoiceOption
// ChatCompletionToolChoiceOption represents sum type.
type ChatCompletionToolChoiceOption struct {
	Type                            ChatCompletionToolChoiceOptionType // switch on this field
	ChatCompletionToolChoiceOption0 ChatCompletionToolChoiceOption0
	ChatCompletionNamedToolChoice   ChatCompletionNamedToolChoice
}

// ChatCompletionToolChoiceOptionType is oneOf type of ChatCompletionToolChoiceOption.
type ChatCompletionToolChoiceOptionType string

// Possible values for ChatCompletionToolChoiceOptionType.
const (
	ChatCompletionToolChoiceOption0ChatCompletionToolChoiceOption ChatCompletionToolChoiceOptionType = "ChatCompletionToolChoiceOption0"
	ChatCompletionNamedToolChoiceChatCompletionToolChoiceOption   ChatCompletionToolChoiceOptionType = "ChatCompletionNamedToolChoice"
)

// IsChatCompletionToolChoiceOption0 reports whether ChatCompletionToolChoiceOption is ChatCompletionToolChoiceOption0.
func (s ChatCompletionToolChoiceOption) IsChatCompletionToolChoiceOption0() bool {
	return s.Type == ChatCompletionToolChoiceOption0ChatCompletionToolChoiceOption
}

// IsChatCompletionNamedToolChoice reports whether ChatCompletionToolChoiceOption is ChatCompletionNamedToolChoice.
func (s ChatCompletionToolChoiceOption) IsChatCompletionNamedToolChoice() bool {
	return s.Type == ChatCompletionNamedToolChoiceChatCompletionToolChoiceOption
}

// SetChatCompletionToolChoiceOption0 sets ChatCompletionToolChoiceOption to ChatCompletionToolChoiceOption0.
func (s *ChatCompletionToolChoiceOption) SetChatCompletionToolChoiceOption0(v ChatCompletionToolChoiceOption0) {
	s.Type = ChatCompletionToolChoiceOption0ChatCompletionToolChoiceOption
	s.ChatCompletionToolChoiceOption0 = v
}

// GetChatCompletionToolChoiceOption0 returns ChatCompletionToolChoiceOption0 and true boolean if ChatCompletionToolChoiceOption is ChatCompletionToolChoiceOption0.
func (s ChatCompletionToolChoiceOption) GetChatCompletionToolChoiceOption0() (v ChatCompletionToolChoiceOption0, ok bool) {
	if !s.IsChatCompletionToolChoiceOption0() {
		return v, false
	}
	return s.ChatCompletionToolChoiceOption0, true
}

// NewChatCompletionToolChoiceOption0ChatCompletionToolChoiceOption returns new ChatCompletionToolChoiceOption from ChatCompletionToolChoiceOption0.
func NewChatCompletionToolChoiceOption0ChatCompletionToolChoiceOption(v ChatCompletionToolChoiceOption0) ChatCompletionToolChoiceOption {
	var s ChatCompletionToolChoiceOption
	s.SetChatCompletionToolChoiceOption0(v)
	return s
}

// SetChatCompletionNamedToolChoice sets ChatCompletionToolChoiceOption to ChatCompletionNamedToolChoice.
func (s *ChatCompletionToolChoiceOption) SetChatCompletionNamedToolChoice(v ChatCompletionNamedToolChoice) {
	s.Type = ChatCompletionNamedToolChoiceChatCompletionToolChoiceOption
	s.ChatCompletionNamedToolChoice = v
}

// GetChatCompletionNamedToolChoice returns ChatCompletionNamedToolChoice and true boolean if ChatCompletionToolChoiceOption is ChatCompletionNamedToolChoice.
func (s ChatCompletionToolChoiceOption) GetChatCompletionNamedToolChoice() (v ChatCompletionNamedToolChoice, ok bool) {
	if !s.IsChatCompletionNamedToolChoice() {
		return v, false
	}
	return s.ChatCompletionNamedToolChoice, true
}

// NewChatCompletionNamedToolChoiceChatCompletionToolChoiceOption returns new ChatCompletionToolChoiceOption from ChatCompletionNamedToolChoice.
func NewChatCompletionNamedToolChoiceChatCompletionToolChoiceOption(v ChatCompletionNamedToolChoice) ChatCompletionToolChoiceOption {
	var s ChatCompletionToolChoiceOption
	s.SetChatCompletionNamedToolChoice(v)
	return s
}

// `none` means the model will not call a function and instead generates a message. `auto` means the
// model can pick between generating a message or calling a function.
type ChatCompletionToolChoiceOption0 string

const (
	ChatCompletionToolChoiceOption0None ChatCompletionToolChoiceOption0 = "none"
	ChatCompletionToolChoiceOption0Auto ChatCompletionToolChoiceOption0 = "auto"
)

// AllValues returns all ChatCompletionToolChoiceOption0 values.
func (ChatCompletionToolChoiceOption0) AllValues() []ChatCompletionToolChoiceOption0 {
	return []ChatCompletionToolChoiceOption0{
		ChatCompletionToolChoiceOption0None,
		ChatCompletionToolChoiceOption0Auto,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChatCompletionToolChoiceOption0) MarshalText() ([]byte, error) {
	switch s {
	case ChatCompletionToolChoiceOption0None:
		return []byte(s), nil
	case ChatCompletionToolChoiceOption0Auto:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChatCompletionToolChoiceOption0) UnmarshalText(data []byte) error {
	switch ChatCompletionToolChoiceOption0(data) {
	case ChatCompletionToolChoiceOption0None:
		*s = ChatCompletionToolChoiceOption0None
		return nil
	case ChatCompletionToolChoiceOption0Auto:
		*s = ChatCompletionToolChoiceOption0Auto
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The type of the tool. Currently, only `function` is supported.
type ChatCompletionToolType string

const (
	ChatCompletionToolTypeFunction ChatCompletionToolType = "function"
)

// AllValues returns all ChatCompletionToolType values.
func (ChatCompletionToolType) AllValues() []ChatCompletionToolType {
	return []ChatCompletionToolType{
		ChatCompletionToolTypeFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ChatCompletionToolType) MarshalText() ([]byte, error) {
	switch s {
	case ChatCompletionToolTypeFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ChatCompletionToolType) UnmarshalText(data []byte) error {
	switch ChatCompletionToolType(data) {
	case ChatCompletionToolTypeFunction:
		*s = ChatCompletionToolTypeFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Usage statistics for the completion request.
// Ref: #/components/schemas/CompletionUsage
type CompletionUsage struct {
	// Number of tokens in the generated completion.
	CompletionTokens int `json:"completion_tokens"`
	// Number of tokens in the prompt.
	PromptTokens int `json:"prompt_tokens"`
	// Total number of tokens used in the request (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// GetCompletionTokens returns the value of CompletionTokens.
func (s *CompletionUsage) GetCompletionTokens() int {
	return s.CompletionTokens
}

// GetPromptTokens returns the value of PromptTokens.
func (s *CompletionUsage) GetPromptTokens() int {
	return s.PromptTokens
}

// GetTotalTokens returns the value of TotalTokens.
func (s *CompletionUsage) GetTotalTokens() int {
	return s.TotalTokens
}

// SetCompletionTokens sets the value of CompletionTokens.
func (s *CompletionUsage) SetCompletionTokens(val int) {
	s.CompletionTokens = val
}

// SetPromptTokens sets the value of PromptTokens.
func (s *CompletionUsage) SetPromptTokens(val int) {
	s.PromptTokens = val
}

// SetTotalTokens sets the value of TotalTokens.
func (s *CompletionUsage) SetTotalTokens(val int) {
	s.TotalTokens = val
}

// Ref: #/components/schemas/CreateAssistantFileRequest
type CreateAssistantFileRequest struct {
	// A [File](/docs/api-reference/files) ID (with `purpose="assistants"`) that the assistant should use.
	//  Useful for tools like `retrieval` and `code_interpreter` that can access files.
	FileID string `json:"file_id"`
}

// GetFileID returns the value of FileID.
func (s *CreateAssistantFileRequest) GetFileID() string {
	return s.FileID
}

// SetFileID sets the value of FileID.
func (s *CreateAssistantFileRequest) SetFileID(val string) {
	s.FileID = val
}

// Ref: #/components/schemas/CreateAssistantRequest
type CreateAssistantRequest struct {
	// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see
	// all of your available models, or see our [Model overview](/docs/models/overview) for descriptions
	// of them.
	Model CreateAssistantRequestModel `json:"model"`
	// The name of the assistant. The maximum length is 256 characters.
	Name OptNilString `json:"name"`
	// The description of the assistant. The maximum length is 512 characters.
	Description OptNilString `json:"description"`
	// The system instructions that the assistant uses. The maximum length is 32768 characters.
	Instructions OptNilString `json:"instructions"`
	// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools
	// can be of types `code_interpreter`, `retrieval`, or `function`.
	Tools []CreateAssistantRequestToolsItem `json:"tools"`
	// A list of [file](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum
	// of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
	FileIds []string `json:"file_ids"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata OptCreateAssistantRequestMetadata `json:"metadata"`
}

// GetModel returns the value of Model.
func (s *CreateAssistantRequest) GetModel() CreateAssistantRequestModel {
	return s.Model
}

// GetName returns the value of Name.
func (s *CreateAssistantRequest) GetName() OptNilString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *CreateAssistantRequest) GetDescription() OptNilString {
	return s.Description
}

// GetInstructions returns the value of Instructions.
func (s *CreateAssistantRequest) GetInstructions() OptNilString {
	return s.Instructions
}

// GetTools returns the value of Tools.
func (s *CreateAssistantRequest) GetTools() []CreateAssistantRequestToolsItem {
	return s.Tools
}

// GetFileIds returns the value of FileIds.
func (s *CreateAssistantRequest) GetFileIds() []string {
	return s.FileIds
}

// GetMetadata returns the value of Metadata.
func (s *CreateAssistantRequest) GetMetadata() OptCreateAssistantRequestMetadata {
	return s.Metadata
}

// SetModel sets the value of Model.
func (s *CreateAssistantRequest) SetModel(val CreateAssistantRequestModel) {
	s.Model = val
}

// SetName sets the value of Name.
func (s *CreateAssistantRequest) SetName(val OptNilString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *CreateAssistantRequest) SetDescription(val OptNilString) {
	s.Description = val
}

// SetInstructions sets the value of Instructions.
func (s *CreateAssistantRequest) SetInstructions(val OptNilString) {
	s.Instructions = val
}

// SetTools sets the value of Tools.
func (s *CreateAssistantRequest) SetTools(val []CreateAssistantRequestToolsItem) {
	s.Tools = val
}

// SetFileIds sets the value of FileIds.
func (s *CreateAssistantRequest) SetFileIds(val []string) {
	s.FileIds = val
}

// SetMetadata sets the value of Metadata.
func (s *CreateAssistantRequest) SetMetadata(val OptCreateAssistantRequestMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type CreateAssistantRequestMetadata struct{}

// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see
// all of your available models, or see our [Model overview](/docs/models/overview) for descriptions
// of them.
// CreateAssistantRequestModel represents sum type.
type CreateAssistantRequestModel struct {
	Type   CreateAssistantRequestModelType // switch on this field
	String string
}

// CreateAssistantRequestModelType is oneOf type of CreateAssistantRequestModel.
type CreateAssistantRequestModelType string

// Possible values for CreateAssistantRequestModelType.
const (
	StringCreateAssistantRequestModel CreateAssistantRequestModelType = "string"
)

// IsString reports whether CreateAssistantRequestModel is string.
func (s CreateAssistantRequestModel) IsString() bool {
	return s.Type == StringCreateAssistantRequestModel
}

// SetString sets CreateAssistantRequestModel to string.
func (s *CreateAssistantRequestModel) SetString(v string) {
	s.Type = StringCreateAssistantRequestModel
	s.String = v
}

// GetString returns string and true boolean if CreateAssistantRequestModel is string.
func (s CreateAssistantRequestModel) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringCreateAssistantRequestModel returns new CreateAssistantRequestModel from string.
func NewStringCreateAssistantRequestModel(v string) CreateAssistantRequestModel {
	var s CreateAssistantRequestModel
	s.SetString(v)
	return s
}

// CreateAssistantRequestToolsItem represents sum type.
type CreateAssistantRequestToolsItem struct {
	Type                    CreateAssistantRequestToolsItemType // switch on this field
	AssistantToolsCode      AssistantToolsCode
	AssistantToolsRetrieval AssistantToolsRetrieval
	AssistantToolsFunction  AssistantToolsFunction
}

// CreateAssistantRequestToolsItemType is oneOf type of CreateAssistantRequestToolsItem.
type CreateAssistantRequestToolsItemType string

// Possible values for CreateAssistantRequestToolsItemType.
const (
	AssistantToolsCodeCreateAssistantRequestToolsItem      CreateAssistantRequestToolsItemType = "code_interpreter"
	AssistantToolsRetrievalCreateAssistantRequestToolsItem CreateAssistantRequestToolsItemType = "retrieval"
	AssistantToolsFunctionCreateAssistantRequestToolsItem  CreateAssistantRequestToolsItemType = "function"
)

// IsAssistantToolsCode reports whether CreateAssistantRequestToolsItem is AssistantToolsCode.
func (s CreateAssistantRequestToolsItem) IsAssistantToolsCode() bool {
	return s.Type == AssistantToolsCodeCreateAssistantRequestToolsItem
}

// IsAssistantToolsRetrieval reports whether CreateAssistantRequestToolsItem is AssistantToolsRetrieval.
func (s CreateAssistantRequestToolsItem) IsAssistantToolsRetrieval() bool {
	return s.Type == AssistantToolsRetrievalCreateAssistantRequestToolsItem
}

// IsAssistantToolsFunction reports whether CreateAssistantRequestToolsItem is AssistantToolsFunction.
func (s CreateAssistantRequestToolsItem) IsAssistantToolsFunction() bool {
	return s.Type == AssistantToolsFunctionCreateAssistantRequestToolsItem
}

// SetAssistantToolsCode sets CreateAssistantRequestToolsItem to AssistantToolsCode.
func (s *CreateAssistantRequestToolsItem) SetAssistantToolsCode(v AssistantToolsCode) {
	s.Type = AssistantToolsCodeCreateAssistantRequestToolsItem
	s.AssistantToolsCode = v
}

// GetAssistantToolsCode returns AssistantToolsCode and true boolean if CreateAssistantRequestToolsItem is AssistantToolsCode.
func (s CreateAssistantRequestToolsItem) GetAssistantToolsCode() (v AssistantToolsCode, ok bool) {
	if !s.IsAssistantToolsCode() {
		return v, false
	}
	return s.AssistantToolsCode, true
}

// NewAssistantToolsCodeCreateAssistantRequestToolsItem returns new CreateAssistantRequestToolsItem from AssistantToolsCode.
func NewAssistantToolsCodeCreateAssistantRequestToolsItem(v AssistantToolsCode) CreateAssistantRequestToolsItem {
	var s CreateAssistantRequestToolsItem
	s.SetAssistantToolsCode(v)
	return s
}

// SetAssistantToolsRetrieval sets CreateAssistantRequestToolsItem to AssistantToolsRetrieval.
func (s *CreateAssistantRequestToolsItem) SetAssistantToolsRetrieval(v AssistantToolsRetrieval) {
	s.Type = AssistantToolsRetrievalCreateAssistantRequestToolsItem
	s.AssistantToolsRetrieval = v
}

// GetAssistantToolsRetrieval returns AssistantToolsRetrieval and true boolean if CreateAssistantRequestToolsItem is AssistantToolsRetrieval.
func (s CreateAssistantRequestToolsItem) GetAssistantToolsRetrieval() (v AssistantToolsRetrieval, ok bool) {
	if !s.IsAssistantToolsRetrieval() {
		return v, false
	}
	return s.AssistantToolsRetrieval, true
}

// NewAssistantToolsRetrievalCreateAssistantRequestToolsItem returns new CreateAssistantRequestToolsItem from AssistantToolsRetrieval.
func NewAssistantToolsRetrievalCreateAssistantRequestToolsItem(v AssistantToolsRetrieval) CreateAssistantRequestToolsItem {
	var s CreateAssistantRequestToolsItem
	s.SetAssistantToolsRetrieval(v)
	return s
}

// SetAssistantToolsFunction sets CreateAssistantRequestToolsItem to AssistantToolsFunction.
func (s *CreateAssistantRequestToolsItem) SetAssistantToolsFunction(v AssistantToolsFunction) {
	s.Type = AssistantToolsFunctionCreateAssistantRequestToolsItem
	s.AssistantToolsFunction = v
}

// GetAssistantToolsFunction returns AssistantToolsFunction and true boolean if CreateAssistantRequestToolsItem is AssistantToolsFunction.
func (s CreateAssistantRequestToolsItem) GetAssistantToolsFunction() (v AssistantToolsFunction, ok bool) {
	if !s.IsAssistantToolsFunction() {
		return v, false
	}
	return s.AssistantToolsFunction, true
}

// NewAssistantToolsFunctionCreateAssistantRequestToolsItem returns new CreateAssistantRequestToolsItem from AssistantToolsFunction.
func NewAssistantToolsFunctionCreateAssistantRequestToolsItem(v AssistantToolsFunction) CreateAssistantRequestToolsItem {
	var s CreateAssistantRequestToolsItem
	s.SetAssistantToolsFunction(v)
	return s
}

// Ref: #/components/schemas/CreateChatCompletionRequest
type CreateChatCompletionRequest struct {
	// A list of messages comprising the conversation so far. [Example Python code](https://cookbook.
	// openai.com/examples/how_to_format_inputs_to_chatgpt_models).
	Messages []ChatCompletionRequestSystemMessage `json:"messages"`
	// ID of the model to use. See the [model endpoint
	// compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work
	// with the Chat API.
	Model string `json:"model"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency
	// in the text so far, decreasing the model's likelihood to repeat the same line verbatim.
	// [See more information about frequency and presence penalties.
	// ](/docs/guides/text-generation/parameter-details).
	FrequencyPenalty OptNilFloat64 `json:"frequency_penalty"`
	// Modify the likelihood of specified tokens appearing in the completion.
	// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an
	// associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated
	// by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1
	// should decrease or increase likelihood of selection; values like -100 or 100 should result in a
	// ban or exclusive selection of the relevant token.
	LogitBias OptNilCreateChatCompletionRequestLogitBias `json:"logit_bias"`
	// Whether to return log probabilities of the output tokens or not. If true, returns the log
	// probabilities of each output token returned in the `content` of `message`. This option is
	// currently not available on the `gpt-4-vision-preview` model.
	Logprobs OptNilBool `json:"logprobs"`
	// An integer between 0 and 20 specifying the number of most likely tokens to return at each token
	// position, each with an associated log probability. `logprobs` must be set to `true` if this
	// parameter is used.
	TopLogprobs OptNilInt `json:"top_logprobs"`
	// The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.
	// The total length of input tokens and generated tokens is limited by the model's context length.
	// [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for
	// counting tokens.
	MaxTokens OptNilInt `json:"max_tokens"`
	// How many chat completion choices to generate for each input message. Note that you will be charged
	// based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize
	// costs.
	N OptNilInt `json:"n"`
	// Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in
	// the text so far, increasing the model's likelihood to talk about new topics.
	// [See more information about frequency and presence penalties.
	// ](/docs/guides/text-generation/parameter-details).
	PresencePenalty OptNilFloat64 `json:"presence_penalty"`
	// An object specifying the format that the model must output. Compatible with [GPT-4
	// Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.
	// 5-turbo-1106`.
	// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model
	// generates is valid JSON.
	// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself
	// via a system or user message. Without this, the model may generate an unending stream of
	// whitespace until the generation reaches the token limit, resulting in a long-running and seemingly
	// "stuck" request. Also note that the message content may be partially cut off if
	// `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation
	// exceeded the max context length.
	ResponseFormat OptCreateChatCompletionRequestResponseFormat `json:"response_format"`
	// This feature is in Beta.
	// If specified, our system will make a best effort to sample deterministically, such that repeated
	// requests with the same `seed` and parameters should return the same result.
	// Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter
	// to monitor changes in the backend.
	Seed OptInt64 `json:"seed"`
	// Up to 4 sequences where the API will stop generating further tokens.
	Stop OptCreateChatCompletionRequestStop `json:"stop"`
	// If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only
	// [server-sent events](https://developer.mozilla.
	// org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they
	// become available, with the stream terminated by a `data: [DONE]` message. [Example Python
	// code](https://cookbook.openai.com/examples/how_to_stream_completions).
	Stream OptNilBool `json:"stream"`
	// What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output
	// more random, while lower values like 0.2 will make it more focused and deterministic.
	// We generally recommend altering this or `top_p` but not both.
	Temperature OptNilFloat64 `json:"temperature"`
	// An alternative to sampling with temperature, called nucleus sampling, where the model considers
	// the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the
	// top 10% probability mass are considered.
	// We generally recommend altering this or `temperature` but not both.
	TopP OptNilFloat64 `json:"top_p"`
	// A list of tools the model may call. Currently, only functions are supported as a tool. Use this to
	// provide a list of functions the model may generate JSON inputs for.
	Tools      []ChatCompletionTool              `json:"tools"`
	ToolChoice OptChatCompletionToolChoiceOption `json:"tool_choice"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
	// [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User OptString `json:"user"`
	// Deprecated in favor of `tool_choice`.
	// Controls which (if any) function is called by the model.
	// `none` means the model will not call a function and instead generates a message.
	// `auto` means the model can pick between generating a message or calling a function.
	// Specifying a particular function via `{"name": "my_function"}` forces the model to call that
	// function.
	// `none` is the default when no functions are present. `auto` is the default if functions are
	// present.
	//
	// Deprecated: schema marks this property as deprecated.
	FunctionCall OptCreateChatCompletionRequestFunctionCall `json:"function_call"`
	// Deprecated in favor of `tools`.
	// A list of functions the model may generate JSON inputs for.
	//
	// Deprecated: schema marks this property as deprecated.
	Functions []ChatCompletionFunctions `json:"functions"`
}

// GetMessages returns the value of Messages.
func (s *CreateChatCompletionRequest) GetMessages() []ChatCompletionRequestSystemMessage {
	return s.Messages
}

// GetModel returns the value of Model.
func (s *CreateChatCompletionRequest) GetModel() string {
	return s.Model
}

// GetFrequencyPenalty returns the value of FrequencyPenalty.
func (s *CreateChatCompletionRequest) GetFrequencyPenalty() OptNilFloat64 {
	return s.FrequencyPenalty
}

// GetLogitBias returns the value of LogitBias.
func (s *CreateChatCompletionRequest) GetLogitBias() OptNilCreateChatCompletionRequestLogitBias {
	return s.LogitBias
}

// GetLogprobs returns the value of Logprobs.
func (s *CreateChatCompletionRequest) GetLogprobs() OptNilBool {
	return s.Logprobs
}

// GetTopLogprobs returns the value of TopLogprobs.
func (s *CreateChatCompletionRequest) GetTopLogprobs() OptNilInt {
	return s.TopLogprobs
}

// GetMaxTokens returns the value of MaxTokens.
func (s *CreateChatCompletionRequest) GetMaxTokens() OptNilInt {
	return s.MaxTokens
}

// GetN returns the value of N.
func (s *CreateChatCompletionRequest) GetN() OptNilInt {
	return s.N
}

// GetPresencePenalty returns the value of PresencePenalty.
func (s *CreateChatCompletionRequest) GetPresencePenalty() OptNilFloat64 {
	return s.PresencePenalty
}

// GetResponseFormat returns the value of ResponseFormat.
func (s *CreateChatCompletionRequest) GetResponseFormat() OptCreateChatCompletionRequestResponseFormat {
	return s.ResponseFormat
}

// GetSeed returns the value of Seed.
func (s *CreateChatCompletionRequest) GetSeed() OptInt64 {
	return s.Seed
}

// GetStop returns the value of Stop.
func (s *CreateChatCompletionRequest) GetStop() OptCreateChatCompletionRequestStop {
	return s.Stop
}

// GetStream returns the value of Stream.
func (s *CreateChatCompletionRequest) GetStream() OptNilBool {
	return s.Stream
}

// GetTemperature returns the value of Temperature.
func (s *CreateChatCompletionRequest) GetTemperature() OptNilFloat64 {
	return s.Temperature
}

// GetTopP returns the value of TopP.
func (s *CreateChatCompletionRequest) GetTopP() OptNilFloat64 {
	return s.TopP
}

// GetTools returns the value of Tools.
func (s *CreateChatCompletionRequest) GetTools() []ChatCompletionTool {
	return s.Tools
}

// GetToolChoice returns the value of ToolChoice.
func (s *CreateChatCompletionRequest) GetToolChoice() OptChatCompletionToolChoiceOption {
	return s.ToolChoice
}

// GetUser returns the value of User.
func (s *CreateChatCompletionRequest) GetUser() OptString {
	return s.User
}

// GetFunctionCall returns the value of FunctionCall.
func (s *CreateChatCompletionRequest) GetFunctionCall() OptCreateChatCompletionRequestFunctionCall {
	return s.FunctionCall
}

// GetFunctions returns the value of Functions.
func (s *CreateChatCompletionRequest) GetFunctions() []ChatCompletionFunctions {
	return s.Functions
}

// SetMessages sets the value of Messages.
func (s *CreateChatCompletionRequest) SetMessages(val []ChatCompletionRequestSystemMessage) {
	s.Messages = val
}

// SetModel sets the value of Model.
func (s *CreateChatCompletionRequest) SetModel(val string) {
	s.Model = val
}

// SetFrequencyPenalty sets the value of FrequencyPenalty.
func (s *CreateChatCompletionRequest) SetFrequencyPenalty(val OptNilFloat64) {
	s.FrequencyPenalty = val
}

// SetLogitBias sets the value of LogitBias.
func (s *CreateChatCompletionRequest) SetLogitBias(val OptNilCreateChatCompletionRequestLogitBias) {
	s.LogitBias = val
}

// SetLogprobs sets the value of Logprobs.
func (s *CreateChatCompletionRequest) SetLogprobs(val OptNilBool) {
	s.Logprobs = val
}

// SetTopLogprobs sets the value of TopLogprobs.
func (s *CreateChatCompletionRequest) SetTopLogprobs(val OptNilInt) {
	s.TopLogprobs = val
}

// SetMaxTokens sets the value of MaxTokens.
func (s *CreateChatCompletionRequest) SetMaxTokens(val OptNilInt) {
	s.MaxTokens = val
}

// SetN sets the value of N.
func (s *CreateChatCompletionRequest) SetN(val OptNilInt) {
	s.N = val
}

// SetPresencePenalty sets the value of PresencePenalty.
func (s *CreateChatCompletionRequest) SetPresencePenalty(val OptNilFloat64) {
	s.PresencePenalty = val
}

// SetResponseFormat sets the value of ResponseFormat.
func (s *CreateChatCompletionRequest) SetResponseFormat(val OptCreateChatCompletionRequestResponseFormat) {
	s.ResponseFormat = val
}

// SetSeed sets the value of Seed.
func (s *CreateChatCompletionRequest) SetSeed(val OptInt64) {
	s.Seed = val
}

// SetStop sets the value of Stop.
func (s *CreateChatCompletionRequest) SetStop(val OptCreateChatCompletionRequestStop) {
	s.Stop = val
}

// SetStream sets the value of Stream.
func (s *CreateChatCompletionRequest) SetStream(val OptNilBool) {
	s.Stream = val
}

// SetTemperature sets the value of Temperature.
func (s *CreateChatCompletionRequest) SetTemperature(val OptNilFloat64) {
	s.Temperature = val
}

// SetTopP sets the value of TopP.
func (s *CreateChatCompletionRequest) SetTopP(val OptNilFloat64) {
	s.TopP = val
}

// SetTools sets the value of Tools.
func (s *CreateChatCompletionRequest) SetTools(val []ChatCompletionTool) {
	s.Tools = val
}

// SetToolChoice sets the value of ToolChoice.
func (s *CreateChatCompletionRequest) SetToolChoice(val OptChatCompletionToolChoiceOption) {
	s.ToolChoice = val
}

// SetUser sets the value of User.
func (s *CreateChatCompletionRequest) SetUser(val OptString) {
	s.User = val
}

// SetFunctionCall sets the value of FunctionCall.
func (s *CreateChatCompletionRequest) SetFunctionCall(val OptCreateChatCompletionRequestFunctionCall) {
	s.FunctionCall = val
}

// SetFunctions sets the value of Functions.
func (s *CreateChatCompletionRequest) SetFunctions(val []ChatCompletionFunctions) {
	s.Functions = val
}

// Deprecated in favor of `tool_choice`.
// Controls which (if any) function is called by the model.
// `none` means the model will not call a function and instead generates a message.
// `auto` means the model can pick between generating a message or calling a function.
// Specifying a particular function via `{"name": "my_function"}` forces the model to call that
// function.
// `none` is the default when no functions are present. `auto` is the default if functions are
// present.
//
// Deprecated: schema marks this type as deprecated.
// CreateChatCompletionRequestFunctionCall represents sum type.
type CreateChatCompletionRequestFunctionCall struct {
	Type                                     CreateChatCompletionRequestFunctionCallType // switch on this field
	CreateChatCompletionRequestFunctionCall0 CreateChatCompletionRequestFunctionCall0
	ChatCompletionFunctionCallOption         ChatCompletionFunctionCallOption
}

// CreateChatCompletionRequestFunctionCallType is oneOf type of CreateChatCompletionRequestFunctionCall.
type CreateChatCompletionRequestFunctionCallType string

// Possible values for CreateChatCompletionRequestFunctionCallType.
const (
	CreateChatCompletionRequestFunctionCall0CreateChatCompletionRequestFunctionCall CreateChatCompletionRequestFunctionCallType = "CreateChatCompletionRequestFunctionCall0"
	ChatCompletionFunctionCallOptionCreateChatCompletionRequestFunctionCall         CreateChatCompletionRequestFunctionCallType = "ChatCompletionFunctionCallOption"
)

// IsCreateChatCompletionRequestFunctionCall0 reports whether CreateChatCompletionRequestFunctionCall is CreateChatCompletionRequestFunctionCall0.
func (s CreateChatCompletionRequestFunctionCall) IsCreateChatCompletionRequestFunctionCall0() bool {
	return s.Type == CreateChatCompletionRequestFunctionCall0CreateChatCompletionRequestFunctionCall
}

// IsChatCompletionFunctionCallOption reports whether CreateChatCompletionRequestFunctionCall is ChatCompletionFunctionCallOption.
func (s CreateChatCompletionRequestFunctionCall) IsChatCompletionFunctionCallOption() bool {
	return s.Type == ChatCompletionFunctionCallOptionCreateChatCompletionRequestFunctionCall
}

// SetCreateChatCompletionRequestFunctionCall0 sets CreateChatCompletionRequestFunctionCall to CreateChatCompletionRequestFunctionCall0.
func (s *CreateChatCompletionRequestFunctionCall) SetCreateChatCompletionRequestFunctionCall0(v CreateChatCompletionRequestFunctionCall0) {
	s.Type = CreateChatCompletionRequestFunctionCall0CreateChatCompletionRequestFunctionCall
	s.CreateChatCompletionRequestFunctionCall0 = v
}

// GetCreateChatCompletionRequestFunctionCall0 returns CreateChatCompletionRequestFunctionCall0 and true boolean if CreateChatCompletionRequestFunctionCall is CreateChatCompletionRequestFunctionCall0.
func (s CreateChatCompletionRequestFunctionCall) GetCreateChatCompletionRequestFunctionCall0() (v CreateChatCompletionRequestFunctionCall0, ok bool) {
	if !s.IsCreateChatCompletionRequestFunctionCall0() {
		return v, false
	}
	return s.CreateChatCompletionRequestFunctionCall0, true
}

// NewCreateChatCompletionRequestFunctionCall0CreateChatCompletionRequestFunctionCall returns new CreateChatCompletionRequestFunctionCall from CreateChatCompletionRequestFunctionCall0.
func NewCreateChatCompletionRequestFunctionCall0CreateChatCompletionRequestFunctionCall(v CreateChatCompletionRequestFunctionCall0) CreateChatCompletionRequestFunctionCall {
	var s CreateChatCompletionRequestFunctionCall
	s.SetCreateChatCompletionRequestFunctionCall0(v)
	return s
}

// SetChatCompletionFunctionCallOption sets CreateChatCompletionRequestFunctionCall to ChatCompletionFunctionCallOption.
func (s *CreateChatCompletionRequestFunctionCall) SetChatCompletionFunctionCallOption(v ChatCompletionFunctionCallOption) {
	s.Type = ChatCompletionFunctionCallOptionCreateChatCompletionRequestFunctionCall
	s.ChatCompletionFunctionCallOption = v
}

// GetChatCompletionFunctionCallOption returns ChatCompletionFunctionCallOption and true boolean if CreateChatCompletionRequestFunctionCall is ChatCompletionFunctionCallOption.
func (s CreateChatCompletionRequestFunctionCall) GetChatCompletionFunctionCallOption() (v ChatCompletionFunctionCallOption, ok bool) {
	if !s.IsChatCompletionFunctionCallOption() {
		return v, false
	}
	return s.ChatCompletionFunctionCallOption, true
}

// NewChatCompletionFunctionCallOptionCreateChatCompletionRequestFunctionCall returns new CreateChatCompletionRequestFunctionCall from ChatCompletionFunctionCallOption.
func NewChatCompletionFunctionCallOptionCreateChatCompletionRequestFunctionCall(v ChatCompletionFunctionCallOption) CreateChatCompletionRequestFunctionCall {
	var s CreateChatCompletionRequestFunctionCall
	s.SetChatCompletionFunctionCallOption(v)
	return s
}

// `none` means the model will not call a function and instead generates a message. `auto` means the
// model can pick between generating a message or calling a function.
type CreateChatCompletionRequestFunctionCall0 string

const (
	CreateChatCompletionRequestFunctionCall0None CreateChatCompletionRequestFunctionCall0 = "none"
	CreateChatCompletionRequestFunctionCall0Auto CreateChatCompletionRequestFunctionCall0 = "auto"
)

// AllValues returns all CreateChatCompletionRequestFunctionCall0 values.
func (CreateChatCompletionRequestFunctionCall0) AllValues() []CreateChatCompletionRequestFunctionCall0 {
	return []CreateChatCompletionRequestFunctionCall0{
		CreateChatCompletionRequestFunctionCall0None,
		CreateChatCompletionRequestFunctionCall0Auto,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateChatCompletionRequestFunctionCall0) MarshalText() ([]byte, error) {
	switch s {
	case CreateChatCompletionRequestFunctionCall0None:
		return []byte(s), nil
	case CreateChatCompletionRequestFunctionCall0Auto:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateChatCompletionRequestFunctionCall0) UnmarshalText(data []byte) error {
	switch CreateChatCompletionRequestFunctionCall0(data) {
	case CreateChatCompletionRequestFunctionCall0None:
		*s = CreateChatCompletionRequestFunctionCall0None
		return nil
	case CreateChatCompletionRequestFunctionCall0Auto:
		*s = CreateChatCompletionRequestFunctionCall0Auto
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Modify the likelihood of specified tokens appearing in the completion.
// Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an
// associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated
// by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1
// should decrease or increase likelihood of selection; values like -100 or 100 should result in a
// ban or exclusive selection of the relevant token.
type CreateChatCompletionRequestLogitBias map[string]int

func (s *CreateChatCompletionRequestLogitBias) init() CreateChatCompletionRequestLogitBias {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

// An object specifying the format that the model must output. Compatible with [GPT-4
// Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.
// 5-turbo-1106`.
// Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model
// generates is valid JSON.
// **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself
// via a system or user message. Without this, the model may generate an unending stream of
// whitespace until the generation reaches the token limit, resulting in a long-running and seemingly
// "stuck" request. Also note that the message content may be partially cut off if
// `finish_reason="length"`, which indicates the generation exceeded `max_tokens` or the conversation
// exceeded the max context length.
type CreateChatCompletionRequestResponseFormat struct {
	// Must be one of `text` or `json_object`.
	Type OptCreateChatCompletionRequestResponseFormatType `json:"type"`
}

// GetType returns the value of Type.
func (s *CreateChatCompletionRequestResponseFormat) GetType() OptCreateChatCompletionRequestResponseFormatType {
	return s.Type
}

// SetType sets the value of Type.
func (s *CreateChatCompletionRequestResponseFormat) SetType(val OptCreateChatCompletionRequestResponseFormatType) {
	s.Type = val
}

// Must be one of `text` or `json_object`.
type CreateChatCompletionRequestResponseFormatType string

const (
	CreateChatCompletionRequestResponseFormatTypeText       CreateChatCompletionRequestResponseFormatType = "text"
	CreateChatCompletionRequestResponseFormatTypeJSONObject CreateChatCompletionRequestResponseFormatType = "json_object"
)

// AllValues returns all CreateChatCompletionRequestResponseFormatType values.
func (CreateChatCompletionRequestResponseFormatType) AllValues() []CreateChatCompletionRequestResponseFormatType {
	return []CreateChatCompletionRequestResponseFormatType{
		CreateChatCompletionRequestResponseFormatTypeText,
		CreateChatCompletionRequestResponseFormatTypeJSONObject,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateChatCompletionRequestResponseFormatType) MarshalText() ([]byte, error) {
	switch s {
	case CreateChatCompletionRequestResponseFormatTypeText:
		return []byte(s), nil
	case CreateChatCompletionRequestResponseFormatTypeJSONObject:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateChatCompletionRequestResponseFormatType) UnmarshalText(data []byte) error {
	switch CreateChatCompletionRequestResponseFormatType(data) {
	case CreateChatCompletionRequestResponseFormatTypeText:
		*s = CreateChatCompletionRequestResponseFormatTypeText
		return nil
	case CreateChatCompletionRequestResponseFormatTypeJSONObject:
		*s = CreateChatCompletionRequestResponseFormatTypeJSONObject
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Up to 4 sequences where the API will stop generating further tokens.
// CreateChatCompletionRequestStop represents sum type.
type CreateChatCompletionRequestStop struct {
	Type        CreateChatCompletionRequestStopType // switch on this field
	Null        struct{}
	String      string
	StringArray []string
}

// CreateChatCompletionRequestStopType is oneOf type of CreateChatCompletionRequestStop.
type CreateChatCompletionRequestStopType string

// Possible values for CreateChatCompletionRequestStopType.
const (
	NullCreateChatCompletionRequestStop        CreateChatCompletionRequestStopType = "struct{}"
	StringCreateChatCompletionRequestStop      CreateChatCompletionRequestStopType = "string"
	StringArrayCreateChatCompletionRequestStop CreateChatCompletionRequestStopType = "[]string"
)

// IsNull reports whether CreateChatCompletionRequestStop is struct{}.
func (s CreateChatCompletionRequestStop) IsNull() bool {
	return s.Type == NullCreateChatCompletionRequestStop
}

// IsString reports whether CreateChatCompletionRequestStop is string.
func (s CreateChatCompletionRequestStop) IsString() bool {
	return s.Type == StringCreateChatCompletionRequestStop
}

// IsStringArray reports whether CreateChatCompletionRequestStop is []string.
func (s CreateChatCompletionRequestStop) IsStringArray() bool {
	return s.Type == StringArrayCreateChatCompletionRequestStop
}

// SetNull sets CreateChatCompletionRequestStop to struct{}.
func (s *CreateChatCompletionRequestStop) SetNull(v struct{}) {
	s.Type = NullCreateChatCompletionRequestStop
	s.Null = v
}

// GetNull returns struct{} and true boolean if CreateChatCompletionRequestStop is struct{}.
func (s CreateChatCompletionRequestStop) GetNull() (v struct{}, ok bool) {
	if !s.IsNull() {
		return v, false
	}
	return s.Null, true
}

// NewNullCreateChatCompletionRequestStop returns new CreateChatCompletionRequestStop from struct{}.
func NewNullCreateChatCompletionRequestStop(v struct{}) CreateChatCompletionRequestStop {
	var s CreateChatCompletionRequestStop
	s.SetNull(v)
	return s
}

// SetString sets CreateChatCompletionRequestStop to string.
func (s *CreateChatCompletionRequestStop) SetString(v string) {
	s.Type = StringCreateChatCompletionRequestStop
	s.String = v
}

// GetString returns string and true boolean if CreateChatCompletionRequestStop is string.
func (s CreateChatCompletionRequestStop) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringCreateChatCompletionRequestStop returns new CreateChatCompletionRequestStop from string.
func NewStringCreateChatCompletionRequestStop(v string) CreateChatCompletionRequestStop {
	var s CreateChatCompletionRequestStop
	s.SetString(v)
	return s
}

// SetStringArray sets CreateChatCompletionRequestStop to []string.
func (s *CreateChatCompletionRequestStop) SetStringArray(v []string) {
	s.Type = StringArrayCreateChatCompletionRequestStop
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if CreateChatCompletionRequestStop is []string.
func (s CreateChatCompletionRequestStop) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayCreateChatCompletionRequestStop returns new CreateChatCompletionRequestStop from []string.
func NewStringArrayCreateChatCompletionRequestStop(v []string) CreateChatCompletionRequestStop {
	var s CreateChatCompletionRequestStop
	s.SetStringArray(v)
	return s
}

// Represents a chat completion response returned by model, based on the provided input.
// Ref: #/components/schemas/CreateChatCompletionResponse
type CreateChatCompletionResponse struct {
	// A unique identifier for the chat completion.
	ID string `json:"id"`
	// A list of chat completion choices. Can be more than one if `n` is greater than 1.
	Choices []CreateChatCompletionResponseChoicesItem `json:"choices"`
	// The Unix timestamp (in seconds) of when the chat completion was created.
	Created int `json:"created"`
	// The model used for the chat completion.
	Model string `json:"model"`
	// This fingerprint represents the backend configuration that the model runs with.
	// Can be used in conjunction with the `seed` request parameter to understand when backend changes
	// have been made that might impact determinism.
	SystemFingerprint OptString `json:"system_fingerprint"`
	// The object type, which is always `chat.completion`.
	Object CreateChatCompletionResponseObject `json:"object"`
	Usage  OptCompletionUsage                 `json:"usage"`
}

// GetID returns the value of ID.
func (s *CreateChatCompletionResponse) GetID() string {
	return s.ID
}

// GetChoices returns the value of Choices.
func (s *CreateChatCompletionResponse) GetChoices() []CreateChatCompletionResponseChoicesItem {
	return s.Choices
}

// GetCreated returns the value of Created.
func (s *CreateChatCompletionResponse) GetCreated() int {
	return s.Created
}

// GetModel returns the value of Model.
func (s *CreateChatCompletionResponse) GetModel() string {
	return s.Model
}

// GetSystemFingerprint returns the value of SystemFingerprint.
func (s *CreateChatCompletionResponse) GetSystemFingerprint() OptString {
	return s.SystemFingerprint
}

// GetObject returns the value of Object.
func (s *CreateChatCompletionResponse) GetObject() CreateChatCompletionResponseObject {
	return s.Object
}

// GetUsage returns the value of Usage.
func (s *CreateChatCompletionResponse) GetUsage() OptCompletionUsage {
	return s.Usage
}

// SetID sets the value of ID.
func (s *CreateChatCompletionResponse) SetID(val string) {
	s.ID = val
}

// SetChoices sets the value of Choices.
func (s *CreateChatCompletionResponse) SetChoices(val []CreateChatCompletionResponseChoicesItem) {
	s.Choices = val
}

// SetCreated sets the value of Created.
func (s *CreateChatCompletionResponse) SetCreated(val int) {
	s.Created = val
}

// SetModel sets the value of Model.
func (s *CreateChatCompletionResponse) SetModel(val string) {
	s.Model = val
}

// SetSystemFingerprint sets the value of SystemFingerprint.
func (s *CreateChatCompletionResponse) SetSystemFingerprint(val OptString) {
	s.SystemFingerprint = val
}

// SetObject sets the value of Object.
func (s *CreateChatCompletionResponse) SetObject(val CreateChatCompletionResponseObject) {
	s.Object = val
}

// SetUsage sets the value of Usage.
func (s *CreateChatCompletionResponse) SetUsage(val OptCompletionUsage) {
	s.Usage = val
}

type CreateChatCompletionResponseChoicesItem struct {
	// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural
	// stop point or a provided stop sequence,
	// `length` if the maximum number of tokens specified in the request was reached,
	// `content_filter` if content was omitted due to a flag from our content filters,
	// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a
	// function.
	FinishReason CreateChatCompletionResponseChoicesItemFinishReason `json:"finish_reason"`
	// The index of the choice in the list of choices.
	Index   int                           `json:"index"`
	Message ChatCompletionResponseMessage `json:"message"`
	// Log probability information for the choice.
	Logprobs NilCreateChatCompletionResponseChoicesItemLogprobs `json:"logprobs"`
}

// GetFinishReason returns the value of FinishReason.
func (s *CreateChatCompletionResponseChoicesItem) GetFinishReason() CreateChatCompletionResponseChoicesItemFinishReason {
	return s.FinishReason
}

// GetIndex returns the value of Index.
func (s *CreateChatCompletionResponseChoicesItem) GetIndex() int {
	return s.Index
}

// GetMessage returns the value of Message.
func (s *CreateChatCompletionResponseChoicesItem) GetMessage() ChatCompletionResponseMessage {
	return s.Message
}

// GetLogprobs returns the value of Logprobs.
func (s *CreateChatCompletionResponseChoicesItem) GetLogprobs() NilCreateChatCompletionResponseChoicesItemLogprobs {
	return s.Logprobs
}

// SetFinishReason sets the value of FinishReason.
func (s *CreateChatCompletionResponseChoicesItem) SetFinishReason(val CreateChatCompletionResponseChoicesItemFinishReason) {
	s.FinishReason = val
}

// SetIndex sets the value of Index.
func (s *CreateChatCompletionResponseChoicesItem) SetIndex(val int) {
	s.Index = val
}

// SetMessage sets the value of Message.
func (s *CreateChatCompletionResponseChoicesItem) SetMessage(val ChatCompletionResponseMessage) {
	s.Message = val
}

// SetLogprobs sets the value of Logprobs.
func (s *CreateChatCompletionResponseChoicesItem) SetLogprobs(val NilCreateChatCompletionResponseChoicesItemLogprobs) {
	s.Logprobs = val
}

// The reason the model stopped generating tokens. This will be `stop` if the model hit a natural
// stop point or a provided stop sequence,
// `length` if the maximum number of tokens specified in the request was reached,
// `content_filter` if content was omitted due to a flag from our content filters,
// `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a
// function.
type CreateChatCompletionResponseChoicesItemFinishReason string

const (
	CreateChatCompletionResponseChoicesItemFinishReasonStop          CreateChatCompletionResponseChoicesItemFinishReason = "stop"
	CreateChatCompletionResponseChoicesItemFinishReasonLength        CreateChatCompletionResponseChoicesItemFinishReason = "length"
	CreateChatCompletionResponseChoicesItemFinishReasonToolCalls     CreateChatCompletionResponseChoicesItemFinishReason = "tool_calls"
	CreateChatCompletionResponseChoicesItemFinishReasonContentFilter CreateChatCompletionResponseChoicesItemFinishReason = "content_filter"
	CreateChatCompletionResponseChoicesItemFinishReasonFunctionCall  CreateChatCompletionResponseChoicesItemFinishReason = "function_call"
)

// AllValues returns all CreateChatCompletionResponseChoicesItemFinishReason values.
func (CreateChatCompletionResponseChoicesItemFinishReason) AllValues() []CreateChatCompletionResponseChoicesItemFinishReason {
	return []CreateChatCompletionResponseChoicesItemFinishReason{
		CreateChatCompletionResponseChoicesItemFinishReasonStop,
		CreateChatCompletionResponseChoicesItemFinishReasonLength,
		CreateChatCompletionResponseChoicesItemFinishReasonToolCalls,
		CreateChatCompletionResponseChoicesItemFinishReasonContentFilter,
		CreateChatCompletionResponseChoicesItemFinishReasonFunctionCall,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateChatCompletionResponseChoicesItemFinishReason) MarshalText() ([]byte, error) {
	switch s {
	case CreateChatCompletionResponseChoicesItemFinishReasonStop:
		return []byte(s), nil
	case CreateChatCompletionResponseChoicesItemFinishReasonLength:
		return []byte(s), nil
	case CreateChatCompletionResponseChoicesItemFinishReasonToolCalls:
		return []byte(s), nil
	case CreateChatCompletionResponseChoicesItemFinishReasonContentFilter:
		return []byte(s), nil
	case CreateChatCompletionResponseChoicesItemFinishReasonFunctionCall:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateChatCompletionResponseChoicesItemFinishReason) UnmarshalText(data []byte) error {
	switch CreateChatCompletionResponseChoicesItemFinishReason(data) {
	case CreateChatCompletionResponseChoicesItemFinishReasonStop:
		*s = CreateChatCompletionResponseChoicesItemFinishReasonStop
		return nil
	case CreateChatCompletionResponseChoicesItemFinishReasonLength:
		*s = CreateChatCompletionResponseChoicesItemFinishReasonLength
		return nil
	case CreateChatCompletionResponseChoicesItemFinishReasonToolCalls:
		*s = CreateChatCompletionResponseChoicesItemFinishReasonToolCalls
		return nil
	case CreateChatCompletionResponseChoicesItemFinishReasonContentFilter:
		*s = CreateChatCompletionResponseChoicesItemFinishReasonContentFilter
		return nil
	case CreateChatCompletionResponseChoicesItemFinishReasonFunctionCall:
		*s = CreateChatCompletionResponseChoicesItemFinishReasonFunctionCall
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Log probability information for the choice.
type CreateChatCompletionResponseChoicesItemLogprobs struct {
	// A list of message content tokens with log probability information.
	Content []ChatCompletionTokenLogprob `json:"content"`
}

// GetContent returns the value of Content.
func (s *CreateChatCompletionResponseChoicesItemLogprobs) GetContent() []ChatCompletionTokenLogprob {
	return s.Content
}

// SetContent sets the value of Content.
func (s *CreateChatCompletionResponseChoicesItemLogprobs) SetContent(val []ChatCompletionTokenLogprob) {
	s.Content = val
}

// The object type, which is always `chat.completion`.
type CreateChatCompletionResponseObject string

const (
	CreateChatCompletionResponseObjectChatCompletion CreateChatCompletionResponseObject = "chat.completion"
)

// AllValues returns all CreateChatCompletionResponseObject values.
func (CreateChatCompletionResponseObject) AllValues() []CreateChatCompletionResponseObject {
	return []CreateChatCompletionResponseObject{
		CreateChatCompletionResponseObjectChatCompletion,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateChatCompletionResponseObject) MarshalText() ([]byte, error) {
	switch s {
	case CreateChatCompletionResponseObjectChatCompletion:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateChatCompletionResponseObject) UnmarshalText(data []byte) error {
	switch CreateChatCompletionResponseObject(data) {
	case CreateChatCompletionResponseObjectChatCompletion:
		*s = CreateChatCompletionResponseObjectChatCompletion
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateFileRequest
type CreateFileRequestMultipart struct {
	// The File object (not file name) to be uploaded.
	File ht.MultipartFile `json:"file"`
	// The intended purpose of the uploaded file.
	// Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for
	// [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This
	// allows us to validate the format of the uploaded file is correct for fine-tuning.
	Purpose CreateFileRequestMultipartPurpose `json:"purpose"`
}

// GetFile returns the value of File.
func (s *CreateFileRequestMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// GetPurpose returns the value of Purpose.
func (s *CreateFileRequestMultipart) GetPurpose() CreateFileRequestMultipartPurpose {
	return s.Purpose
}

// SetFile sets the value of File.
func (s *CreateFileRequestMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// SetPurpose sets the value of Purpose.
func (s *CreateFileRequestMultipart) SetPurpose(val CreateFileRequestMultipartPurpose) {
	s.Purpose = val
}

// The intended purpose of the uploaded file.
// Use "fine-tune" for [Fine-tuning](/docs/api-reference/fine-tuning) and "assistants" for
// [Assistants](/docs/api-reference/assistants) and [Messages](/docs/api-reference/messages). This
// allows us to validate the format of the uploaded file is correct for fine-tuning.
type CreateFileRequestMultipartPurpose string

const (
	CreateFileRequestMultipartPurposeFineTune   CreateFileRequestMultipartPurpose = "fine-tune"
	CreateFileRequestMultipartPurposeAssistants CreateFileRequestMultipartPurpose = "assistants"
)

// AllValues returns all CreateFileRequestMultipartPurpose values.
func (CreateFileRequestMultipartPurpose) AllValues() []CreateFileRequestMultipartPurpose {
	return []CreateFileRequestMultipartPurpose{
		CreateFileRequestMultipartPurposeFineTune,
		CreateFileRequestMultipartPurposeAssistants,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateFileRequestMultipartPurpose) MarshalText() ([]byte, error) {
	switch s {
	case CreateFileRequestMultipartPurposeFineTune:
		return []byte(s), nil
	case CreateFileRequestMultipartPurposeAssistants:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateFileRequestMultipartPurpose) UnmarshalText(data []byte) error {
	switch CreateFileRequestMultipartPurpose(data) {
	case CreateFileRequestMultipartPurposeFineTune:
		*s = CreateFileRequestMultipartPurposeFineTune
		return nil
	case CreateFileRequestMultipartPurposeAssistants:
		*s = CreateFileRequestMultipartPurposeAssistants
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateFineTuningJobRequest
type CreateFineTuningJobRequest struct {
	// The name of the model to fine-tune. You can select one of the
	// [supported models](/docs/guides/fine-tuning/what-models-can-be-fine-tuned).
	Model string `json:"model"`
	// The ID of an uploaded file that contains training data.
	// See [upload file](/docs/api-reference/files/upload) for how to upload a file.
	// Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the
	// purpose `fine-tune`.
	// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	TrainingFile string `json:"training_file"`
	// The hyperparameters used for the fine-tuning job.
	Hyperparameters OptCreateFineTuningJobRequestHyperparameters `json:"hyperparameters"`
	// A string of up to 18 characters that will be added to your fine-tuned model name.
	// For example, a `suffix` of "custom-model-name" would produce a model name like `ft:gpt-3.
	// 5-turbo:openai:custom-model-name:7p4lURel`.
	Suffix OptNilString `json:"suffix"`
	// The ID of an uploaded file that contains validation data.
	// If you provide this file, the data is used to generate validation
	// metrics periodically during fine-tuning. These metrics can be viewed in
	// the fine-tuning results file.
	// The same data should not be present in both train and validation files.
	// Your dataset must be formatted as a JSONL file. You must upload your file with the purpose
	// `fine-tune`.
	// See the [fine-tuning guide](/docs/guides/fine-tuning) for more details.
	ValidationFile OptNilString `json:"validation_file"`
}

// GetModel returns the value of Model.
func (s *CreateFineTuningJobRequest) GetModel() string {
	return s.Model
}

// GetTrainingFile returns the value of TrainingFile.
func (s *CreateFineTuningJobRequest) GetTrainingFile() string {
	return s.TrainingFile
}

// GetHyperparameters returns the value of Hyperparameters.
func (s *CreateFineTuningJobRequest) GetHyperparameters() OptCreateFineTuningJobRequestHyperparameters {
	return s.Hyperparameters
}

// GetSuffix returns the value of Suffix.
func (s *CreateFineTuningJobRequest) GetSuffix() OptNilString {
	return s.Suffix
}

// GetValidationFile returns the value of ValidationFile.
func (s *CreateFineTuningJobRequest) GetValidationFile() OptNilString {
	return s.ValidationFile
}

// SetModel sets the value of Model.
func (s *CreateFineTuningJobRequest) SetModel(val string) {
	s.Model = val
}

// SetTrainingFile sets the value of TrainingFile.
func (s *CreateFineTuningJobRequest) SetTrainingFile(val string) {
	s.TrainingFile = val
}

// SetHyperparameters sets the value of Hyperparameters.
func (s *CreateFineTuningJobRequest) SetHyperparameters(val OptCreateFineTuningJobRequestHyperparameters) {
	s.Hyperparameters = val
}

// SetSuffix sets the value of Suffix.
func (s *CreateFineTuningJobRequest) SetSuffix(val OptNilString) {
	s.Suffix = val
}

// SetValidationFile sets the value of ValidationFile.
func (s *CreateFineTuningJobRequest) SetValidationFile(val OptNilString) {
	s.ValidationFile = val
}

// The hyperparameters used for the fine-tuning job.
type CreateFineTuningJobRequestHyperparameters struct {
	// Number of examples in each batch. A larger batch size means that model parameters
	// are updated less frequently, but with lower variance.
	BatchSize OptCreateFineTuningJobRequestHyperparametersBatchSize `json:"batch_size"`
	// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
	// overfitting.
	LearningRateMultiplier OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier `json:"learning_rate_multiplier"`
	// The number of epochs to train the model for. An epoch refers to one full cycle
	// through the training dataset.
	NEpochs OptCreateFineTuningJobRequestHyperparametersNEpochs `json:"n_epochs"`
}

// GetBatchSize returns the value of BatchSize.
func (s *CreateFineTuningJobRequestHyperparameters) GetBatchSize() OptCreateFineTuningJobRequestHyperparametersBatchSize {
	return s.BatchSize
}

// GetLearningRateMultiplier returns the value of LearningRateMultiplier.
func (s *CreateFineTuningJobRequestHyperparameters) GetLearningRateMultiplier() OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier {
	return s.LearningRateMultiplier
}

// GetNEpochs returns the value of NEpochs.
func (s *CreateFineTuningJobRequestHyperparameters) GetNEpochs() OptCreateFineTuningJobRequestHyperparametersNEpochs {
	return s.NEpochs
}

// SetBatchSize sets the value of BatchSize.
func (s *CreateFineTuningJobRequestHyperparameters) SetBatchSize(val OptCreateFineTuningJobRequestHyperparametersBatchSize) {
	s.BatchSize = val
}

// SetLearningRateMultiplier sets the value of LearningRateMultiplier.
func (s *CreateFineTuningJobRequestHyperparameters) SetLearningRateMultiplier(val OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier) {
	s.LearningRateMultiplier = val
}

// SetNEpochs sets the value of NEpochs.
func (s *CreateFineTuningJobRequestHyperparameters) SetNEpochs(val OptCreateFineTuningJobRequestHyperparametersNEpochs) {
	s.NEpochs = val
}

// Number of examples in each batch. A larger batch size means that model parameters
// are updated less frequently, but with lower variance.
// CreateFineTuningJobRequestHyperparametersBatchSize represents sum type.
type CreateFineTuningJobRequestHyperparametersBatchSize struct {
	Type                                                CreateFineTuningJobRequestHyperparametersBatchSizeType // switch on this field
	CreateFineTuningJobRequestHyperparametersBatchSize0 CreateFineTuningJobRequestHyperparametersBatchSize0
	Int                                                 int
}

// CreateFineTuningJobRequestHyperparametersBatchSizeType is oneOf type of CreateFineTuningJobRequestHyperparametersBatchSize.
type CreateFineTuningJobRequestHyperparametersBatchSizeType string

// Possible values for CreateFineTuningJobRequestHyperparametersBatchSizeType.
const (
	CreateFineTuningJobRequestHyperparametersBatchSize0CreateFineTuningJobRequestHyperparametersBatchSize CreateFineTuningJobRequestHyperparametersBatchSizeType = "CreateFineTuningJobRequestHyperparametersBatchSize0"
	IntCreateFineTuningJobRequestHyperparametersBatchSize                                                 CreateFineTuningJobRequestHyperparametersBatchSizeType = "int"
)

// IsCreateFineTuningJobRequestHyperparametersBatchSize0 reports whether CreateFineTuningJobRequestHyperparametersBatchSize is CreateFineTuningJobRequestHyperparametersBatchSize0.
func (s CreateFineTuningJobRequestHyperparametersBatchSize) IsCreateFineTuningJobRequestHyperparametersBatchSize0() bool {
	return s.Type == CreateFineTuningJobRequestHyperparametersBatchSize0CreateFineTuningJobRequestHyperparametersBatchSize
}

// IsInt reports whether CreateFineTuningJobRequestHyperparametersBatchSize is int.
func (s CreateFineTuningJobRequestHyperparametersBatchSize) IsInt() bool {
	return s.Type == IntCreateFineTuningJobRequestHyperparametersBatchSize
}

// SetCreateFineTuningJobRequestHyperparametersBatchSize0 sets CreateFineTuningJobRequestHyperparametersBatchSize to CreateFineTuningJobRequestHyperparametersBatchSize0.
func (s *CreateFineTuningJobRequestHyperparametersBatchSize) SetCreateFineTuningJobRequestHyperparametersBatchSize0(v CreateFineTuningJobRequestHyperparametersBatchSize0) {
	s.Type = CreateFineTuningJobRequestHyperparametersBatchSize0CreateFineTuningJobRequestHyperparametersBatchSize
	s.CreateFineTuningJobRequestHyperparametersBatchSize0 = v
}

// GetCreateFineTuningJobRequestHyperparametersBatchSize0 returns CreateFineTuningJobRequestHyperparametersBatchSize0 and true boolean if CreateFineTuningJobRequestHyperparametersBatchSize is CreateFineTuningJobRequestHyperparametersBatchSize0.
func (s CreateFineTuningJobRequestHyperparametersBatchSize) GetCreateFineTuningJobRequestHyperparametersBatchSize0() (v CreateFineTuningJobRequestHyperparametersBatchSize0, ok bool) {
	if !s.IsCreateFineTuningJobRequestHyperparametersBatchSize0() {
		return v, false
	}
	return s.CreateFineTuningJobRequestHyperparametersBatchSize0, true
}

// NewCreateFineTuningJobRequestHyperparametersBatchSize0CreateFineTuningJobRequestHyperparametersBatchSize returns new CreateFineTuningJobRequestHyperparametersBatchSize from CreateFineTuningJobRequestHyperparametersBatchSize0.
func NewCreateFineTuningJobRequestHyperparametersBatchSize0CreateFineTuningJobRequestHyperparametersBatchSize(v CreateFineTuningJobRequestHyperparametersBatchSize0) CreateFineTuningJobRequestHyperparametersBatchSize {
	var s CreateFineTuningJobRequestHyperparametersBatchSize
	s.SetCreateFineTuningJobRequestHyperparametersBatchSize0(v)
	return s
}

// SetInt sets CreateFineTuningJobRequestHyperparametersBatchSize to int.
func (s *CreateFineTuningJobRequestHyperparametersBatchSize) SetInt(v int) {
	s.Type = IntCreateFineTuningJobRequestHyperparametersBatchSize
	s.Int = v
}

// GetInt returns int and true boolean if CreateFineTuningJobRequestHyperparametersBatchSize is int.
func (s CreateFineTuningJobRequestHyperparametersBatchSize) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntCreateFineTuningJobRequestHyperparametersBatchSize returns new CreateFineTuningJobRequestHyperparametersBatchSize from int.
func NewIntCreateFineTuningJobRequestHyperparametersBatchSize(v int) CreateFineTuningJobRequestHyperparametersBatchSize {
	var s CreateFineTuningJobRequestHyperparametersBatchSize
	s.SetInt(v)
	return s
}

type CreateFineTuningJobRequestHyperparametersBatchSize0 string

const (
	CreateFineTuningJobRequestHyperparametersBatchSize0Auto CreateFineTuningJobRequestHyperparametersBatchSize0 = "auto"
)

// AllValues returns all CreateFineTuningJobRequestHyperparametersBatchSize0 values.
func (CreateFineTuningJobRequestHyperparametersBatchSize0) AllValues() []CreateFineTuningJobRequestHyperparametersBatchSize0 {
	return []CreateFineTuningJobRequestHyperparametersBatchSize0{
		CreateFineTuningJobRequestHyperparametersBatchSize0Auto,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateFineTuningJobRequestHyperparametersBatchSize0) MarshalText() ([]byte, error) {
	switch s {
	case CreateFineTuningJobRequestHyperparametersBatchSize0Auto:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateFineTuningJobRequestHyperparametersBatchSize0) UnmarshalText(data []byte) error {
	switch CreateFineTuningJobRequestHyperparametersBatchSize0(data) {
	case CreateFineTuningJobRequestHyperparametersBatchSize0Auto:
		*s = CreateFineTuningJobRequestHyperparametersBatchSize0Auto
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Scaling factor for the learning rate. A smaller learning rate may be useful to avoid
// overfitting.
// CreateFineTuningJobRequestHyperparametersLearningRateMultiplier represents sum type.
type CreateFineTuningJobRequestHyperparametersLearningRateMultiplier struct {
	Type                                                             CreateFineTuningJobRequestHyperparametersLearningRateMultiplierType // switch on this field
	CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0
	Float64                                                          float64
}

// CreateFineTuningJobRequestHyperparametersLearningRateMultiplierType is oneOf type of CreateFineTuningJobRequestHyperparametersLearningRateMultiplier.
type CreateFineTuningJobRequestHyperparametersLearningRateMultiplierType string

// Possible values for CreateFineTuningJobRequestHyperparametersLearningRateMultiplierType.
const (
	CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0CreateFineTuningJobRequestHyperparametersLearningRateMultiplier CreateFineTuningJobRequestHyperparametersLearningRateMultiplierType = "CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0"
	Float64CreateFineTuningJobRequestHyperparametersLearningRateMultiplier                                                          CreateFineTuningJobRequestHyperparametersLearningRateMultiplierType = "float64"
)

// IsCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 reports whether CreateFineTuningJobRequestHyperparametersLearningRateMultiplier is CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0.
func (s CreateFineTuningJobRequestHyperparametersLearningRateMultiplier) IsCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0() bool {
	return s.Type == CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
}

// IsFloat64 reports whether CreateFineTuningJobRequestHyperparametersLearningRateMultiplier is float64.
func (s CreateFineTuningJobRequestHyperparametersLearningRateMultiplier) IsFloat64() bool {
	return s.Type == Float64CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
}

// SetCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 sets CreateFineTuningJobRequestHyperparametersLearningRateMultiplier to CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0.
func (s *CreateFineTuningJobRequestHyperparametersLearningRateMultiplier) SetCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0(v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0) {
	s.Type = CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
	s.CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 = v
}

// GetCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 returns CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 and true boolean if CreateFineTuningJobRequestHyperparametersLearningRateMultiplier is CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0.
func (s CreateFineTuningJobRequestHyperparametersLearningRateMultiplier) GetCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0() (v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0, ok bool) {
	if !s.IsCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0() {
		return v, false
	}
	return s.CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0, true
}

// NewCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0CreateFineTuningJobRequestHyperparametersLearningRateMultiplier returns new CreateFineTuningJobRequestHyperparametersLearningRateMultiplier from CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0.
func NewCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0CreateFineTuningJobRequestHyperparametersLearningRateMultiplier(v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0) CreateFineTuningJobRequestHyperparametersLearningRateMultiplier {
	var s CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
	s.SetCreateFineTuningJobRequestHyperparametersLearningRateMultiplier0(v)
	return s
}

// SetFloat64 sets CreateFineTuningJobRequestHyperparametersLearningRateMultiplier to float64.
func (s *CreateFineTuningJobRequestHyperparametersLearningRateMultiplier) SetFloat64(v float64) {
	s.Type = Float64CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
	s.Float64 = v
}

// GetFloat64 returns float64 and true boolean if CreateFineTuningJobRequestHyperparametersLearningRateMultiplier is float64.
func (s CreateFineTuningJobRequestHyperparametersLearningRateMultiplier) GetFloat64() (v float64, ok bool) {
	if !s.IsFloat64() {
		return v, false
	}
	return s.Float64, true
}

// NewFloat64CreateFineTuningJobRequestHyperparametersLearningRateMultiplier returns new CreateFineTuningJobRequestHyperparametersLearningRateMultiplier from float64.
func NewFloat64CreateFineTuningJobRequestHyperparametersLearningRateMultiplier(v float64) CreateFineTuningJobRequestHyperparametersLearningRateMultiplier {
	var s CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
	s.SetFloat64(v)
	return s
}

type CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 string

const (
	CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0Auto CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 = "auto"
)

// AllValues returns all CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 values.
func (CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0) AllValues() []CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0 {
	return []CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0{
		CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0Auto,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0) MarshalText() ([]byte, error) {
	switch s {
	case CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0Auto:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0) UnmarshalText(data []byte) error {
	switch CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0(data) {
	case CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0Auto:
		*s = CreateFineTuningJobRequestHyperparametersLearningRateMultiplier0Auto
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The number of epochs to train the model for. An epoch refers to one full cycle
// through the training dataset.
// CreateFineTuningJobRequestHyperparametersNEpochs represents sum type.
type CreateFineTuningJobRequestHyperparametersNEpochs struct {
	Type                                              CreateFineTuningJobRequestHyperparametersNEpochsType // switch on this field
	CreateFineTuningJobRequestHyperparametersNEpochs0 CreateFineTuningJobRequestHyperparametersNEpochs0
	Int                                               int
}

// CreateFineTuningJobRequestHyperparametersNEpochsType is oneOf type of CreateFineTuningJobRequestHyperparametersNEpochs.
type CreateFineTuningJobRequestHyperparametersNEpochsType string

// Possible values for CreateFineTuningJobRequestHyperparametersNEpochsType.
const (
	CreateFineTuningJobRequestHyperparametersNEpochs0CreateFineTuningJobRequestHyperparametersNEpochs CreateFineTuningJobRequestHyperparametersNEpochsType = "CreateFineTuningJobRequestHyperparametersNEpochs0"
	IntCreateFineTuningJobRequestHyperparametersNEpochs                                               CreateFineTuningJobRequestHyperparametersNEpochsType = "int"
)

// IsCreateFineTuningJobRequestHyperparametersNEpochs0 reports whether CreateFineTuningJobRequestHyperparametersNEpochs is CreateFineTuningJobRequestHyperparametersNEpochs0.
func (s CreateFineTuningJobRequestHyperparametersNEpochs) IsCreateFineTuningJobRequestHyperparametersNEpochs0() bool {
	return s.Type == CreateFineTuningJobRequestHyperparametersNEpochs0CreateFineTuningJobRequestHyperparametersNEpochs
}

// IsInt reports whether CreateFineTuningJobRequestHyperparametersNEpochs is int.
func (s CreateFineTuningJobRequestHyperparametersNEpochs) IsInt() bool {
	return s.Type == IntCreateFineTuningJobRequestHyperparametersNEpochs
}

// SetCreateFineTuningJobRequestHyperparametersNEpochs0 sets CreateFineTuningJobRequestHyperparametersNEpochs to CreateFineTuningJobRequestHyperparametersNEpochs0.
func (s *CreateFineTuningJobRequestHyperparametersNEpochs) SetCreateFineTuningJobRequestHyperparametersNEpochs0(v CreateFineTuningJobRequestHyperparametersNEpochs0) {
	s.Type = CreateFineTuningJobRequestHyperparametersNEpochs0CreateFineTuningJobRequestHyperparametersNEpochs
	s.CreateFineTuningJobRequestHyperparametersNEpochs0 = v
}

// GetCreateFineTuningJobRequestHyperparametersNEpochs0 returns CreateFineTuningJobRequestHyperparametersNEpochs0 and true boolean if CreateFineTuningJobRequestHyperparametersNEpochs is CreateFineTuningJobRequestHyperparametersNEpochs0.
func (s CreateFineTuningJobRequestHyperparametersNEpochs) GetCreateFineTuningJobRequestHyperparametersNEpochs0() (v CreateFineTuningJobRequestHyperparametersNEpochs0, ok bool) {
	if !s.IsCreateFineTuningJobRequestHyperparametersNEpochs0() {
		return v, false
	}
	return s.CreateFineTuningJobRequestHyperparametersNEpochs0, true
}

// NewCreateFineTuningJobRequestHyperparametersNEpochs0CreateFineTuningJobRequestHyperparametersNEpochs returns new CreateFineTuningJobRequestHyperparametersNEpochs from CreateFineTuningJobRequestHyperparametersNEpochs0.
func NewCreateFineTuningJobRequestHyperparametersNEpochs0CreateFineTuningJobRequestHyperparametersNEpochs(v CreateFineTuningJobRequestHyperparametersNEpochs0) CreateFineTuningJobRequestHyperparametersNEpochs {
	var s CreateFineTuningJobRequestHyperparametersNEpochs
	s.SetCreateFineTuningJobRequestHyperparametersNEpochs0(v)
	return s
}

// SetInt sets CreateFineTuningJobRequestHyperparametersNEpochs to int.
func (s *CreateFineTuningJobRequestHyperparametersNEpochs) SetInt(v int) {
	s.Type = IntCreateFineTuningJobRequestHyperparametersNEpochs
	s.Int = v
}

// GetInt returns int and true boolean if CreateFineTuningJobRequestHyperparametersNEpochs is int.
func (s CreateFineTuningJobRequestHyperparametersNEpochs) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntCreateFineTuningJobRequestHyperparametersNEpochs returns new CreateFineTuningJobRequestHyperparametersNEpochs from int.
func NewIntCreateFineTuningJobRequestHyperparametersNEpochs(v int) CreateFineTuningJobRequestHyperparametersNEpochs {
	var s CreateFineTuningJobRequestHyperparametersNEpochs
	s.SetInt(v)
	return s
}

type CreateFineTuningJobRequestHyperparametersNEpochs0 string

const (
	CreateFineTuningJobRequestHyperparametersNEpochs0Auto CreateFineTuningJobRequestHyperparametersNEpochs0 = "auto"
)

// AllValues returns all CreateFineTuningJobRequestHyperparametersNEpochs0 values.
func (CreateFineTuningJobRequestHyperparametersNEpochs0) AllValues() []CreateFineTuningJobRequestHyperparametersNEpochs0 {
	return []CreateFineTuningJobRequestHyperparametersNEpochs0{
		CreateFineTuningJobRequestHyperparametersNEpochs0Auto,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateFineTuningJobRequestHyperparametersNEpochs0) MarshalText() ([]byte, error) {
	switch s {
	case CreateFineTuningJobRequestHyperparametersNEpochs0Auto:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateFineTuningJobRequestHyperparametersNEpochs0) UnmarshalText(data []byte) error {
	switch CreateFineTuningJobRequestHyperparametersNEpochs0(data) {
	case CreateFineTuningJobRequestHyperparametersNEpochs0Auto:
		*s = CreateFineTuningJobRequestHyperparametersNEpochs0Auto
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateImageEditRequest
type CreateImageEditRequestMultipart struct {
	// The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided,
	// image must have transparency, which will be used as the mask.
	Image ht.MultipartFile `json:"image"`
	// A text description of the desired image(s). The maximum length is 1000 characters.
	Prompt string `json:"prompt"`
	// An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where
	// `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as
	// `image`.
	Mask OptMultipartFile `json:"mask"`
	// The model to use for image generation. Only `dall-e-2` is supported at this time.
	Model OptNilString `json:"model"`
	// The number of images to generate. Must be between 1 and 10.
	N OptNilInt `json:"n"`
	// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
	Size OptNilCreateImageEditRequestMultipartSize `json:"size"`
	// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs
	// are only valid for 60 minutes after the image has been generated.
	ResponseFormat OptNilCreateImageEditRequestMultipartResponseFormat `json:"response_format"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
	// [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User OptString `json:"user"`
}

// GetImage returns the value of Image.
func (s *CreateImageEditRequestMultipart) GetImage() ht.MultipartFile {
	return s.Image
}

// GetPrompt returns the value of Prompt.
func (s *CreateImageEditRequestMultipart) GetPrompt() string {
	return s.Prompt
}

// GetMask returns the value of Mask.
func (s *CreateImageEditRequestMultipart) GetMask() OptMultipartFile {
	return s.Mask
}

// GetModel returns the value of Model.
func (s *CreateImageEditRequestMultipart) GetModel() OptNilString {
	return s.Model
}

// GetN returns the value of N.
func (s *CreateImageEditRequestMultipart) GetN() OptNilInt {
	return s.N
}

// GetSize returns the value of Size.
func (s *CreateImageEditRequestMultipart) GetSize() OptNilCreateImageEditRequestMultipartSize {
	return s.Size
}

// GetResponseFormat returns the value of ResponseFormat.
func (s *CreateImageEditRequestMultipart) GetResponseFormat() OptNilCreateImageEditRequestMultipartResponseFormat {
	return s.ResponseFormat
}

// GetUser returns the value of User.
func (s *CreateImageEditRequestMultipart) GetUser() OptString {
	return s.User
}

// SetImage sets the value of Image.
func (s *CreateImageEditRequestMultipart) SetImage(val ht.MultipartFile) {
	s.Image = val
}

// SetPrompt sets the value of Prompt.
func (s *CreateImageEditRequestMultipart) SetPrompt(val string) {
	s.Prompt = val
}

// SetMask sets the value of Mask.
func (s *CreateImageEditRequestMultipart) SetMask(val OptMultipartFile) {
	s.Mask = val
}

// SetModel sets the value of Model.
func (s *CreateImageEditRequestMultipart) SetModel(val OptNilString) {
	s.Model = val
}

// SetN sets the value of N.
func (s *CreateImageEditRequestMultipart) SetN(val OptNilInt) {
	s.N = val
}

// SetSize sets the value of Size.
func (s *CreateImageEditRequestMultipart) SetSize(val OptNilCreateImageEditRequestMultipartSize) {
	s.Size = val
}

// SetResponseFormat sets the value of ResponseFormat.
func (s *CreateImageEditRequestMultipart) SetResponseFormat(val OptNilCreateImageEditRequestMultipartResponseFormat) {
	s.ResponseFormat = val
}

// SetUser sets the value of User.
func (s *CreateImageEditRequestMultipart) SetUser(val OptString) {
	s.User = val
}

// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs
// are only valid for 60 minutes after the image has been generated.
type CreateImageEditRequestMultipartResponseFormat string

const (
	CreateImageEditRequestMultipartResponseFormatURL     CreateImageEditRequestMultipartResponseFormat = "url"
	CreateImageEditRequestMultipartResponseFormatB64JSON CreateImageEditRequestMultipartResponseFormat = "b64_json"
)

// AllValues returns all CreateImageEditRequestMultipartResponseFormat values.
func (CreateImageEditRequestMultipartResponseFormat) AllValues() []CreateImageEditRequestMultipartResponseFormat {
	return []CreateImageEditRequestMultipartResponseFormat{
		CreateImageEditRequestMultipartResponseFormatURL,
		CreateImageEditRequestMultipartResponseFormatB64JSON,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageEditRequestMultipartResponseFormat) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageEditRequestMultipartResponseFormatURL:
		return []byte(s), nil
	case CreateImageEditRequestMultipartResponseFormatB64JSON:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageEditRequestMultipartResponseFormat) UnmarshalText(data []byte) error {
	switch CreateImageEditRequestMultipartResponseFormat(data) {
	case CreateImageEditRequestMultipartResponseFormatURL:
		*s = CreateImageEditRequestMultipartResponseFormatURL
		return nil
	case CreateImageEditRequestMultipartResponseFormatB64JSON:
		*s = CreateImageEditRequestMultipartResponseFormatB64JSON
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
type CreateImageEditRequestMultipartSize string

const (
	CreateImageEditRequestMultipartSize256x256   CreateImageEditRequestMultipartSize = "256x256"
	CreateImageEditRequestMultipartSize512x512   CreateImageEditRequestMultipartSize = "512x512"
	CreateImageEditRequestMultipartSize1024x1024 CreateImageEditRequestMultipartSize = "1024x1024"
)

// AllValues returns all CreateImageEditRequestMultipartSize values.
func (CreateImageEditRequestMultipartSize) AllValues() []CreateImageEditRequestMultipartSize {
	return []CreateImageEditRequestMultipartSize{
		CreateImageEditRequestMultipartSize256x256,
		CreateImageEditRequestMultipartSize512x512,
		CreateImageEditRequestMultipartSize1024x1024,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageEditRequestMultipartSize) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageEditRequestMultipartSize256x256:
		return []byte(s), nil
	case CreateImageEditRequestMultipartSize512x512:
		return []byte(s), nil
	case CreateImageEditRequestMultipartSize1024x1024:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageEditRequestMultipartSize) UnmarshalText(data []byte) error {
	switch CreateImageEditRequestMultipartSize(data) {
	case CreateImageEditRequestMultipartSize256x256:
		*s = CreateImageEditRequestMultipartSize256x256
		return nil
	case CreateImageEditRequestMultipartSize512x512:
		*s = CreateImageEditRequestMultipartSize512x512
		return nil
	case CreateImageEditRequestMultipartSize1024x1024:
		*s = CreateImageEditRequestMultipartSize1024x1024
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateImageRequest
type CreateImageRequest struct {
	// A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2`
	// and 4000 characters for `dall-e-3`.
	Prompt string `json:"prompt"`
	// The model to use for image generation.
	Model OptNilString `json:"model"`
	// The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is
	// supported.
	N OptNilInt `json:"n"`
	// The quality of the image that will be generated. `hd` creates images with finer details and
	// greater consistency across the image. This param is only supported for `dall-e-3`.
	Quality OptCreateImageRequestQuality `json:"quality"`
	// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs
	// are only valid for 60 minutes after the image has been generated.
	ResponseFormat OptNilCreateImageRequestResponseFormat `json:"response_format"`
	// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for
	// `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
	Size OptNilCreateImageRequestSize `json:"size"`
	// The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to
	// lean towards generating hyper-real and dramatic images. Natural causes the model to produce more
	// natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
	Style OptNilCreateImageRequestStyle `json:"style"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
	// [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User OptString `json:"user"`
}

// GetPrompt returns the value of Prompt.
func (s *CreateImageRequest) GetPrompt() string {
	return s.Prompt
}

// GetModel returns the value of Model.
func (s *CreateImageRequest) GetModel() OptNilString {
	return s.Model
}

// GetN returns the value of N.
func (s *CreateImageRequest) GetN() OptNilInt {
	return s.N
}

// GetQuality returns the value of Quality.
func (s *CreateImageRequest) GetQuality() OptCreateImageRequestQuality {
	return s.Quality
}

// GetResponseFormat returns the value of ResponseFormat.
func (s *CreateImageRequest) GetResponseFormat() OptNilCreateImageRequestResponseFormat {
	return s.ResponseFormat
}

// GetSize returns the value of Size.
func (s *CreateImageRequest) GetSize() OptNilCreateImageRequestSize {
	return s.Size
}

// GetStyle returns the value of Style.
func (s *CreateImageRequest) GetStyle() OptNilCreateImageRequestStyle {
	return s.Style
}

// GetUser returns the value of User.
func (s *CreateImageRequest) GetUser() OptString {
	return s.User
}

// SetPrompt sets the value of Prompt.
func (s *CreateImageRequest) SetPrompt(val string) {
	s.Prompt = val
}

// SetModel sets the value of Model.
func (s *CreateImageRequest) SetModel(val OptNilString) {
	s.Model = val
}

// SetN sets the value of N.
func (s *CreateImageRequest) SetN(val OptNilInt) {
	s.N = val
}

// SetQuality sets the value of Quality.
func (s *CreateImageRequest) SetQuality(val OptCreateImageRequestQuality) {
	s.Quality = val
}

// SetResponseFormat sets the value of ResponseFormat.
func (s *CreateImageRequest) SetResponseFormat(val OptNilCreateImageRequestResponseFormat) {
	s.ResponseFormat = val
}

// SetSize sets the value of Size.
func (s *CreateImageRequest) SetSize(val OptNilCreateImageRequestSize) {
	s.Size = val
}

// SetStyle sets the value of Style.
func (s *CreateImageRequest) SetStyle(val OptNilCreateImageRequestStyle) {
	s.Style = val
}

// SetUser sets the value of User.
func (s *CreateImageRequest) SetUser(val OptString) {
	s.User = val
}

// The quality of the image that will be generated. `hd` creates images with finer details and
// greater consistency across the image. This param is only supported for `dall-e-3`.
type CreateImageRequestQuality string

const (
	CreateImageRequestQualityStandard CreateImageRequestQuality = "standard"
	CreateImageRequestQualityHd       CreateImageRequestQuality = "hd"
)

// AllValues returns all CreateImageRequestQuality values.
func (CreateImageRequestQuality) AllValues() []CreateImageRequestQuality {
	return []CreateImageRequestQuality{
		CreateImageRequestQualityStandard,
		CreateImageRequestQualityHd,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageRequestQuality) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageRequestQualityStandard:
		return []byte(s), nil
	case CreateImageRequestQualityHd:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageRequestQuality) UnmarshalText(data []byte) error {
	switch CreateImageRequestQuality(data) {
	case CreateImageRequestQualityStandard:
		*s = CreateImageRequestQualityStandard
		return nil
	case CreateImageRequestQualityHd:
		*s = CreateImageRequestQualityHd
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs
// are only valid for 60 minutes after the image has been generated.
type CreateImageRequestResponseFormat string

const (
	CreateImageRequestResponseFormatURL     CreateImageRequestResponseFormat = "url"
	CreateImageRequestResponseFormatB64JSON CreateImageRequestResponseFormat = "b64_json"
)

// AllValues returns all CreateImageRequestResponseFormat values.
func (CreateImageRequestResponseFormat) AllValues() []CreateImageRequestResponseFormat {
	return []CreateImageRequestResponseFormat{
		CreateImageRequestResponseFormatURL,
		CreateImageRequestResponseFormatB64JSON,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageRequestResponseFormat) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageRequestResponseFormatURL:
		return []byte(s), nil
	case CreateImageRequestResponseFormatB64JSON:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageRequestResponseFormat) UnmarshalText(data []byte) error {
	switch CreateImageRequestResponseFormat(data) {
	case CreateImageRequestResponseFormatURL:
		*s = CreateImageRequestResponseFormatURL
		return nil
	case CreateImageRequestResponseFormatB64JSON:
		*s = CreateImageRequestResponseFormatB64JSON
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for
// `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
type CreateImageRequestSize string

const (
	CreateImageRequestSize256x256   CreateImageRequestSize = "256x256"
	CreateImageRequestSize512x512   CreateImageRequestSize = "512x512"
	CreateImageRequestSize1024x1024 CreateImageRequestSize = "1024x1024"
	CreateImageRequestSize1792x1024 CreateImageRequestSize = "1792x1024"
	CreateImageRequestSize1024x1792 CreateImageRequestSize = "1024x1792"
)

// AllValues returns all CreateImageRequestSize values.
func (CreateImageRequestSize) AllValues() []CreateImageRequestSize {
	return []CreateImageRequestSize{
		CreateImageRequestSize256x256,
		CreateImageRequestSize512x512,
		CreateImageRequestSize1024x1024,
		CreateImageRequestSize1792x1024,
		CreateImageRequestSize1024x1792,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageRequestSize) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageRequestSize256x256:
		return []byte(s), nil
	case CreateImageRequestSize512x512:
		return []byte(s), nil
	case CreateImageRequestSize1024x1024:
		return []byte(s), nil
	case CreateImageRequestSize1792x1024:
		return []byte(s), nil
	case CreateImageRequestSize1024x1792:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageRequestSize) UnmarshalText(data []byte) error {
	switch CreateImageRequestSize(data) {
	case CreateImageRequestSize256x256:
		*s = CreateImageRequestSize256x256
		return nil
	case CreateImageRequestSize512x512:
		*s = CreateImageRequestSize512x512
		return nil
	case CreateImageRequestSize1024x1024:
		*s = CreateImageRequestSize1024x1024
		return nil
	case CreateImageRequestSize1792x1024:
		*s = CreateImageRequestSize1792x1024
		return nil
	case CreateImageRequestSize1024x1792:
		*s = CreateImageRequestSize1024x1792
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to
// lean towards generating hyper-real and dramatic images. Natural causes the model to produce more
// natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
type CreateImageRequestStyle string

const (
	CreateImageRequestStyleVivid   CreateImageRequestStyle = "vivid"
	CreateImageRequestStyleNatural CreateImageRequestStyle = "natural"
)

// AllValues returns all CreateImageRequestStyle values.
func (CreateImageRequestStyle) AllValues() []CreateImageRequestStyle {
	return []CreateImageRequestStyle{
		CreateImageRequestStyleVivid,
		CreateImageRequestStyleNatural,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageRequestStyle) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageRequestStyleVivid:
		return []byte(s), nil
	case CreateImageRequestStyleNatural:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageRequestStyle) UnmarshalText(data []byte) error {
	switch CreateImageRequestStyle(data) {
	case CreateImageRequestStyleVivid:
		*s = CreateImageRequestStyleVivid
		return nil
	case CreateImageRequestStyleNatural:
		*s = CreateImageRequestStyleNatural
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateImageVariationRequest
type CreateImageVariationRequestMultipart struct {
	// The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and
	// square.
	Image ht.MultipartFile `json:"image"`
	// The model to use for image generation. Only `dall-e-2` is supported at this time.
	Model OptNilString `json:"model"`
	// The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is
	// supported.
	N OptNilInt `json:"n"`
	// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs
	// are only valid for 60 minutes after the image has been generated.
	ResponseFormat OptNilCreateImageVariationRequestMultipartResponseFormat `json:"response_format"`
	// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
	Size OptNilCreateImageVariationRequestMultipartSize `json:"size"`
	// A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse.
	// [Learn more](/docs/guides/safety-best-practices/end-user-ids).
	User OptString `json:"user"`
}

// GetImage returns the value of Image.
func (s *CreateImageVariationRequestMultipart) GetImage() ht.MultipartFile {
	return s.Image
}

// GetModel returns the value of Model.
func (s *CreateImageVariationRequestMultipart) GetModel() OptNilString {
	return s.Model
}

// GetN returns the value of N.
func (s *CreateImageVariationRequestMultipart) GetN() OptNilInt {
	return s.N
}

// GetResponseFormat returns the value of ResponseFormat.
func (s *CreateImageVariationRequestMultipart) GetResponseFormat() OptNilCreateImageVariationRequestMultipartResponseFormat {
	return s.ResponseFormat
}

// GetSize returns the value of Size.
func (s *CreateImageVariationRequestMultipart) GetSize() OptNilCreateImageVariationRequestMultipartSize {
	return s.Size
}

// GetUser returns the value of User.
func (s *CreateImageVariationRequestMultipart) GetUser() OptString {
	return s.User
}

// SetImage sets the value of Image.
func (s *CreateImageVariationRequestMultipart) SetImage(val ht.MultipartFile) {
	s.Image = val
}

// SetModel sets the value of Model.
func (s *CreateImageVariationRequestMultipart) SetModel(val OptNilString) {
	s.Model = val
}

// SetN sets the value of N.
func (s *CreateImageVariationRequestMultipart) SetN(val OptNilInt) {
	s.N = val
}

// SetResponseFormat sets the value of ResponseFormat.
func (s *CreateImageVariationRequestMultipart) SetResponseFormat(val OptNilCreateImageVariationRequestMultipartResponseFormat) {
	s.ResponseFormat = val
}

// SetSize sets the value of Size.
func (s *CreateImageVariationRequestMultipart) SetSize(val OptNilCreateImageVariationRequestMultipartSize) {
	s.Size = val
}

// SetUser sets the value of User.
func (s *CreateImageVariationRequestMultipart) SetUser(val OptString) {
	s.User = val
}

// The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs
// are only valid for 60 minutes after the image has been generated.
type CreateImageVariationRequestMultipartResponseFormat string

const (
	CreateImageVariationRequestMultipartResponseFormatURL     CreateImageVariationRequestMultipartResponseFormat = "url"
	CreateImageVariationRequestMultipartResponseFormatB64JSON CreateImageVariationRequestMultipartResponseFormat = "b64_json"
)

// AllValues returns all CreateImageVariationRequestMultipartResponseFormat values.
func (CreateImageVariationRequestMultipartResponseFormat) AllValues() []CreateImageVariationRequestMultipartResponseFormat {
	return []CreateImageVariationRequestMultipartResponseFormat{
		CreateImageVariationRequestMultipartResponseFormatURL,
		CreateImageVariationRequestMultipartResponseFormatB64JSON,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageVariationRequestMultipartResponseFormat) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageVariationRequestMultipartResponseFormatURL:
		return []byte(s), nil
	case CreateImageVariationRequestMultipartResponseFormatB64JSON:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageVariationRequestMultipartResponseFormat) UnmarshalText(data []byte) error {
	switch CreateImageVariationRequestMultipartResponseFormat(data) {
	case CreateImageVariationRequestMultipartResponseFormatURL:
		*s = CreateImageVariationRequestMultipartResponseFormatURL
		return nil
	case CreateImageVariationRequestMultipartResponseFormatB64JSON:
		*s = CreateImageVariationRequestMultipartResponseFormatB64JSON
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
type CreateImageVariationRequestMultipartSize string

const (
	CreateImageVariationRequestMultipartSize256x256   CreateImageVariationRequestMultipartSize = "256x256"
	CreateImageVariationRequestMultipartSize512x512   CreateImageVariationRequestMultipartSize = "512x512"
	CreateImageVariationRequestMultipartSize1024x1024 CreateImageVariationRequestMultipartSize = "1024x1024"
)

// AllValues returns all CreateImageVariationRequestMultipartSize values.
func (CreateImageVariationRequestMultipartSize) AllValues() []CreateImageVariationRequestMultipartSize {
	return []CreateImageVariationRequestMultipartSize{
		CreateImageVariationRequestMultipartSize256x256,
		CreateImageVariationRequestMultipartSize512x512,
		CreateImageVariationRequestMultipartSize1024x1024,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateImageVariationRequestMultipartSize) MarshalText() ([]byte, error) {
	switch s {
	case CreateImageVariationRequestMultipartSize256x256:
		return []byte(s), nil
	case CreateImageVariationRequestMultipartSize512x512:
		return []byte(s), nil
	case CreateImageVariationRequestMultipartSize1024x1024:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateImageVariationRequestMultipartSize) UnmarshalText(data []byte) error {
	switch CreateImageVariationRequestMultipartSize(data) {
	case CreateImageVariationRequestMultipartSize256x256:
		*s = CreateImageVariationRequestMultipartSize256x256
		return nil
	case CreateImageVariationRequestMultipartSize512x512:
		*s = CreateImageVariationRequestMultipartSize512x512
		return nil
	case CreateImageVariationRequestMultipartSize1024x1024:
		*s = CreateImageVariationRequestMultipartSize1024x1024
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateMessageRequest
type CreateMessageRequest struct {
	// The role of the entity that is creating the message. Currently only `user` is supported.
	Role CreateMessageRequestRole `json:"role"`
	// The content of the message.
	Content string `json:"content"`
	// A list of [File](/docs/api-reference/files) IDs that the message should use. There can be a
	// maximum of 10 files attached to a message. Useful for tools like `retrieval` and
	// `code_interpreter` that can access and use files.
	FileIds []string `json:"file_ids"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata OptCreateMessageRequestMetadata `json:"metadata"`
}

// GetRole returns the value of Role.
func (s *CreateMessageRequest) GetRole() CreateMessageRequestRole {
	return s.Role
}

// GetContent returns the value of Content.
func (s *CreateMessageRequest) GetContent() string {
	return s.Content
}

// GetFileIds returns the value of FileIds.
func (s *CreateMessageRequest) GetFileIds() []string {
	return s.FileIds
}

// GetMetadata returns the value of Metadata.
func (s *CreateMessageRequest) GetMetadata() OptCreateMessageRequestMetadata {
	return s.Metadata
}

// SetRole sets the value of Role.
func (s *CreateMessageRequest) SetRole(val CreateMessageRequestRole) {
	s.Role = val
}

// SetContent sets the value of Content.
func (s *CreateMessageRequest) SetContent(val string) {
	s.Content = val
}

// SetFileIds sets the value of FileIds.
func (s *CreateMessageRequest) SetFileIds(val []string) {
	s.FileIds = val
}

// SetMetadata sets the value of Metadata.
func (s *CreateMessageRequest) SetMetadata(val OptCreateMessageRequestMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type CreateMessageRequestMetadata struct{}

// The role of the entity that is creating the message. Currently only `user` is supported.
type CreateMessageRequestRole string

const (
	CreateMessageRequestRoleUser CreateMessageRequestRole = "user"
)

// AllValues returns all CreateMessageRequestRole values.
func (CreateMessageRequestRole) AllValues() []CreateMessageRequestRole {
	return []CreateMessageRequestRole{
		CreateMessageRequestRoleUser,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateMessageRequestRole) MarshalText() ([]byte, error) {
	switch s {
	case CreateMessageRequestRoleUser:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateMessageRequestRole) UnmarshalText(data []byte) error {
	switch CreateMessageRequestRole(data) {
	case CreateMessageRequestRoleUser:
		*s = CreateMessageRequestRoleUser
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateModerationRequest
type CreateModerationRequest struct {
	// The input text to classify.
	Input CreateModerationRequestInput `json:"input"`
	// Two content moderations models are available: `text-moderation-stable` and
	// `text-moderation-latest`.
	// The default is `text-moderation-latest` which will be automatically upgraded over time. This
	// ensures you are always using our most accurate model. If you use `text-moderation-stable`, we will
	// provide advanced notice before updating the model. Accuracy of `text-moderation-stable` may be
	// slightly lower than for `text-moderation-latest`.
	Model OptString `json:"model"`
}

// GetInput returns the value of Input.
func (s *CreateModerationRequest) GetInput() CreateModerationRequestInput {
	return s.Input
}

// GetModel returns the value of Model.
func (s *CreateModerationRequest) GetModel() OptString {
	return s.Model
}

// SetInput sets the value of Input.
func (s *CreateModerationRequest) SetInput(val CreateModerationRequestInput) {
	s.Input = val
}

// SetModel sets the value of Model.
func (s *CreateModerationRequest) SetModel(val OptString) {
	s.Model = val
}

// The input text to classify.
// CreateModerationRequestInput represents sum type.
type CreateModerationRequestInput struct {
	Type        CreateModerationRequestInputType // switch on this field
	String      string
	StringArray []string
}

// CreateModerationRequestInputType is oneOf type of CreateModerationRequestInput.
type CreateModerationRequestInputType string

// Possible values for CreateModerationRequestInputType.
const (
	StringCreateModerationRequestInput      CreateModerationRequestInputType = "string"
	StringArrayCreateModerationRequestInput CreateModerationRequestInputType = "[]string"
)

// IsString reports whether CreateModerationRequestInput is string.
func (s CreateModerationRequestInput) IsString() bool {
	return s.Type == StringCreateModerationRequestInput
}

// IsStringArray reports whether CreateModerationRequestInput is []string.
func (s CreateModerationRequestInput) IsStringArray() bool {
	return s.Type == StringArrayCreateModerationRequestInput
}

// SetString sets CreateModerationRequestInput to string.
func (s *CreateModerationRequestInput) SetString(v string) {
	s.Type = StringCreateModerationRequestInput
	s.String = v
}

// GetString returns string and true boolean if CreateModerationRequestInput is string.
func (s CreateModerationRequestInput) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringCreateModerationRequestInput returns new CreateModerationRequestInput from string.
func NewStringCreateModerationRequestInput(v string) CreateModerationRequestInput {
	var s CreateModerationRequestInput
	s.SetString(v)
	return s
}

// SetStringArray sets CreateModerationRequestInput to []string.
func (s *CreateModerationRequestInput) SetStringArray(v []string) {
	s.Type = StringArrayCreateModerationRequestInput
	s.StringArray = v
}

// GetStringArray returns []string and true boolean if CreateModerationRequestInput is []string.
func (s CreateModerationRequestInput) GetStringArray() (v []string, ok bool) {
	if !s.IsStringArray() {
		return v, false
	}
	return s.StringArray, true
}

// NewStringArrayCreateModerationRequestInput returns new CreateModerationRequestInput from []string.
func NewStringArrayCreateModerationRequestInput(v []string) CreateModerationRequestInput {
	var s CreateModerationRequestInput
	s.SetStringArray(v)
	return s
}

// Represents if a given text input is potentially harmful.
// Ref: #/components/schemas/CreateModerationResponse
type CreateModerationResponse struct {
	// The unique identifier for the moderation request.
	ID string `json:"id"`
	// The model used to generate the moderation results.
	Model string `json:"model"`
	// A list of moderation objects.
	Results []CreateModerationResponseResultsItem `json:"results"`
}

// GetID returns the value of ID.
func (s *CreateModerationResponse) GetID() string {
	return s.ID
}

// GetModel returns the value of Model.
func (s *CreateModerationResponse) GetModel() string {
	return s.Model
}

// GetResults returns the value of Results.
func (s *CreateModerationResponse) GetResults() []CreateModerationResponseResultsItem {
	return s.Results
}

// SetID sets the value of ID.
func (s *CreateModerationResponse) SetID(val string) {
	s.ID = val
}

// SetModel sets the value of Model.
func (s *CreateModerationResponse) SetModel(val string) {
	s.Model = val
}

// SetResults sets the value of Results.
func (s *CreateModerationResponse) SetResults(val []CreateModerationResponseResultsItem) {
	s.Results = val
}

type CreateModerationResponseResultsItem struct {
	// Whether any of the below categories are flagged.
	Flagged bool `json:"flagged"`
	// A list of the categories, and whether they are flagged or not.
	Categories CreateModerationResponseResultsItemCategories `json:"categories"`
	// A list of the categories along with their scores as predicted by model.
	CategoryScores CreateModerationResponseResultsItemCategoryScores `json:"category_scores"`
}

// GetFlagged returns the value of Flagged.
func (s *CreateModerationResponseResultsItem) GetFlagged() bool {
	return s.Flagged
}

// GetCategories returns the value of Categories.
func (s *CreateModerationResponseResultsItem) GetCategories() CreateModerationResponseResultsItemCategories {
	return s.Categories
}

// GetCategoryScores returns the value of CategoryScores.
func (s *CreateModerationResponseResultsItem) GetCategoryScores() CreateModerationResponseResultsItemCategoryScores {
	return s.CategoryScores
}

// SetFlagged sets the value of Flagged.
func (s *CreateModerationResponseResultsItem) SetFlagged(val bool) {
	s.Flagged = val
}

// SetCategories sets the value of Categories.
func (s *CreateModerationResponseResultsItem) SetCategories(val CreateModerationResponseResultsItemCategories) {
	s.Categories = val
}

// SetCategoryScores sets the value of CategoryScores.
func (s *CreateModerationResponseResultsItem) SetCategoryScores(val CreateModerationResponseResultsItemCategoryScores) {
	s.CategoryScores = val
}

// A list of the categories, and whether they are flagged or not.
type CreateModerationResponseResultsItemCategories struct {
	// Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion,
	// nationality, sexual orientation, disability status, or caste. Hateful content aimed at
	// non-protected groups (e.g., chess players) is harassment.
	Hate bool `json:"hate"`
	// Hateful content that also includes violence or serious harm towards the targeted group based on
	// race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
	HateSlashThreatening bool `json:"hate/threatening"`
	// Content that expresses, incites, or promotes harassing language towards any target.
	Harassment bool `json:"harassment"`
	// Harassment content that also includes violence or serious harm towards any target.
	HarassmentSlashThreatening bool `json:"harassment/threatening"`
	// Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and
	// eating disorders.
	SelfMinusHarm bool `json:"self-harm"`
	// Content where the speaker expresses that they are engaging or intend to engage in acts of
	// self-harm, such as suicide, cutting, and eating disorders.
	SelfMinusHarmSlashIntent bool `json:"self-harm/intent"`
	// Content that encourages performing acts of self-harm, such as suicide, cutting, and eating
	// disorders, or that gives instructions or advice on how to commit such acts.
	SelfMinusHarmSlashInstructions bool `json:"self-harm/instructions"`
	// Content meant to arouse sexual excitement, such as the description of sexual activity, or that
	// promotes sexual services (excluding sex education and wellness).
	Sexual bool `json:"sexual"`
	// Sexual content that includes an individual who is under 18 years old.
	SexualSlashMinors bool `json:"sexual/minors"`
	// Content that depicts death, violence, or physical injury.
	Violence bool `json:"violence"`
	// Content that depicts death, violence, or physical injury in graphic detail.
	ViolenceSlashGraphic bool `json:"violence/graphic"`
}

// GetHate returns the value of Hate.
func (s *CreateModerationResponseResultsItemCategories) GetHate() bool {
	return s.Hate
}

// GetHateSlashThreatening returns the value of HateSlashThreatening.
func (s *CreateModerationResponseResultsItemCategories) GetHateSlashThreatening() bool {
	return s.HateSlashThreatening
}

// GetHarassment returns the value of Harassment.
func (s *CreateModerationResponseResultsItemCategories) GetHarassment() bool {
	return s.Harassment
}

// GetHarassmentSlashThreatening returns the value of HarassmentSlashThreatening.
func (s *CreateModerationResponseResultsItemCategories) GetHarassmentSlashThreatening() bool {
	return s.HarassmentSlashThreatening
}

// GetSelfMinusHarm returns the value of SelfMinusHarm.
func (s *CreateModerationResponseResultsItemCategories) GetSelfMinusHarm() bool {
	return s.SelfMinusHarm
}

// GetSelfMinusHarmSlashIntent returns the value of SelfMinusHarmSlashIntent.
func (s *CreateModerationResponseResultsItemCategories) GetSelfMinusHarmSlashIntent() bool {
	return s.SelfMinusHarmSlashIntent
}

// GetSelfMinusHarmSlashInstructions returns the value of SelfMinusHarmSlashInstructions.
func (s *CreateModerationResponseResultsItemCategories) GetSelfMinusHarmSlashInstructions() bool {
	return s.SelfMinusHarmSlashInstructions
}

// GetSexual returns the value of Sexual.
func (s *CreateModerationResponseResultsItemCategories) GetSexual() bool {
	return s.Sexual
}

// GetSexualSlashMinors returns the value of SexualSlashMinors.
func (s *CreateModerationResponseResultsItemCategories) GetSexualSlashMinors() bool {
	return s.SexualSlashMinors
}

// GetViolence returns the value of Violence.
func (s *CreateModerationResponseResultsItemCategories) GetViolence() bool {
	return s.Violence
}

// GetViolenceSlashGraphic returns the value of ViolenceSlashGraphic.
func (s *CreateModerationResponseResultsItemCategories) GetViolenceSlashGraphic() bool {
	return s.ViolenceSlashGraphic
}

// SetHate sets the value of Hate.
func (s *CreateModerationResponseResultsItemCategories) SetHate(val bool) {
	s.Hate = val
}

// SetHateSlashThreatening sets the value of HateSlashThreatening.
func (s *CreateModerationResponseResultsItemCategories) SetHateSlashThreatening(val bool) {
	s.HateSlashThreatening = val
}

// SetHarassment sets the value of Harassment.
func (s *CreateModerationResponseResultsItemCategories) SetHarassment(val bool) {
	s.Harassment = val
}

// SetHarassmentSlashThreatening sets the value of HarassmentSlashThreatening.
func (s *CreateModerationResponseResultsItemCategories) SetHarassmentSlashThreatening(val bool) {
	s.HarassmentSlashThreatening = val
}

// SetSelfMinusHarm sets the value of SelfMinusHarm.
func (s *CreateModerationResponseResultsItemCategories) SetSelfMinusHarm(val bool) {
	s.SelfMinusHarm = val
}

// SetSelfMinusHarmSlashIntent sets the value of SelfMinusHarmSlashIntent.
func (s *CreateModerationResponseResultsItemCategories) SetSelfMinusHarmSlashIntent(val bool) {
	s.SelfMinusHarmSlashIntent = val
}

// SetSelfMinusHarmSlashInstructions sets the value of SelfMinusHarmSlashInstructions.
func (s *CreateModerationResponseResultsItemCategories) SetSelfMinusHarmSlashInstructions(val bool) {
	s.SelfMinusHarmSlashInstructions = val
}

// SetSexual sets the value of Sexual.
func (s *CreateModerationResponseResultsItemCategories) SetSexual(val bool) {
	s.Sexual = val
}

// SetSexualSlashMinors sets the value of SexualSlashMinors.
func (s *CreateModerationResponseResultsItemCategories) SetSexualSlashMinors(val bool) {
	s.SexualSlashMinors = val
}

// SetViolence sets the value of Violence.
func (s *CreateModerationResponseResultsItemCategories) SetViolence(val bool) {
	s.Violence = val
}

// SetViolenceSlashGraphic sets the value of ViolenceSlashGraphic.
func (s *CreateModerationResponseResultsItemCategories) SetViolenceSlashGraphic(val bool) {
	s.ViolenceSlashGraphic = val
}

// A list of the categories along with their scores as predicted by model.
type CreateModerationResponseResultsItemCategoryScores struct {
	// The score for the category 'hate'.
	Hate float64 `json:"hate"`
	// The score for the category 'hate/threatening'.
	HateSlashThreatening float64 `json:"hate/threatening"`
	// The score for the category 'harassment'.
	Harassment float64 `json:"harassment"`
	// The score for the category 'harassment/threatening'.
	HarassmentSlashThreatening float64 `json:"harassment/threatening"`
	// The score for the category 'self-harm'.
	SelfMinusHarm float64 `json:"self-harm"`
	// The score for the category 'self-harm/intent'.
	SelfMinusHarmSlashIntent float64 `json:"self-harm/intent"`
	// The score for the category 'self-harm/instructions'.
	SelfMinusHarmSlashInstructions float64 `json:"self-harm/instructions"`
	// The score for the category 'sexual'.
	Sexual float64 `json:"sexual"`
	// The score for the category 'sexual/minors'.
	SexualSlashMinors float64 `json:"sexual/minors"`
	// The score for the category 'violence'.
	Violence float64 `json:"violence"`
	// The score for the category 'violence/graphic'.
	ViolenceSlashGraphic float64 `json:"violence/graphic"`
}

// GetHate returns the value of Hate.
func (s *CreateModerationResponseResultsItemCategoryScores) GetHate() float64 {
	return s.Hate
}

// GetHateSlashThreatening returns the value of HateSlashThreatening.
func (s *CreateModerationResponseResultsItemCategoryScores) GetHateSlashThreatening() float64 {
	return s.HateSlashThreatening
}

// GetHarassment returns the value of Harassment.
func (s *CreateModerationResponseResultsItemCategoryScores) GetHarassment() float64 {
	return s.Harassment
}

// GetHarassmentSlashThreatening returns the value of HarassmentSlashThreatening.
func (s *CreateModerationResponseResultsItemCategoryScores) GetHarassmentSlashThreatening() float64 {
	return s.HarassmentSlashThreatening
}

// GetSelfMinusHarm returns the value of SelfMinusHarm.
func (s *CreateModerationResponseResultsItemCategoryScores) GetSelfMinusHarm() float64 {
	return s.SelfMinusHarm
}

// GetSelfMinusHarmSlashIntent returns the value of SelfMinusHarmSlashIntent.
func (s *CreateModerationResponseResultsItemCategoryScores) GetSelfMinusHarmSlashIntent() float64 {
	return s.SelfMinusHarmSlashIntent
}

// GetSelfMinusHarmSlashInstructions returns the value of SelfMinusHarmSlashInstructions.
func (s *CreateModerationResponseResultsItemCategoryScores) GetSelfMinusHarmSlashInstructions() float64 {
	return s.SelfMinusHarmSlashInstructions
}

// GetSexual returns the value of Sexual.
func (s *CreateModerationResponseResultsItemCategoryScores) GetSexual() float64 {
	return s.Sexual
}

// GetSexualSlashMinors returns the value of SexualSlashMinors.
func (s *CreateModerationResponseResultsItemCategoryScores) GetSexualSlashMinors() float64 {
	return s.SexualSlashMinors
}

// GetViolence returns the value of Violence.
func (s *CreateModerationResponseResultsItemCategoryScores) GetViolence() float64 {
	return s.Violence
}

// GetViolenceSlashGraphic returns the value of ViolenceSlashGraphic.
func (s *CreateModerationResponseResultsItemCategoryScores) GetViolenceSlashGraphic() float64 {
	return s.ViolenceSlashGraphic
}

// SetHate sets the value of Hate.
func (s *CreateModerationResponseResultsItemCategoryScores) SetHate(val float64) {
	s.Hate = val
}

// SetHateSlashThreatening sets the value of HateSlashThreatening.
func (s *CreateModerationResponseResultsItemCategoryScores) SetHateSlashThreatening(val float64) {
	s.HateSlashThreatening = val
}

// SetHarassment sets the value of Harassment.
func (s *CreateModerationResponseResultsItemCategoryScores) SetHarassment(val float64) {
	s.Harassment = val
}

// SetHarassmentSlashThreatening sets the value of HarassmentSlashThreatening.
func (s *CreateModerationResponseResultsItemCategoryScores) SetHarassmentSlashThreatening(val float64) {
	s.HarassmentSlashThreatening = val
}

// SetSelfMinusHarm sets the value of SelfMinusHarm.
func (s *CreateModerationResponseResultsItemCategoryScores) SetSelfMinusHarm(val float64) {
	s.SelfMinusHarm = val
}

// SetSelfMinusHarmSlashIntent sets the value of SelfMinusHarmSlashIntent.
func (s *CreateModerationResponseResultsItemCategoryScores) SetSelfMinusHarmSlashIntent(val float64) {
	s.SelfMinusHarmSlashIntent = val
}

// SetSelfMinusHarmSlashInstructions sets the value of SelfMinusHarmSlashInstructions.
func (s *CreateModerationResponseResultsItemCategoryScores) SetSelfMinusHarmSlashInstructions(val float64) {
	s.SelfMinusHarmSlashInstructions = val
}

// SetSexual sets the value of Sexual.
func (s *CreateModerationResponseResultsItemCategoryScores) SetSexual(val float64) {
	s.Sexual = val
}

// SetSexualSlashMinors sets the value of SexualSlashMinors.
func (s *CreateModerationResponseResultsItemCategoryScores) SetSexualSlashMinors(val float64) {
	s.SexualSlashMinors = val
}

// SetViolence sets the value of Violence.
func (s *CreateModerationResponseResultsItemCategoryScores) SetViolence(val float64) {
	s.Violence = val
}

// SetViolenceSlashGraphic sets the value of ViolenceSlashGraphic.
func (s *CreateModerationResponseResultsItemCategoryScores) SetViolenceSlashGraphic(val float64) {
	s.ViolenceSlashGraphic = val
}

// Ref: #/components/schemas/CreateRunRequest
type CreateRunRequest struct {
	// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
	AssistantID string `json:"assistant_id"`
	// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is
	// provided here, it will override the model associated with the assistant. If not, the model
	// associated with the assistant will be used.
	Model OptNilString `json:"model"`
	// Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant.
	// This is useful for modifying the behavior on a per-run basis.
	Instructions OptNilString `json:"instructions"`
	// Appends additional instructions at the end of the instructions for the run. This is useful for
	// modifying the behavior on a per-run basis without overriding other instructions.
	AdditionalInstructions OptNilString `json:"additional_instructions"`
	// Override the tools the assistant can use for this run. This is useful for modifying the behavior
	// on a per-run basis.
	Tools OptNilCreateRunRequestToolsItemArray `json:"tools"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata OptCreateRunRequestMetadata `json:"metadata"`
}

// GetAssistantID returns the value of AssistantID.
func (s *CreateRunRequest) GetAssistantID() string {
	return s.AssistantID
}

// GetModel returns the value of Model.
func (s *CreateRunRequest) GetModel() OptNilString {
	return s.Model
}

// GetInstructions returns the value of Instructions.
func (s *CreateRunRequest) GetInstructions() OptNilString {
	return s.Instructions
}

// GetAdditionalInstructions returns the value of AdditionalInstructions.
func (s *CreateRunRequest) GetAdditionalInstructions() OptNilString {
	return s.AdditionalInstructions
}

// GetTools returns the value of Tools.
func (s *CreateRunRequest) GetTools() OptNilCreateRunRequestToolsItemArray {
	return s.Tools
}

// GetMetadata returns the value of Metadata.
func (s *CreateRunRequest) GetMetadata() OptCreateRunRequestMetadata {
	return s.Metadata
}

// SetAssistantID sets the value of AssistantID.
func (s *CreateRunRequest) SetAssistantID(val string) {
	s.AssistantID = val
}

// SetModel sets the value of Model.
func (s *CreateRunRequest) SetModel(val OptNilString) {
	s.Model = val
}

// SetInstructions sets the value of Instructions.
func (s *CreateRunRequest) SetInstructions(val OptNilString) {
	s.Instructions = val
}

// SetAdditionalInstructions sets the value of AdditionalInstructions.
func (s *CreateRunRequest) SetAdditionalInstructions(val OptNilString) {
	s.AdditionalInstructions = val
}

// SetTools sets the value of Tools.
func (s *CreateRunRequest) SetTools(val OptNilCreateRunRequestToolsItemArray) {
	s.Tools = val
}

// SetMetadata sets the value of Metadata.
func (s *CreateRunRequest) SetMetadata(val OptCreateRunRequestMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type CreateRunRequestMetadata struct{}

// CreateRunRequestToolsItem represents sum type.
type CreateRunRequestToolsItem struct {
	Type                    CreateRunRequestToolsItemType // switch on this field
	AssistantToolsCode      AssistantToolsCode
	AssistantToolsRetrieval AssistantToolsRetrieval
	AssistantToolsFunction  AssistantToolsFunction
}

// CreateRunRequestToolsItemType is oneOf type of CreateRunRequestToolsItem.
type CreateRunRequestToolsItemType string

// Possible values for CreateRunRequestToolsItemType.
const (
	AssistantToolsCodeCreateRunRequestToolsItem      CreateRunRequestToolsItemType = "code_interpreter"
	AssistantToolsRetrievalCreateRunRequestToolsItem CreateRunRequestToolsItemType = "retrieval"
	AssistantToolsFunctionCreateRunRequestToolsItem  CreateRunRequestToolsItemType = "function"
)

// IsAssistantToolsCode reports whether CreateRunRequestToolsItem is AssistantToolsCode.
func (s CreateRunRequestToolsItem) IsAssistantToolsCode() bool {
	return s.Type == AssistantToolsCodeCreateRunRequestToolsItem
}

// IsAssistantToolsRetrieval reports whether CreateRunRequestToolsItem is AssistantToolsRetrieval.
func (s CreateRunRequestToolsItem) IsAssistantToolsRetrieval() bool {
	return s.Type == AssistantToolsRetrievalCreateRunRequestToolsItem
}

// IsAssistantToolsFunction reports whether CreateRunRequestToolsItem is AssistantToolsFunction.
func (s CreateRunRequestToolsItem) IsAssistantToolsFunction() bool {
	return s.Type == AssistantToolsFunctionCreateRunRequestToolsItem
}

// SetAssistantToolsCode sets CreateRunRequestToolsItem to AssistantToolsCode.
func (s *CreateRunRequestToolsItem) SetAssistantToolsCode(v AssistantToolsCode) {
	s.Type = AssistantToolsCodeCreateRunRequestToolsItem
	s.AssistantToolsCode = v
}

// GetAssistantToolsCode returns AssistantToolsCode and true boolean if CreateRunRequestToolsItem is AssistantToolsCode.
func (s CreateRunRequestToolsItem) GetAssistantToolsCode() (v AssistantToolsCode, ok bool) {
	if !s.IsAssistantToolsCode() {
		return v, false
	}
	return s.AssistantToolsCode, true
}

// NewAssistantToolsCodeCreateRunRequestToolsItem returns new CreateRunRequestToolsItem from AssistantToolsCode.
func NewAssistantToolsCodeCreateRunRequestToolsItem(v AssistantToolsCode) CreateRunRequestToolsItem {
	var s CreateRunRequestToolsItem
	s.SetAssistantToolsCode(v)
	return s
}

// SetAssistantToolsRetrieval sets CreateRunRequestToolsItem to AssistantToolsRetrieval.
func (s *CreateRunRequestToolsItem) SetAssistantToolsRetrieval(v AssistantToolsRetrieval) {
	s.Type = AssistantToolsRetrievalCreateRunRequestToolsItem
	s.AssistantToolsRetrieval = v
}

// GetAssistantToolsRetrieval returns AssistantToolsRetrieval and true boolean if CreateRunRequestToolsItem is AssistantToolsRetrieval.
func (s CreateRunRequestToolsItem) GetAssistantToolsRetrieval() (v AssistantToolsRetrieval, ok bool) {
	if !s.IsAssistantToolsRetrieval() {
		return v, false
	}
	return s.AssistantToolsRetrieval, true
}

// NewAssistantToolsRetrievalCreateRunRequestToolsItem returns new CreateRunRequestToolsItem from AssistantToolsRetrieval.
func NewAssistantToolsRetrievalCreateRunRequestToolsItem(v AssistantToolsRetrieval) CreateRunRequestToolsItem {
	var s CreateRunRequestToolsItem
	s.SetAssistantToolsRetrieval(v)
	return s
}

// SetAssistantToolsFunction sets CreateRunRequestToolsItem to AssistantToolsFunction.
func (s *CreateRunRequestToolsItem) SetAssistantToolsFunction(v AssistantToolsFunction) {
	s.Type = AssistantToolsFunctionCreateRunRequestToolsItem
	s.AssistantToolsFunction = v
}

// GetAssistantToolsFunction returns AssistantToolsFunction and true boolean if CreateRunRequestToolsItem is AssistantToolsFunction.
func (s CreateRunRequestToolsItem) GetAssistantToolsFunction() (v AssistantToolsFunction, ok bool) {
	if !s.IsAssistantToolsFunction() {
		return v, false
	}
	return s.AssistantToolsFunction, true
}

// NewAssistantToolsFunctionCreateRunRequestToolsItem returns new CreateRunRequestToolsItem from AssistantToolsFunction.
func NewAssistantToolsFunctionCreateRunRequestToolsItem(v AssistantToolsFunction) CreateRunRequestToolsItem {
	var s CreateRunRequestToolsItem
	s.SetAssistantToolsFunction(v)
	return s
}

type CreateSpeechOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CreateSpeechOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// CreateSpeechOKHeaders wraps CreateSpeechOK with response headers.
type CreateSpeechOKHeaders struct {
	TransferEncoding OptString
	Response         CreateSpeechOK
}

// GetTransferEncoding returns the value of TransferEncoding.
func (s *CreateSpeechOKHeaders) GetTransferEncoding() OptString {
	return s.TransferEncoding
}

// GetResponse returns the value of Response.
func (s *CreateSpeechOKHeaders) GetResponse() CreateSpeechOK {
	return s.Response
}

// SetTransferEncoding sets the value of TransferEncoding.
func (s *CreateSpeechOKHeaders) SetTransferEncoding(val OptString) {
	s.TransferEncoding = val
}

// SetResponse sets the value of Response.
func (s *CreateSpeechOKHeaders) SetResponse(val CreateSpeechOK) {
	s.Response = val
}

// Ref: #/components/schemas/CreateSpeechRequest
type CreateSpeechRequest struct {
	// One of the available [TTS models](/docs/models/tts): `tts-1` or `tts-1-hd`.
	Model string `json:"model"`
	// The text to generate audio for. The maximum length is 4096 characters.
	Input string `json:"input"`
	// The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`,
	// `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech
	// guide](/docs/guides/text-to-speech/voice-options).
	Voice CreateSpeechRequestVoice `json:"voice"`
	// The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
	ResponseFormat OptCreateSpeechRequestResponseFormat `json:"response_format"`
	// The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
	Speed OptFloat64 `json:"speed"`
}

// GetModel returns the value of Model.
func (s *CreateSpeechRequest) GetModel() string {
	return s.Model
}

// GetInput returns the value of Input.
func (s *CreateSpeechRequest) GetInput() string {
	return s.Input
}

// GetVoice returns the value of Voice.
func (s *CreateSpeechRequest) GetVoice() CreateSpeechRequestVoice {
	return s.Voice
}

// GetResponseFormat returns the value of ResponseFormat.
func (s *CreateSpeechRequest) GetResponseFormat() OptCreateSpeechRequestResponseFormat {
	return s.ResponseFormat
}

// GetSpeed returns the value of Speed.
func (s *CreateSpeechRequest) GetSpeed() OptFloat64 {
	return s.Speed
}

// SetModel sets the value of Model.
func (s *CreateSpeechRequest) SetModel(val string) {
	s.Model = val
}

// SetInput sets the value of Input.
func (s *CreateSpeechRequest) SetInput(val string) {
	s.Input = val
}

// SetVoice sets the value of Voice.
func (s *CreateSpeechRequest) SetVoice(val CreateSpeechRequestVoice) {
	s.Voice = val
}

// SetResponseFormat sets the value of ResponseFormat.
func (s *CreateSpeechRequest) SetResponseFormat(val OptCreateSpeechRequestResponseFormat) {
	s.ResponseFormat = val
}

// SetSpeed sets the value of Speed.
func (s *CreateSpeechRequest) SetSpeed(val OptFloat64) {
	s.Speed = val
}

// The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
type CreateSpeechRequestResponseFormat string

const (
	CreateSpeechRequestResponseFormatMp3  CreateSpeechRequestResponseFormat = "mp3"
	CreateSpeechRequestResponseFormatOpus CreateSpeechRequestResponseFormat = "opus"
	CreateSpeechRequestResponseFormatAac  CreateSpeechRequestResponseFormat = "aac"
	CreateSpeechRequestResponseFormatFlac CreateSpeechRequestResponseFormat = "flac"
	CreateSpeechRequestResponseFormatWav  CreateSpeechRequestResponseFormat = "wav"
	CreateSpeechRequestResponseFormatPcm  CreateSpeechRequestResponseFormat = "pcm"
)

// AllValues returns all CreateSpeechRequestResponseFormat values.
func (CreateSpeechRequestResponseFormat) AllValues() []CreateSpeechRequestResponseFormat {
	return []CreateSpeechRequestResponseFormat{
		CreateSpeechRequestResponseFormatMp3,
		CreateSpeechRequestResponseFormatOpus,
		CreateSpeechRequestResponseFormatAac,
		CreateSpeechRequestResponseFormatFlac,
		CreateSpeechRequestResponseFormatWav,
		CreateSpeechRequestResponseFormatPcm,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateSpeechRequestResponseFormat) MarshalText() ([]byte, error) {
	switch s {
	case CreateSpeechRequestResponseFormatMp3:
		return []byte(s), nil
	case CreateSpeechRequestResponseFormatOpus:
		return []byte(s), nil
	case CreateSpeechRequestResponseFormatAac:
		return []byte(s), nil
	case CreateSpeechRequestResponseFormatFlac:
		return []byte(s), nil
	case CreateSpeechRequestResponseFormatWav:
		return []byte(s), nil
	case CreateSpeechRequestResponseFormatPcm:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateSpeechRequestResponseFormat) UnmarshalText(data []byte) error {
	switch CreateSpeechRequestResponseFormat(data) {
	case CreateSpeechRequestResponseFormatMp3:
		*s = CreateSpeechRequestResponseFormatMp3
		return nil
	case CreateSpeechRequestResponseFormatOpus:
		*s = CreateSpeechRequestResponseFormatOpus
		return nil
	case CreateSpeechRequestResponseFormatAac:
		*s = CreateSpeechRequestResponseFormatAac
		return nil
	case CreateSpeechRequestResponseFormatFlac:
		*s = CreateSpeechRequestResponseFormatFlac
		return nil
	case CreateSpeechRequestResponseFormatWav:
		*s = CreateSpeechRequestResponseFormatWav
		return nil
	case CreateSpeechRequestResponseFormatPcm:
		*s = CreateSpeechRequestResponseFormatPcm
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The voice to use when generating the audio. Supported voices are `alloy`, `echo`, `fable`, `onyx`,
// `nova`, and `shimmer`. Previews of the voices are available in the [Text to speech
// guide](/docs/guides/text-to-speech/voice-options).
type CreateSpeechRequestVoice string

const (
	CreateSpeechRequestVoiceAlloy   CreateSpeechRequestVoice = "alloy"
	CreateSpeechRequestVoiceEcho    CreateSpeechRequestVoice = "echo"
	CreateSpeechRequestVoiceFable   CreateSpeechRequestVoice = "fable"
	CreateSpeechRequestVoiceOnyx    CreateSpeechRequestVoice = "onyx"
	CreateSpeechRequestVoiceNova    CreateSpeechRequestVoice = "nova"
	CreateSpeechRequestVoiceShimmer CreateSpeechRequestVoice = "shimmer"
)

// AllValues returns all CreateSpeechRequestVoice values.
func (CreateSpeechRequestVoice) AllValues() []CreateSpeechRequestVoice {
	return []CreateSpeechRequestVoice{
		CreateSpeechRequestVoiceAlloy,
		CreateSpeechRequestVoiceEcho,
		CreateSpeechRequestVoiceFable,
		CreateSpeechRequestVoiceOnyx,
		CreateSpeechRequestVoiceNova,
		CreateSpeechRequestVoiceShimmer,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateSpeechRequestVoice) MarshalText() ([]byte, error) {
	switch s {
	case CreateSpeechRequestVoiceAlloy:
		return []byte(s), nil
	case CreateSpeechRequestVoiceEcho:
		return []byte(s), nil
	case CreateSpeechRequestVoiceFable:
		return []byte(s), nil
	case CreateSpeechRequestVoiceOnyx:
		return []byte(s), nil
	case CreateSpeechRequestVoiceNova:
		return []byte(s), nil
	case CreateSpeechRequestVoiceShimmer:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateSpeechRequestVoice) UnmarshalText(data []byte) error {
	switch CreateSpeechRequestVoice(data) {
	case CreateSpeechRequestVoiceAlloy:
		*s = CreateSpeechRequestVoiceAlloy
		return nil
	case CreateSpeechRequestVoiceEcho:
		*s = CreateSpeechRequestVoiceEcho
		return nil
	case CreateSpeechRequestVoiceFable:
		*s = CreateSpeechRequestVoiceFable
		return nil
	case CreateSpeechRequestVoiceOnyx:
		*s = CreateSpeechRequestVoiceOnyx
		return nil
	case CreateSpeechRequestVoiceNova:
		*s = CreateSpeechRequestVoiceNova
		return nil
	case CreateSpeechRequestVoiceShimmer:
		*s = CreateSpeechRequestVoiceShimmer
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/CreateThreadAndRunRequest
type CreateThreadAndRunRequest struct {
	// The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
	AssistantID string `json:"assistant_id"`
	// If no thread is provided, an empty thread will be created.
	Thread OptCreateThreadRequest `json:"thread"`
	// The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is
	// provided here, it will override the model associated with the assistant. If not, the model
	// associated with the assistant will be used.
	Model OptNilString `json:"model"`
	// Override the default system message of the assistant. This is useful for modifying the behavior on
	// a per-run basis.
	Instructions OptNilString `json:"instructions"`
	// Override the tools the assistant can use for this run. This is useful for modifying the behavior
	// on a per-run basis.
	Tools OptNilCreateThreadAndRunRequestToolsItemArray `json:"tools"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata OptCreateThreadAndRunRequestMetadata `json:"metadata"`
}

// GetAssistantID returns the value of AssistantID.
func (s *CreateThreadAndRunRequest) GetAssistantID() string {
	return s.AssistantID
}

// GetThread returns the value of Thread.
func (s *CreateThreadAndRunRequest) GetThread() OptCreateThreadRequest {
	return s.Thread
}

// GetModel returns the value of Model.
func (s *CreateThreadAndRunRequest) GetModel() OptNilString {
	return s.Model
}

// GetInstructions returns the value of Instructions.
func (s *CreateThreadAndRunRequest) GetInstructions() OptNilString {
	return s.Instructions
}

// GetTools returns the value of Tools.
func (s *CreateThreadAndRunRequest) GetTools() OptNilCreateThreadAndRunRequestToolsItemArray {
	return s.Tools
}

// GetMetadata returns the value of Metadata.
func (s *CreateThreadAndRunRequest) GetMetadata() OptCreateThreadAndRunRequestMetadata {
	return s.Metadata
}

// SetAssistantID sets the value of AssistantID.
func (s *CreateThreadAndRunRequest) SetAssistantID(val string) {
	s.AssistantID = val
}

// SetThread sets the value of Thread.
func (s *CreateThreadAndRunRequest) SetThread(val OptCreateThreadRequest) {
	s.Thread = val
}

// SetModel sets the value of Model.
func (s *CreateThreadAndRunRequest) SetModel(val OptNilString) {
	s.Model = val
}

// SetInstructions sets the value of Instructions.
func (s *CreateThreadAndRunRequest) SetInstructions(val OptNilString) {
	s.Instructions = val
}

// SetTools sets the value of Tools.
func (s *CreateThreadAndRunRequest) SetTools(val OptNilCreateThreadAndRunRequestToolsItemArray) {
	s.Tools = val
}

// SetMetadata sets the value of Metadata.
func (s *CreateThreadAndRunRequest) SetMetadata(val OptCreateThreadAndRunRequestMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type CreateThreadAndRunRequestMetadata struct{}

// CreateThreadAndRunRequestToolsItem represents sum type.
type CreateThreadAndRunRequestToolsItem struct {
	Type                    CreateThreadAndRunRequestToolsItemType // switch on this field
	AssistantToolsCode      AssistantToolsCode
	AssistantToolsRetrieval AssistantToolsRetrieval
	AssistantToolsFunction  AssistantToolsFunction
}

// CreateThreadAndRunRequestToolsItemType is oneOf type of CreateThreadAndRunRequestToolsItem.
type CreateThreadAndRunRequestToolsItemType string

// Possible values for CreateThreadAndRunRequestToolsItemType.
const (
	AssistantToolsCodeCreateThreadAndRunRequestToolsItem      CreateThreadAndRunRequestToolsItemType = "code_interpreter"
	AssistantToolsRetrievalCreateThreadAndRunRequestToolsItem CreateThreadAndRunRequestToolsItemType = "retrieval"
	AssistantToolsFunctionCreateThreadAndRunRequestToolsItem  CreateThreadAndRunRequestToolsItemType = "function"
)

// IsAssistantToolsCode reports whether CreateThreadAndRunRequestToolsItem is AssistantToolsCode.
func (s CreateThreadAndRunRequestToolsItem) IsAssistantToolsCode() bool {
	return s.Type == AssistantToolsCodeCreateThreadAndRunRequestToolsItem
}

// IsAssistantToolsRetrieval reports whether CreateThreadAndRunRequestToolsItem is AssistantToolsRetrieval.
func (s CreateThreadAndRunRequestToolsItem) IsAssistantToolsRetrieval() bool {
	return s.Type == AssistantToolsRetrievalCreateThreadAndRunRequestToolsItem
}

// IsAssistantToolsFunction reports whether CreateThreadAndRunRequestToolsItem is AssistantToolsFunction.
func (s CreateThreadAndRunRequestToolsItem) IsAssistantToolsFunction() bool {
	return s.Type == AssistantToolsFunctionCreateThreadAndRunRequestToolsItem
}

// SetAssistantToolsCode sets CreateThreadAndRunRequestToolsItem to AssistantToolsCode.
func (s *CreateThreadAndRunRequestToolsItem) SetAssistantToolsCode(v AssistantToolsCode) {
	s.Type = AssistantToolsCodeCreateThreadAndRunRequestToolsItem
	s.AssistantToolsCode = v
}

// GetAssistantToolsCode returns AssistantToolsCode and true boolean if CreateThreadAndRunRequestToolsItem is AssistantToolsCode.
func (s CreateThreadAndRunRequestToolsItem) GetAssistantToolsCode() (v AssistantToolsCode, ok bool) {
	if !s.IsAssistantToolsCode() {
		return v, false
	}
	return s.AssistantToolsCode, true
}

// NewAssistantToolsCodeCreateThreadAndRunRequestToolsItem returns new CreateThreadAndRunRequestToolsItem from AssistantToolsCode.
func NewAssistantToolsCodeCreateThreadAndRunRequestToolsItem(v AssistantToolsCode) CreateThreadAndRunRequestToolsItem {
	var s CreateThreadAndRunRequestToolsItem
	s.SetAssistantToolsCode(v)
	return s
}

// SetAssistantToolsRetrieval sets CreateThreadAndRunRequestToolsItem to AssistantToolsRetrieval.
func (s *CreateThreadAndRunRequestToolsItem) SetAssistantToolsRetrieval(v AssistantToolsRetrieval) {
	s.Type = AssistantToolsRetrievalCreateThreadAndRunRequestToolsItem
	s.AssistantToolsRetrieval = v
}

// GetAssistantToolsRetrieval returns AssistantToolsRetrieval and true boolean if CreateThreadAndRunRequestToolsItem is AssistantToolsRetrieval.
func (s CreateThreadAndRunRequestToolsItem) GetAssistantToolsRetrieval() (v AssistantToolsRetrieval, ok bool) {
	if !s.IsAssistantToolsRetrieval() {
		return v, false
	}
	return s.AssistantToolsRetrieval, true
}

// NewAssistantToolsRetrievalCreateThreadAndRunRequestToolsItem returns new CreateThreadAndRunRequestToolsItem from AssistantToolsRetrieval.
func NewAssistantToolsRetrievalCreateThreadAndRunRequestToolsItem(v AssistantToolsRetrieval) CreateThreadAndRunRequestToolsItem {
	var s CreateThreadAndRunRequestToolsItem
	s.SetAssistantToolsRetrieval(v)
	return s
}

// SetAssistantToolsFunction sets CreateThreadAndRunRequestToolsItem to AssistantToolsFunction.
func (s *CreateThreadAndRunRequestToolsItem) SetAssistantToolsFunction(v AssistantToolsFunction) {
	s.Type = AssistantToolsFunctionCreateThreadAndRunRequestToolsItem
	s.AssistantToolsFunction = v
}

// GetAssistantToolsFunction returns AssistantToolsFunction and true boolean if CreateThreadAndRunRequestToolsItem is AssistantToolsFunction.
func (s CreateThreadAndRunRequestToolsItem) GetAssistantToolsFunction() (v AssistantToolsFunction, ok bool) {
	if !s.IsAssistantToolsFunction() {
		return v, false
	}
	return s.AssistantToolsFunction, true
}

// NewAssistantToolsFunctionCreateThreadAndRunRequestToolsItem returns new CreateThreadAndRunRequestToolsItem from AssistantToolsFunction.
func NewAssistantToolsFunctionCreateThreadAndRunRequestToolsItem(v AssistantToolsFunction) CreateThreadAndRunRequestToolsItem {
	var s CreateThreadAndRunRequestToolsItem
	s.SetAssistantToolsFunction(v)
	return s
}

// Ref: #/components/schemas/CreateThreadRequest
type CreateThreadRequest struct {
	// A list of [messages](/docs/api-reference/messages) to start the thread with.
	Messages []CreateMessageRequest `json:"messages"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata OptCreateThreadRequestMetadata `json:"metadata"`
}

// GetMessages returns the value of Messages.
func (s *CreateThreadRequest) GetMessages() []CreateMessageRequest {
	return s.Messages
}

// GetMetadata returns the value of Metadata.
func (s *CreateThreadRequest) GetMetadata() OptCreateThreadRequestMetadata {
	return s.Metadata
}

// SetMessages sets the value of Messages.
func (s *CreateThreadRequest) SetMessages(val []CreateMessageRequest) {
	s.Messages = val
}

// SetMetadata sets the value of Metadata.
func (s *CreateThreadRequest) SetMetadata(val OptCreateThreadRequestMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type CreateThreadRequestMetadata struct{}

// CreateTranscriptionOK represents sum type.
type CreateTranscriptionOK struct {
	Type                                   CreateTranscriptionOKType // switch on this field
	CreateTranscriptionResponseJson        CreateTranscriptionResponseJson
	CreateTranscriptionResponseVerboseJson CreateTranscriptionResponseVerboseJson
}

// CreateTranscriptionOKType is oneOf type of CreateTranscriptionOK.
type CreateTranscriptionOKType string

// Possible values for CreateTranscriptionOKType.
const (
	CreateTranscriptionResponseJsonCreateTranscriptionOK        CreateTranscriptionOKType = "CreateTranscriptionResponseJson"
	CreateTranscriptionResponseVerboseJsonCreateTranscriptionOK CreateTranscriptionOKType = "CreateTranscriptionResponseVerboseJson"
)

// IsCreateTranscriptionResponseJson reports whether CreateTranscriptionOK is CreateTranscriptionResponseJson.
func (s CreateTranscriptionOK) IsCreateTranscriptionResponseJson() bool {
	return s.Type == CreateTranscriptionResponseJsonCreateTranscriptionOK
}

// IsCreateTranscriptionResponseVerboseJson reports whether CreateTranscriptionOK is CreateTranscriptionResponseVerboseJson.
func (s CreateTranscriptionOK) IsCreateTranscriptionResponseVerboseJson() bool {
	return s.Type == CreateTranscriptionResponseVerboseJsonCreateTranscriptionOK
}

// SetCreateTranscriptionResponseJson sets CreateTranscriptionOK to CreateTranscriptionResponseJson.
func (s *CreateTranscriptionOK) SetCreateTranscriptionResponseJson(v CreateTranscriptionResponseJson) {
	s.Type = CreateTranscriptionResponseJsonCreateTranscriptionOK
	s.CreateTranscriptionResponseJson = v
}

// GetCreateTranscriptionResponseJson returns CreateTranscriptionResponseJson and true boolean if CreateTranscriptionOK is CreateTranscriptionResponseJson.
func (s CreateTranscriptionOK) GetCreateTranscriptionResponseJson() (v CreateTranscriptionResponseJson, ok bool) {
	if !s.IsCreateTranscriptionResponseJson() {
		return v, false
	}
	return s.CreateTranscriptionResponseJson, true
}

// NewCreateTranscriptionResponseJsonCreateTranscriptionOK returns new CreateTranscriptionOK from CreateTranscriptionResponseJson.
func NewCreateTranscriptionResponseJsonCreateTranscriptionOK(v CreateTranscriptionResponseJson) CreateTranscriptionOK {
	var s CreateTranscriptionOK
	s.SetCreateTranscriptionResponseJson(v)
	return s
}

// SetCreateTranscriptionResponseVerboseJson sets CreateTranscriptionOK to CreateTranscriptionResponseVerboseJson.
func (s *CreateTranscriptionOK) SetCreateTranscriptionResponseVerboseJson(v CreateTranscriptionResponseVerboseJson) {
	s.Type = CreateTranscriptionResponseVerboseJsonCreateTranscriptionOK
	s.CreateTranscriptionResponseVerboseJson = v
}

// GetCreateTranscriptionResponseVerboseJson returns CreateTranscriptionResponseVerboseJson and true boolean if CreateTranscriptionOK is CreateTranscriptionResponseVerboseJson.
func (s CreateTranscriptionOK) GetCreateTranscriptionResponseVerboseJson() (v CreateTranscriptionResponseVerboseJson, ok bool) {
	if !s.IsCreateTranscriptionResponseVerboseJson() {
		return v, false
	}
	return s.CreateTranscriptionResponseVerboseJson, true
}

// NewCreateTranscriptionResponseVerboseJsonCreateTranscriptionOK returns new CreateTranscriptionOK from CreateTranscriptionResponseVerboseJson.
func NewCreateTranscriptionResponseVerboseJsonCreateTranscriptionOK(v CreateTranscriptionResponseVerboseJson) CreateTranscriptionOK {
	var s CreateTranscriptionOK
	s.SetCreateTranscriptionResponseVerboseJson(v)
	return s
}

// Ref: #/components/schemas/CreateTranscriptionRequest
type CreateTranscriptionRequestMultipart struct {
	// The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg,
	//  mpga, m4a, ogg, wav, or webm.
	File ht.MultipartFile `json:"file"`
	// ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is
	// currently available.
	Model string `json:"model"`
	// The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.
	// org/wiki/List_of_ISO_639-1_codes) format will improve accuracy and latency.
	Language OptString `json:"language"`
	// An optional text to guide the model's style or continue a previous audio segment. The
	// [prompt](/docs/guides/speech-to-text/prompting) should match the audio language.
	Prompt OptString `json:"prompt"`
	// The format of the transcript output, in one of these options: `json`, `text`, `srt`,
	// `verbose_json`, or `vtt`.
	ResponseFormat OptCreateTranscriptionRequestMultipartResponseFormat `json:"response_format"`
	// The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random,
	//  while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model
	// will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically
	// increase the temperature until certain thresholds are hit.
	Temperature OptFloat64 `json:"temperature"`
	// The timestamp granularities to populate for this transcription. `response_format` must be set
	// `verbose_json` to use timestamp granularities. Either or both of these options are supported:
	// `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating
	// word timestamps incurs additional latency.
	TimestampGranularities []CreateTranscriptionRequestMultipartTimestampGranularitiesItem `json:"timestamp_granularities[]"`
}

// GetFile returns the value of File.
func (s *CreateTranscriptionRequestMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// GetModel returns the value of Model.
func (s *CreateTranscriptionRequestMultipart) GetModel() string {
	return s.Model
}

// GetLanguage returns the value of Language.
func (s *CreateTranscriptionRequestMultipart) GetLanguage() OptString {
	return s.Language
}

// GetPrompt returns the value of Prompt.
func (s *CreateTranscriptionRequestMultipart) GetPrompt() OptString {
	return s.Prompt
}

// GetResponseFormat returns the value of ResponseFormat.
func (s *CreateTranscriptionRequestMultipart) GetResponseFormat() OptCreateTranscriptionRequestMultipartResponseFormat {
	return s.ResponseFormat
}

// GetTemperature returns the value of Temperature.
func (s *CreateTranscriptionRequestMultipart) GetTemperature() OptFloat64 {
	return s.Temperature
}

// GetTimestampGranularities returns the value of TimestampGranularities.
func (s *CreateTranscriptionRequestMultipart) GetTimestampGranularities() []CreateTranscriptionRequestMultipartTimestampGranularitiesItem {
	return s.TimestampGranularities
}

// SetFile sets the value of File.
func (s *CreateTranscriptionRequestMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// SetModel sets the value of Model.
func (s *CreateTranscriptionRequestMultipart) SetModel(val string) {
	s.Model = val
}

// SetLanguage sets the value of Language.
func (s *CreateTranscriptionRequestMultipart) SetLanguage(val OptString) {
	s.Language = val
}

// SetPrompt sets the value of Prompt.
func (s *CreateTranscriptionRequestMultipart) SetPrompt(val OptString) {
	s.Prompt = val
}

// SetResponseFormat sets the value of ResponseFormat.
func (s *CreateTranscriptionRequestMultipart) SetResponseFormat(val OptCreateTranscriptionRequestMultipartResponseFormat) {
	s.ResponseFormat = val
}

// SetTemperature sets the value of Temperature.
func (s *CreateTranscriptionRequestMultipart) SetTemperature(val OptFloat64) {
	s.Temperature = val
}

// SetTimestampGranularities sets the value of TimestampGranularities.
func (s *CreateTranscriptionRequestMultipart) SetTimestampGranularities(val []CreateTranscriptionRequestMultipartTimestampGranularitiesItem) {
	s.TimestampGranularities = val
}

// The format of the transcript output, in one of these options: `json`, `text`, `srt`,
// `verbose_json`, or `vtt`.
type CreateTranscriptionRequestMultipartResponseFormat string

const (
	CreateTranscriptionRequestMultipartResponseFormatJSON        CreateTranscriptionRequestMultipartResponseFormat = "json"
	CreateTranscriptionRequestMultipartResponseFormatText        CreateTranscriptionRequestMultipartResponseFormat = "text"
	CreateTranscriptionRequestMultipartResponseFormatSrt         CreateTranscriptionRequestMultipartResponseFormat = "srt"
	CreateTranscriptionRequestMultipartResponseFormatVerboseJSON CreateTranscriptionRequestMultipartResponseFormat = "verbose_json"
	CreateTranscriptionRequestMultipartResponseFormatVtt         CreateTranscriptionRequestMultipartResponseFormat = "vtt"
)

// AllValues returns all CreateTranscriptionRequestMultipartResponseFormat values.
func (CreateTranscriptionRequestMultipartResponseFormat) AllValues() []CreateTranscriptionRequestMultipartResponseFormat {
	return []CreateTranscriptionRequestMultipartResponseFormat{
		CreateTranscriptionRequestMultipartResponseFormatJSON,
		CreateTranscriptionRequestMultipartResponseFormatText,
		CreateTranscriptionRequestMultipartResponseFormatSrt,
		CreateTranscriptionRequestMultipartResponseFormatVerboseJSON,
		CreateTranscriptionRequestMultipartResponseFormatVtt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateTranscriptionRequestMultipartResponseFormat) MarshalText() ([]byte, error) {
	switch s {
	case CreateTranscriptionRequestMultipartResponseFormatJSON:
		return []byte(s), nil
	case CreateTranscriptionRequestMultipartResponseFormatText:
		return []byte(s), nil
	case CreateTranscriptionRequestMultipartResponseFormatSrt:
		return []byte(s), nil
	case CreateTranscriptionRequestMultipartResponseFormatVerboseJSON:
		return []byte(s), nil
	case CreateTranscriptionRequestMultipartResponseFormatVtt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTranscriptionRequestMultipartResponseFormat) UnmarshalText(data []byte) error {
	switch CreateTranscriptionRequestMultipartResponseFormat(data) {
	case CreateTranscriptionRequestMultipartResponseFormatJSON:
		*s = CreateTranscriptionRequestMultipartResponseFormatJSON
		return nil
	case CreateTranscriptionRequestMultipartResponseFormatText:
		*s = CreateTranscriptionRequestMultipartResponseFormatText
		return nil
	case CreateTranscriptionRequestMultipartResponseFormatSrt:
		*s = CreateTranscriptionRequestMultipartResponseFormatSrt
		return nil
	case CreateTranscriptionRequestMultipartResponseFormatVerboseJSON:
		*s = CreateTranscriptionRequestMultipartResponseFormatVerboseJSON
		return nil
	case CreateTranscriptionRequestMultipartResponseFormatVtt:
		*s = CreateTranscriptionRequestMultipartResponseFormatVtt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type CreateTranscriptionRequestMultipartTimestampGranularitiesItem string

const (
	CreateTranscriptionRequestMultipartTimestampGranularitiesItemWord    CreateTranscriptionRequestMultipartTimestampGranularitiesItem = "word"
	CreateTranscriptionRequestMultipartTimestampGranularitiesItemSegment CreateTranscriptionRequestMultipartTimestampGranularitiesItem = "segment"
)

// AllValues returns all CreateTranscriptionRequestMultipartTimestampGranularitiesItem values.
func (CreateTranscriptionRequestMultipartTimestampGranularitiesItem) AllValues() []CreateTranscriptionRequestMultipartTimestampGranularitiesItem {
	return []CreateTranscriptionRequestMultipartTimestampGranularitiesItem{
		CreateTranscriptionRequestMultipartTimestampGranularitiesItemWord,
		CreateTranscriptionRequestMultipartTimestampGranularitiesItemSegment,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CreateTranscriptionRequestMultipartTimestampGranularitiesItem) MarshalText() ([]byte, error) {
	switch s {
	case CreateTranscriptionRequestMultipartTimestampGranularitiesItemWord:
		return []byte(s), nil
	case CreateTranscriptionRequestMultipartTimestampGranularitiesItemSegment:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CreateTranscriptionRequestMultipartTimestampGranularitiesItem) UnmarshalText(data []byte) error {
	switch CreateTranscriptionRequestMultipartTimestampGranularitiesItem(data) {
	case CreateTranscriptionRequestMultipartTimestampGranularitiesItemWord:
		*s = CreateTranscriptionRequestMultipartTimestampGranularitiesItemWord
		return nil
	case CreateTranscriptionRequestMultipartTimestampGranularitiesItemSegment:
		*s = CreateTranscriptionRequestMultipartTimestampGranularitiesItemSegment
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents a transcription response returned by model, based on the provided input.
// Ref: #/components/schemas/CreateTranscriptionResponseJson
type CreateTranscriptionResponseJson struct {
	// The transcribed text.
	Text string `json:"text"`
}

// GetText returns the value of Text.
func (s *CreateTranscriptionResponseJson) GetText() string {
	return s.Text
}

// SetText sets the value of Text.
func (s *CreateTranscriptionResponseJson) SetText(val string) {
	s.Text = val
}

// Represents a verbose json transcription response returned by model, based on the provided input.
// Ref: #/components/schemas/CreateTranscriptionResponseVerboseJson
type CreateTranscriptionResponseVerboseJson struct {
	// The language of the input audio.
	Language string `json:"language"`
	// The duration of the input audio.
	Duration string `json:"duration"`
	// The transcribed text.
	Text string `json:"text"`
	// Extracted words and their corresponding timestamps.
	Words []TranscriptionWord `json:"words"`
	// Segments of the transcribed text and their corresponding details.
	Segments []TranscriptionSegment `json:"segments"`
}

// GetLanguage returns the value of Language.
func (s *CreateTranscriptionResponseVerboseJson) GetLanguage() string {
	return s.Language
}

// GetDuration returns the value of Duration.
func (s *CreateTranscriptionResponseVerboseJson) GetDuration() string {
	return s.Duration
}

// GetText returns the value of Text.
func (s *CreateTranscriptionResponseVerboseJson) GetText() string {
	return s.Text
}

// GetWords returns the value of Words.
func (s *CreateTranscriptionResponseVerboseJson) GetWords() []TranscriptionWord {
	return s.Words
}

// GetSegments returns the value of Segments.
func (s *CreateTranscriptionResponseVerboseJson) GetSegments() []TranscriptionSegment {
	return s.Segments
}

// SetLanguage sets the value of Language.
func (s *CreateTranscriptionResponseVerboseJson) SetLanguage(val string) {
	s.Language = val
}

// SetDuration sets the value of Duration.
func (s *CreateTranscriptionResponseVerboseJson) SetDuration(val string) {
	s.Duration = val
}

// SetText sets the value of Text.
func (s *CreateTranscriptionResponseVerboseJson) SetText(val string) {
	s.Text = val
}

// SetWords sets the value of Words.
func (s *CreateTranscriptionResponseVerboseJson) SetWords(val []TranscriptionWord) {
	s.Words = val
}

// SetSegments sets the value of Segments.
func (s *CreateTranscriptionResponseVerboseJson) SetSegments(val []TranscriptionSegment) {
	s.Segments = val
}

// CreateTranslationOK represents sum type.
type CreateTranslationOK struct {
	Type                                 CreateTranslationOKType // switch on this field
	CreateTranslationResponseJson        CreateTranslationResponseJson
	CreateTranslationResponseVerboseJson CreateTranslationResponseVerboseJson
}

// CreateTranslationOKType is oneOf type of CreateTranslationOK.
type CreateTranslationOKType string

// Possible values for CreateTranslationOKType.
const (
	CreateTranslationResponseJsonCreateTranslationOK        CreateTranslationOKType = "CreateTranslationResponseJson"
	CreateTranslationResponseVerboseJsonCreateTranslationOK CreateTranslationOKType = "CreateTranslationResponseVerboseJson"
)

// IsCreateTranslationResponseJson reports whether CreateTranslationOK is CreateTranslationResponseJson.
func (s CreateTranslationOK) IsCreateTranslationResponseJson() bool {
	return s.Type == CreateTranslationResponseJsonCreateTranslationOK
}

// IsCreateTranslationResponseVerboseJson reports whether CreateTranslationOK is CreateTranslationResponseVerboseJson.
func (s CreateTranslationOK) IsCreateTranslationResponseVerboseJson() bool {
	return s.Type == CreateTranslationResponseVerboseJsonCreateTranslationOK
}

// SetCreateTranslationResponseJson sets CreateTranslationOK to CreateTranslationResponseJson.
func (s *CreateTranslationOK) SetCreateTranslationResponseJson(v CreateTranslationResponseJson) {
	s.Type = CreateTranslationResponseJsonCreateTranslationOK
	s.CreateTranslationResponseJson = v
}

// GetCreateTranslationResponseJson returns CreateTranslationResponseJson and true boolean if CreateTranslationOK is CreateTranslationResponseJson.
func (s CreateTranslationOK) GetCreateTranslationResponseJson() (v CreateTranslationResponseJson, ok bool) {
	if !s.IsCreateTranslationResponseJson() {
		return v, false
	}
	return s.CreateTranslationResponseJson, true
}

// NewCreateTranslationResponseJsonCreateTranslationOK returns new CreateTranslationOK from CreateTranslationResponseJson.
func NewCreateTranslationResponseJsonCreateTranslationOK(v CreateTranslationResponseJson) CreateTranslationOK {
	var s CreateTranslationOK
	s.SetCreateTranslationResponseJson(v)
	return s
}

// SetCreateTranslationResponseVerboseJson sets CreateTranslationOK to CreateTranslationResponseVerboseJson.
func (s *CreateTranslationOK) SetCreateTranslationResponseVerboseJson(v CreateTranslationResponseVerboseJson) {
	s.Type = CreateTranslationResponseVerboseJsonCreateTranslationOK
	s.CreateTranslationResponseVerboseJson = v
}

// GetCreateTranslationResponseVerboseJson returns CreateTranslationResponseVerboseJson and true boolean if CreateTranslationOK is CreateTranslationResponseVerboseJson.
func (s CreateTranslationOK) GetCreateTranslationResponseVerboseJson() (v CreateTranslationResponseVerboseJson, ok bool) {
	if !s.IsCreateTranslationResponseVerboseJson() {
		return v, false
	}
	return s.CreateTranslationResponseVerboseJson, true
}

// NewCreateTranslationResponseVerboseJsonCreateTranslationOK returns new CreateTranslationOK from CreateTranslationResponseVerboseJson.
func NewCreateTranslationResponseVerboseJsonCreateTranslationOK(v CreateTranslationResponseVerboseJson) CreateTranslationOK {
	var s CreateTranslationOK
	s.SetCreateTranslationResponseVerboseJson(v)
	return s
}

// Ref: #/components/schemas/CreateTranslationRequest
type CreateTranslationRequestMultipart struct {
	// The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg,
	// mpga, m4a, ogg, wav, or webm.
	File ht.MultipartFile `json:"file"`
	// ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is
	// currently available.
	Model string `json:"model"`
	// An optional text to guide the model's style or continue a previous audio segment. The
	// [prompt](/docs/guides/speech-to-text/prompting) should be in English.
	Prompt OptString `json:"prompt"`
	// The format of the transcript output, in one of these options: `json`, `text`, `srt`,
	// `verbose_json`, or `vtt`.
	ResponseFormat OptString `json:"response_format"`
	// The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random,
	//  while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model
	// will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically
	// increase the temperature until certain thresholds are hit.
	Temperature OptFloat64 `json:"temperature"`
}

// GetFile returns the value of File.
func (s *CreateTranslationRequestMultipart) GetFile() ht.MultipartFile {
	return s.File
}

// GetModel returns the value of Model.
func (s *CreateTranslationRequestMultipart) GetModel() string {
	return s.Model
}

// GetPrompt returns the value of Prompt.
func (s *CreateTranslationRequestMultipart) GetPrompt() OptString {
	return s.Prompt
}

// GetResponseFormat returns the value of ResponseFormat.
func (s *CreateTranslationRequestMultipart) GetResponseFormat() OptString {
	return s.ResponseFormat
}

// GetTemperature returns the value of Temperature.
func (s *CreateTranslationRequestMultipart) GetTemperature() OptFloat64 {
	return s.Temperature
}

// SetFile sets the value of File.
func (s *CreateTranslationRequestMultipart) SetFile(val ht.MultipartFile) {
	s.File = val
}

// SetModel sets the value of Model.
func (s *CreateTranslationRequestMultipart) SetModel(val string) {
	s.Model = val
}

// SetPrompt sets the value of Prompt.
func (s *CreateTranslationRequestMultipart) SetPrompt(val OptString) {
	s.Prompt = val
}

// SetResponseFormat sets the value of ResponseFormat.
func (s *CreateTranslationRequestMultipart) SetResponseFormat(val OptString) {
	s.ResponseFormat = val
}

// SetTemperature sets the value of Temperature.
func (s *CreateTranslationRequestMultipart) SetTemperature(val OptFloat64) {
	s.Temperature = val
}

// Ref: #/components/schemas/CreateTranslationResponseJson
type CreateTranslationResponseJson struct {
	Text string `json:"text"`
}

// GetText returns the value of Text.
func (s *CreateTranslationResponseJson) GetText() string {
	return s.Text
}

// SetText sets the value of Text.
func (s *CreateTranslationResponseJson) SetText(val string) {
	s.Text = val
}

// Ref: #/components/schemas/CreateTranslationResponseVerboseJson
type CreateTranslationResponseVerboseJson struct {
	// The language of the output translation (always `english`).
	Language string `json:"language"`
	// The duration of the input audio.
	Duration string `json:"duration"`
	// The translated text.
	Text string `json:"text"`
	// Segments of the translated text and their corresponding details.
	Segments []TranscriptionSegment `json:"segments"`
}

// GetLanguage returns the value of Language.
func (s *CreateTranslationResponseVerboseJson) GetLanguage() string {
	return s.Language
}

// GetDuration returns the value of Duration.
func (s *CreateTranslationResponseVerboseJson) GetDuration() string {
	return s.Duration
}

// GetText returns the value of Text.
func (s *CreateTranslationResponseVerboseJson) GetText() string {
	return s.Text
}

// GetSegments returns the value of Segments.
func (s *CreateTranslationResponseVerboseJson) GetSegments() []TranscriptionSegment {
	return s.Segments
}

// SetLanguage sets the value of Language.
func (s *CreateTranslationResponseVerboseJson) SetLanguage(val string) {
	s.Language = val
}

// SetDuration sets the value of Duration.
func (s *CreateTranslationResponseVerboseJson) SetDuration(val string) {
	s.Duration = val
}

// SetText sets the value of Text.
func (s *CreateTranslationResponseVerboseJson) SetText(val string) {
	s.Text = val
}

// SetSegments sets the value of Segments.
func (s *CreateTranslationResponseVerboseJson) SetSegments(val []TranscriptionSegment) {
	s.Segments = val
}

// Deletes the association between the assistant and the file, but does not delete the
// [File](/docs/api-reference/files) object itself.
// Ref: #/components/schemas/DeleteAssistantFileResponse
type DeleteAssistantFileResponse struct {
	ID      string                            `json:"id"`
	Deleted bool                              `json:"deleted"`
	Object  DeleteAssistantFileResponseObject `json:"object"`
}

// GetID returns the value of ID.
func (s *DeleteAssistantFileResponse) GetID() string {
	return s.ID
}

// GetDeleted returns the value of Deleted.
func (s *DeleteAssistantFileResponse) GetDeleted() bool {
	return s.Deleted
}

// GetObject returns the value of Object.
func (s *DeleteAssistantFileResponse) GetObject() DeleteAssistantFileResponseObject {
	return s.Object
}

// SetID sets the value of ID.
func (s *DeleteAssistantFileResponse) SetID(val string) {
	s.ID = val
}

// SetDeleted sets the value of Deleted.
func (s *DeleteAssistantFileResponse) SetDeleted(val bool) {
	s.Deleted = val
}

// SetObject sets the value of Object.
func (s *DeleteAssistantFileResponse) SetObject(val DeleteAssistantFileResponseObject) {
	s.Object = val
}

type DeleteAssistantFileResponseObject string

const (
	DeleteAssistantFileResponseObjectAssistantFileDeleted DeleteAssistantFileResponseObject = "assistant.file.deleted"
)

// AllValues returns all DeleteAssistantFileResponseObject values.
func (DeleteAssistantFileResponseObject) AllValues() []DeleteAssistantFileResponseObject {
	return []DeleteAssistantFileResponseObject{
		DeleteAssistantFileResponseObjectAssistantFileDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeleteAssistantFileResponseObject) MarshalText() ([]byte, error) {
	switch s {
	case DeleteAssistantFileResponseObjectAssistantFileDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeleteAssistantFileResponseObject) UnmarshalText(data []byte) error {
	switch DeleteAssistantFileResponseObject(data) {
	case DeleteAssistantFileResponseObjectAssistantFileDeleted:
		*s = DeleteAssistantFileResponseObjectAssistantFileDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DeleteAssistantResponse
type DeleteAssistantResponse struct {
	ID      string                        `json:"id"`
	Deleted bool                          `json:"deleted"`
	Object  DeleteAssistantResponseObject `json:"object"`
}

// GetID returns the value of ID.
func (s *DeleteAssistantResponse) GetID() string {
	return s.ID
}

// GetDeleted returns the value of Deleted.
func (s *DeleteAssistantResponse) GetDeleted() bool {
	return s.Deleted
}

// GetObject returns the value of Object.
func (s *DeleteAssistantResponse) GetObject() DeleteAssistantResponseObject {
	return s.Object
}

// SetID sets the value of ID.
func (s *DeleteAssistantResponse) SetID(val string) {
	s.ID = val
}

// SetDeleted sets the value of Deleted.
func (s *DeleteAssistantResponse) SetDeleted(val bool) {
	s.Deleted = val
}

// SetObject sets the value of Object.
func (s *DeleteAssistantResponse) SetObject(val DeleteAssistantResponseObject) {
	s.Object = val
}

type DeleteAssistantResponseObject string

const (
	DeleteAssistantResponseObjectAssistantDeleted DeleteAssistantResponseObject = "assistant.deleted"
)

// AllValues returns all DeleteAssistantResponseObject values.
func (DeleteAssistantResponseObject) AllValues() []DeleteAssistantResponseObject {
	return []DeleteAssistantResponseObject{
		DeleteAssistantResponseObjectAssistantDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeleteAssistantResponseObject) MarshalText() ([]byte, error) {
	switch s {
	case DeleteAssistantResponseObjectAssistantDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeleteAssistantResponseObject) UnmarshalText(data []byte) error {
	switch DeleteAssistantResponseObject(data) {
	case DeleteAssistantResponseObjectAssistantDeleted:
		*s = DeleteAssistantResponseObjectAssistantDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DeleteFileResponse
type DeleteFileResponse struct {
	ID      string                   `json:"id"`
	Object  DeleteFileResponseObject `json:"object"`
	Deleted bool                     `json:"deleted"`
}

// GetID returns the value of ID.
func (s *DeleteFileResponse) GetID() string {
	return s.ID
}

// GetObject returns the value of Object.
func (s *DeleteFileResponse) GetObject() DeleteFileResponseObject {
	return s.Object
}

// GetDeleted returns the value of Deleted.
func (s *DeleteFileResponse) GetDeleted() bool {
	return s.Deleted
}

// SetID sets the value of ID.
func (s *DeleteFileResponse) SetID(val string) {
	s.ID = val
}

// SetObject sets the value of Object.
func (s *DeleteFileResponse) SetObject(val DeleteFileResponseObject) {
	s.Object = val
}

// SetDeleted sets the value of Deleted.
func (s *DeleteFileResponse) SetDeleted(val bool) {
	s.Deleted = val
}

type DeleteFileResponseObject string

const (
	DeleteFileResponseObjectFile DeleteFileResponseObject = "file"
)

// AllValues returns all DeleteFileResponseObject values.
func (DeleteFileResponseObject) AllValues() []DeleteFileResponseObject {
	return []DeleteFileResponseObject{
		DeleteFileResponseObjectFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeleteFileResponseObject) MarshalText() ([]byte, error) {
	switch s {
	case DeleteFileResponseObjectFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeleteFileResponseObject) UnmarshalText(data []byte) error {
	switch DeleteFileResponseObject(data) {
	case DeleteFileResponseObjectFile:
		*s = DeleteFileResponseObjectFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DeleteModelResponse
type DeleteModelResponse struct {
	ID      string `json:"id"`
	Deleted bool   `json:"deleted"`
	Object  string `json:"object"`
}

// GetID returns the value of ID.
func (s *DeleteModelResponse) GetID() string {
	return s.ID
}

// GetDeleted returns the value of Deleted.
func (s *DeleteModelResponse) GetDeleted() bool {
	return s.Deleted
}

// GetObject returns the value of Object.
func (s *DeleteModelResponse) GetObject() string {
	return s.Object
}

// SetID sets the value of ID.
func (s *DeleteModelResponse) SetID(val string) {
	s.ID = val
}

// SetDeleted sets the value of Deleted.
func (s *DeleteModelResponse) SetDeleted(val bool) {
	s.Deleted = val
}

// SetObject sets the value of Object.
func (s *DeleteModelResponse) SetObject(val string) {
	s.Object = val
}

// Ref: #/components/schemas/DeleteThreadResponse
type DeleteThreadResponse struct {
	ID      string                     `json:"id"`
	Deleted bool                       `json:"deleted"`
	Object  DeleteThreadResponseObject `json:"object"`
}

// GetID returns the value of ID.
func (s *DeleteThreadResponse) GetID() string {
	return s.ID
}

// GetDeleted returns the value of Deleted.
func (s *DeleteThreadResponse) GetDeleted() bool {
	return s.Deleted
}

// GetObject returns the value of Object.
func (s *DeleteThreadResponse) GetObject() DeleteThreadResponseObject {
	return s.Object
}

// SetID sets the value of ID.
func (s *DeleteThreadResponse) SetID(val string) {
	s.ID = val
}

// SetDeleted sets the value of Deleted.
func (s *DeleteThreadResponse) SetDeleted(val bool) {
	s.Deleted = val
}

// SetObject sets the value of Object.
func (s *DeleteThreadResponse) SetObject(val DeleteThreadResponseObject) {
	s.Object = val
}

type DeleteThreadResponseObject string

const (
	DeleteThreadResponseObjectThreadDeleted DeleteThreadResponseObject = "thread.deleted"
)

// AllValues returns all DeleteThreadResponseObject values.
func (DeleteThreadResponseObject) AllValues() []DeleteThreadResponseObject {
	return []DeleteThreadResponseObject{
		DeleteThreadResponseObjectThreadDeleted,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeleteThreadResponseObject) MarshalText() ([]byte, error) {
	switch s {
	case DeleteThreadResponseObjectThreadDeleted:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeleteThreadResponseObject) UnmarshalText(data []byte) error {
	switch DeleteThreadResponseObject(data) {
	case DeleteThreadResponseObjectThreadDeleted:
		*s = DeleteThreadResponseObjectThreadDeleted
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Error
type Error struct {
	Code    NilString `json:"code"`
	Message string    `json:"message"`
	Param   NilString `json:"param"`
	Type    string    `json:"type"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() NilString {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetParam returns the value of Param.
func (s *Error) GetParam() NilString {
	return s.Param
}

// GetType returns the value of Type.
func (s *Error) GetType() string {
	return s.Type
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val NilString) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetParam sets the value of Param.
func (s *Error) SetParam(val NilString) {
	s.Param = val
}

// SetType sets the value of Type.
func (s *Error) SetType(val string) {
	s.Type = val
}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	Error Error `json:"error"`
}

// GetError returns the value of Error.
func (s *ErrorResponse) GetError() Error {
	return s.Error
}

// SetError sets the value of Error.
func (s *ErrorResponse) SetError(val Error) {
	s.Error = val
}

// ErrorResponseStatusCode wraps ErrorResponse with StatusCode.
type ErrorResponseStatusCode struct {
	StatusCode int
	Response   ErrorResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorResponseStatusCode) GetResponse() ErrorResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorResponseStatusCode) SetResponse(val ErrorResponse) {
	s.Response = val
}

// The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.
// Ref: #/components/schemas/FineTuningJob
type FineTuningJob struct {
	// The object identifier, which can be referenced in the API endpoints.
	ID string `json:"id"`
	// The Unix timestamp (in seconds) for when the fine-tuning job was created.
	CreatedAt int `json:"created_at"`
	// For fine-tuning jobs that have `failed`, this will contain more information on the cause of the
	// failure.
	Error NilFineTuningJobError `json:"error"`
	// The name of the fine-tuned model that is being created. The value will be null if the fine-tuning
	// job is still running.
	FineTunedModel NilString `json:"fine_tuned_model"`
	// The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null
	// if the fine-tuning job is still running.
	FinishedAt NilInt `json:"finished_at"`
	// The hyperparameters used for the fine-tuning job. See the [fine-tuning
	// guide](/docs/guides/fine-tuning) for more details.
	Hyperparameters FineTuningJobHyperparameters `json:"hyperparameters"`
	// The base model that is being fine-tuned.
	Model string `json:"model"`
	// The object type, which is always "fine_tuning.job".
	Object FineTuningJobObject `json:"object"`
	// The organization that owns the fine-tuning job.
	OrganizationID string `json:"organization_id"`
	// The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the
	// [Files API](/docs/api-reference/files/retrieve-contents).
	ResultFiles []string `json:"result_files"`
	// The current status of the fine-tuning job, which can be either `validating_files`, `queued`,
	// `running`, `succeeded`, `failed`, or `cancelled`.
	Status FineTuningJobStatus `json:"status"`
	// The total number of billable tokens processed by this fine-tuning job. The value will be null if
	// the fine-tuning job is still running.
	TrainedTokens NilInt `json:"trained_tokens"`
	// The file ID used for training. You can retrieve the training data with the [Files
	// API](/docs/api-reference/files/retrieve-contents).
	TrainingFile string `json:"training_file"`
	// The file ID used for validation. You can retrieve the validation results with the [Files
	// API](/docs/api-reference/files/retrieve-contents).
	ValidationFile NilString `json:"validation_file"`
}

// GetID returns the value of ID.
func (s *FineTuningJob) GetID() string {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *FineTuningJob) GetCreatedAt() int {
	return s.CreatedAt
}

// GetError returns the value of Error.
func (s *FineTuningJob) GetError() NilFineTuningJobError {
	return s.Error
}

// GetFineTunedModel returns the value of FineTunedModel.
func (s *FineTuningJob) GetFineTunedModel() NilString {
	return s.FineTunedModel
}

// GetFinishedAt returns the value of FinishedAt.
func (s *FineTuningJob) GetFinishedAt() NilInt {
	return s.FinishedAt
}

// GetHyperparameters returns the value of Hyperparameters.
func (s *FineTuningJob) GetHyperparameters() FineTuningJobHyperparameters {
	return s.Hyperparameters
}

// GetModel returns the value of Model.
func (s *FineTuningJob) GetModel() string {
	return s.Model
}

// GetObject returns the value of Object.
func (s *FineTuningJob) GetObject() FineTuningJobObject {
	return s.Object
}

// GetOrganizationID returns the value of OrganizationID.
func (s *FineTuningJob) GetOrganizationID() string {
	return s.OrganizationID
}

// GetResultFiles returns the value of ResultFiles.
func (s *FineTuningJob) GetResultFiles() []string {
	return s.ResultFiles
}

// GetStatus returns the value of Status.
func (s *FineTuningJob) GetStatus() FineTuningJobStatus {
	return s.Status
}

// GetTrainedTokens returns the value of TrainedTokens.
func (s *FineTuningJob) GetTrainedTokens() NilInt {
	return s.TrainedTokens
}

// GetTrainingFile returns the value of TrainingFile.
func (s *FineTuningJob) GetTrainingFile() string {
	return s.TrainingFile
}

// GetValidationFile returns the value of ValidationFile.
func (s *FineTuningJob) GetValidationFile() NilString {
	return s.ValidationFile
}

// SetID sets the value of ID.
func (s *FineTuningJob) SetID(val string) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *FineTuningJob) SetCreatedAt(val int) {
	s.CreatedAt = val
}

// SetError sets the value of Error.
func (s *FineTuningJob) SetError(val NilFineTuningJobError) {
	s.Error = val
}

// SetFineTunedModel sets the value of FineTunedModel.
func (s *FineTuningJob) SetFineTunedModel(val NilString) {
	s.FineTunedModel = val
}

// SetFinishedAt sets the value of FinishedAt.
func (s *FineTuningJob) SetFinishedAt(val NilInt) {
	s.FinishedAt = val
}

// SetHyperparameters sets the value of Hyperparameters.
func (s *FineTuningJob) SetHyperparameters(val FineTuningJobHyperparameters) {
	s.Hyperparameters = val
}

// SetModel sets the value of Model.
func (s *FineTuningJob) SetModel(val string) {
	s.Model = val
}

// SetObject sets the value of Object.
func (s *FineTuningJob) SetObject(val FineTuningJobObject) {
	s.Object = val
}

// SetOrganizationID sets the value of OrganizationID.
func (s *FineTuningJob) SetOrganizationID(val string) {
	s.OrganizationID = val
}

// SetResultFiles sets the value of ResultFiles.
func (s *FineTuningJob) SetResultFiles(val []string) {
	s.ResultFiles = val
}

// SetStatus sets the value of Status.
func (s *FineTuningJob) SetStatus(val FineTuningJobStatus) {
	s.Status = val
}

// SetTrainedTokens sets the value of TrainedTokens.
func (s *FineTuningJob) SetTrainedTokens(val NilInt) {
	s.TrainedTokens = val
}

// SetTrainingFile sets the value of TrainingFile.
func (s *FineTuningJob) SetTrainingFile(val string) {
	s.TrainingFile = val
}

// SetValidationFile sets the value of ValidationFile.
func (s *FineTuningJob) SetValidationFile(val NilString) {
	s.ValidationFile = val
}

// For fine-tuning jobs that have `failed`, this will contain more information on the cause of the
// failure.
type FineTuningJobError struct {
	// A machine-readable error code.
	Code string `json:"code"`
	// A human-readable error message.
	Message string `json:"message"`
	// The parameter that was invalid, usually `training_file` or `validation_file`. This field will be
	// null if the failure was not parameter-specific.
	Param NilString `json:"param"`
}

// GetCode returns the value of Code.
func (s *FineTuningJobError) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *FineTuningJobError) GetMessage() string {
	return s.Message
}

// GetParam returns the value of Param.
func (s *FineTuningJobError) GetParam() NilString {
	return s.Param
}

// SetCode sets the value of Code.
func (s *FineTuningJobError) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *FineTuningJobError) SetMessage(val string) {
	s.Message = val
}

// SetParam sets the value of Param.
func (s *FineTuningJobError) SetParam(val NilString) {
	s.Param = val
}

// Fine-tuning job event object.
// Ref: #/components/schemas/FineTuningJobEvent
type FineTuningJobEvent struct {
	ID        string                   `json:"id"`
	CreatedAt int                      `json:"created_at"`
	Level     FineTuningJobEventLevel  `json:"level"`
	Message   string                   `json:"message"`
	Object    FineTuningJobEventObject `json:"object"`
}

// GetID returns the value of ID.
func (s *FineTuningJobEvent) GetID() string {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *FineTuningJobEvent) GetCreatedAt() int {
	return s.CreatedAt
}

// GetLevel returns the value of Level.
func (s *FineTuningJobEvent) GetLevel() FineTuningJobEventLevel {
	return s.Level
}

// GetMessage returns the value of Message.
func (s *FineTuningJobEvent) GetMessage() string {
	return s.Message
}

// GetObject returns the value of Object.
func (s *FineTuningJobEvent) GetObject() FineTuningJobEventObject {
	return s.Object
}

// SetID sets the value of ID.
func (s *FineTuningJobEvent) SetID(val string) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *FineTuningJobEvent) SetCreatedAt(val int) {
	s.CreatedAt = val
}

// SetLevel sets the value of Level.
func (s *FineTuningJobEvent) SetLevel(val FineTuningJobEventLevel) {
	s.Level = val
}

// SetMessage sets the value of Message.
func (s *FineTuningJobEvent) SetMessage(val string) {
	s.Message = val
}

// SetObject sets the value of Object.
func (s *FineTuningJobEvent) SetObject(val FineTuningJobEventObject) {
	s.Object = val
}

type FineTuningJobEventLevel string

const (
	FineTuningJobEventLevelInfo  FineTuningJobEventLevel = "info"
	FineTuningJobEventLevelWarn  FineTuningJobEventLevel = "warn"
	FineTuningJobEventLevelError FineTuningJobEventLevel = "error"
)

// AllValues returns all FineTuningJobEventLevel values.
func (FineTuningJobEventLevel) AllValues() []FineTuningJobEventLevel {
	return []FineTuningJobEventLevel{
		FineTuningJobEventLevelInfo,
		FineTuningJobEventLevelWarn,
		FineTuningJobEventLevelError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FineTuningJobEventLevel) MarshalText() ([]byte, error) {
	switch s {
	case FineTuningJobEventLevelInfo:
		return []byte(s), nil
	case FineTuningJobEventLevelWarn:
		return []byte(s), nil
	case FineTuningJobEventLevelError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FineTuningJobEventLevel) UnmarshalText(data []byte) error {
	switch FineTuningJobEventLevel(data) {
	case FineTuningJobEventLevelInfo:
		*s = FineTuningJobEventLevelInfo
		return nil
	case FineTuningJobEventLevelWarn:
		*s = FineTuningJobEventLevelWarn
		return nil
	case FineTuningJobEventLevelError:
		*s = FineTuningJobEventLevelError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FineTuningJobEventObject string

const (
	FineTuningJobEventObjectFineTuningJobEvent FineTuningJobEventObject = "fine_tuning.job.event"
)

// AllValues returns all FineTuningJobEventObject values.
func (FineTuningJobEventObject) AllValues() []FineTuningJobEventObject {
	return []FineTuningJobEventObject{
		FineTuningJobEventObjectFineTuningJobEvent,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FineTuningJobEventObject) MarshalText() ([]byte, error) {
	switch s {
	case FineTuningJobEventObjectFineTuningJobEvent:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FineTuningJobEventObject) UnmarshalText(data []byte) error {
	switch FineTuningJobEventObject(data) {
	case FineTuningJobEventObjectFineTuningJobEvent:
		*s = FineTuningJobEventObjectFineTuningJobEvent
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The hyperparameters used for the fine-tuning job. See the [fine-tuning
// guide](/docs/guides/fine-tuning) for more details.
type FineTuningJobHyperparameters struct {
	// The number of epochs to train the model for. An epoch refers to one full cycle through the
	// training dataset.
	// "auto" decides the optimal number of epochs based on the size of the dataset. If setting the
	// number manually, we support any number between 1 and 50 epochs.
	NEpochs FineTuningJobHyperparametersNEpochs `json:"n_epochs"`
}

// GetNEpochs returns the value of NEpochs.
func (s *FineTuningJobHyperparameters) GetNEpochs() FineTuningJobHyperparametersNEpochs {
	return s.NEpochs
}

// SetNEpochs sets the value of NEpochs.
func (s *FineTuningJobHyperparameters) SetNEpochs(val FineTuningJobHyperparametersNEpochs) {
	s.NEpochs = val
}

// The number of epochs to train the model for. An epoch refers to one full cycle through the
// training dataset.
// "auto" decides the optimal number of epochs based on the size of the dataset. If setting the
// number manually, we support any number between 1 and 50 epochs.
// FineTuningJobHyperparametersNEpochs represents sum type.
type FineTuningJobHyperparametersNEpochs struct {
	Type                                 FineTuningJobHyperparametersNEpochsType // switch on this field
	FineTuningJobHyperparametersNEpochs0 FineTuningJobHyperparametersNEpochs0
	Int                                  int
}

// FineTuningJobHyperparametersNEpochsType is oneOf type of FineTuningJobHyperparametersNEpochs.
type FineTuningJobHyperparametersNEpochsType string

// Possible values for FineTuningJobHyperparametersNEpochsType.
const (
	FineTuningJobHyperparametersNEpochs0FineTuningJobHyperparametersNEpochs FineTuningJobHyperparametersNEpochsType = "FineTuningJobHyperparametersNEpochs0"
	IntFineTuningJobHyperparametersNEpochs                                  FineTuningJobHyperparametersNEpochsType = "int"
)

// IsFineTuningJobHyperparametersNEpochs0 reports whether FineTuningJobHyperparametersNEpochs is FineTuningJobHyperparametersNEpochs0.
func (s FineTuningJobHyperparametersNEpochs) IsFineTuningJobHyperparametersNEpochs0() bool {
	return s.Type == FineTuningJobHyperparametersNEpochs0FineTuningJobHyperparametersNEpochs
}

// IsInt reports whether FineTuningJobHyperparametersNEpochs is int.
func (s FineTuningJobHyperparametersNEpochs) IsInt() bool {
	return s.Type == IntFineTuningJobHyperparametersNEpochs
}

// SetFineTuningJobHyperparametersNEpochs0 sets FineTuningJobHyperparametersNEpochs to FineTuningJobHyperparametersNEpochs0.
func (s *FineTuningJobHyperparametersNEpochs) SetFineTuningJobHyperparametersNEpochs0(v FineTuningJobHyperparametersNEpochs0) {
	s.Type = FineTuningJobHyperparametersNEpochs0FineTuningJobHyperparametersNEpochs
	s.FineTuningJobHyperparametersNEpochs0 = v
}

// GetFineTuningJobHyperparametersNEpochs0 returns FineTuningJobHyperparametersNEpochs0 and true boolean if FineTuningJobHyperparametersNEpochs is FineTuningJobHyperparametersNEpochs0.
func (s FineTuningJobHyperparametersNEpochs) GetFineTuningJobHyperparametersNEpochs0() (v FineTuningJobHyperparametersNEpochs0, ok bool) {
	if !s.IsFineTuningJobHyperparametersNEpochs0() {
		return v, false
	}
	return s.FineTuningJobHyperparametersNEpochs0, true
}

// NewFineTuningJobHyperparametersNEpochs0FineTuningJobHyperparametersNEpochs returns new FineTuningJobHyperparametersNEpochs from FineTuningJobHyperparametersNEpochs0.
func NewFineTuningJobHyperparametersNEpochs0FineTuningJobHyperparametersNEpochs(v FineTuningJobHyperparametersNEpochs0) FineTuningJobHyperparametersNEpochs {
	var s FineTuningJobHyperparametersNEpochs
	s.SetFineTuningJobHyperparametersNEpochs0(v)
	return s
}

// SetInt sets FineTuningJobHyperparametersNEpochs to int.
func (s *FineTuningJobHyperparametersNEpochs) SetInt(v int) {
	s.Type = IntFineTuningJobHyperparametersNEpochs
	s.Int = v
}

// GetInt returns int and true boolean if FineTuningJobHyperparametersNEpochs is int.
func (s FineTuningJobHyperparametersNEpochs) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntFineTuningJobHyperparametersNEpochs returns new FineTuningJobHyperparametersNEpochs from int.
func NewIntFineTuningJobHyperparametersNEpochs(v int) FineTuningJobHyperparametersNEpochs {
	var s FineTuningJobHyperparametersNEpochs
	s.SetInt(v)
	return s
}

type FineTuningJobHyperparametersNEpochs0 string

const (
	FineTuningJobHyperparametersNEpochs0Auto FineTuningJobHyperparametersNEpochs0 = "auto"
)

// AllValues returns all FineTuningJobHyperparametersNEpochs0 values.
func (FineTuningJobHyperparametersNEpochs0) AllValues() []FineTuningJobHyperparametersNEpochs0 {
	return []FineTuningJobHyperparametersNEpochs0{
		FineTuningJobHyperparametersNEpochs0Auto,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FineTuningJobHyperparametersNEpochs0) MarshalText() ([]byte, error) {
	switch s {
	case FineTuningJobHyperparametersNEpochs0Auto:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FineTuningJobHyperparametersNEpochs0) UnmarshalText(data []byte) error {
	switch FineTuningJobHyperparametersNEpochs0(data) {
	case FineTuningJobHyperparametersNEpochs0Auto:
		*s = FineTuningJobHyperparametersNEpochs0Auto
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The object type, which is always "fine_tuning.job".
type FineTuningJobObject string

const (
	FineTuningJobObjectFineTuningJob FineTuningJobObject = "fine_tuning.job"
)

// AllValues returns all FineTuningJobObject values.
func (FineTuningJobObject) AllValues() []FineTuningJobObject {
	return []FineTuningJobObject{
		FineTuningJobObjectFineTuningJob,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FineTuningJobObject) MarshalText() ([]byte, error) {
	switch s {
	case FineTuningJobObjectFineTuningJob:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FineTuningJobObject) UnmarshalText(data []byte) error {
	switch FineTuningJobObject(data) {
	case FineTuningJobObjectFineTuningJob:
		*s = FineTuningJobObjectFineTuningJob
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The current status of the fine-tuning job, which can be either `validating_files`, `queued`,
// `running`, `succeeded`, `failed`, or `cancelled`.
type FineTuningJobStatus string

const (
	FineTuningJobStatusValidatingFiles FineTuningJobStatus = "validating_files"
	FineTuningJobStatusQueued          FineTuningJobStatus = "queued"
	FineTuningJobStatusRunning         FineTuningJobStatus = "running"
	FineTuningJobStatusSucceeded       FineTuningJobStatus = "succeeded"
	FineTuningJobStatusFailed          FineTuningJobStatus = "failed"
	FineTuningJobStatusCancelled       FineTuningJobStatus = "cancelled"
)

// AllValues returns all FineTuningJobStatus values.
func (FineTuningJobStatus) AllValues() []FineTuningJobStatus {
	return []FineTuningJobStatus{
		FineTuningJobStatusValidatingFiles,
		FineTuningJobStatusQueued,
		FineTuningJobStatusRunning,
		FineTuningJobStatusSucceeded,
		FineTuningJobStatusFailed,
		FineTuningJobStatusCancelled,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s FineTuningJobStatus) MarshalText() ([]byte, error) {
	switch s {
	case FineTuningJobStatusValidatingFiles:
		return []byte(s), nil
	case FineTuningJobStatusQueued:
		return []byte(s), nil
	case FineTuningJobStatusRunning:
		return []byte(s), nil
	case FineTuningJobStatusSucceeded:
		return []byte(s), nil
	case FineTuningJobStatusFailed:
		return []byte(s), nil
	case FineTuningJobStatusCancelled:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FineTuningJobStatus) UnmarshalText(data []byte) error {
	switch FineTuningJobStatus(data) {
	case FineTuningJobStatusValidatingFiles:
		*s = FineTuningJobStatusValidatingFiles
		return nil
	case FineTuningJobStatusQueued:
		*s = FineTuningJobStatusQueued
		return nil
	case FineTuningJobStatusRunning:
		*s = FineTuningJobStatusRunning
		return nil
	case FineTuningJobStatusSucceeded:
		*s = FineTuningJobStatusSucceeded
		return nil
	case FineTuningJobStatusFailed:
		*s = FineTuningJobStatusFailed
		return nil
	case FineTuningJobStatusCancelled:
		*s = FineTuningJobStatusCancelled
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/FunctionObject
type FunctionObject struct {
	// A description of what the function does, used by the model to choose when and how to call the
	// function.
	Description OptString `json:"description"`
	// The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes,
	// with a maximum length of 64.
	Name       string                `json:"name"`
	Parameters OptFunctionParameters `json:"parameters"`
}

// GetDescription returns the value of Description.
func (s *FunctionObject) GetDescription() OptString {
	return s.Description
}

// GetName returns the value of Name.
func (s *FunctionObject) GetName() string {
	return s.Name
}

// GetParameters returns the value of Parameters.
func (s *FunctionObject) GetParameters() OptFunctionParameters {
	return s.Parameters
}

// SetDescription sets the value of Description.
func (s *FunctionObject) SetDescription(val OptString) {
	s.Description = val
}

// SetName sets the value of Name.
func (s *FunctionObject) SetName(val string) {
	s.Name = val
}

// SetParameters sets the value of Parameters.
func (s *FunctionObject) SetParameters(val OptFunctionParameters) {
	s.Parameters = val
}

// The parameters the functions accepts, described as a JSON Schema object. See the
// [guide](/docs/guides/text-generation/function-calling) for examples, and the [JSON Schema
// reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.
// Omitting `parameters` defines a function with an empty parameter list.
// Ref: #/components/schemas/FunctionParameters
type FunctionParameters map[string]jx.Raw

func (s *FunctionParameters) init() FunctionParameters {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Represents the url or the content of an image generated by the OpenAI API.
// Ref: #/components/schemas/Image
type Image struct {
	// The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
	B64JSON OptString `json:"b64_json"`
	// The URL of the generated image, if `response_format` is `url` (default).
	URL OptString `json:"url"`
	// The prompt that was used to generate the image, if there was any revision to the prompt.
	RevisedPrompt OptString `json:"revised_prompt"`
}

// GetB64JSON returns the value of B64JSON.
func (s *Image) GetB64JSON() OptString {
	return s.B64JSON
}

// GetURL returns the value of URL.
func (s *Image) GetURL() OptString {
	return s.URL
}

// GetRevisedPrompt returns the value of RevisedPrompt.
func (s *Image) GetRevisedPrompt() OptString {
	return s.RevisedPrompt
}

// SetB64JSON sets the value of B64JSON.
func (s *Image) SetB64JSON(val OptString) {
	s.B64JSON = val
}

// SetURL sets the value of URL.
func (s *Image) SetURL(val OptString) {
	s.URL = val
}

// SetRevisedPrompt sets the value of RevisedPrompt.
func (s *Image) SetRevisedPrompt(val OptString) {
	s.RevisedPrompt = val
}

// Ref: #/components/schemas/ImagesResponse
type ImagesResponse struct {
	Created int     `json:"created"`
	Data    []Image `json:"data"`
}

// GetCreated returns the value of Created.
func (s *ImagesResponse) GetCreated() int {
	return s.Created
}

// GetData returns the value of Data.
func (s *ImagesResponse) GetData() []Image {
	return s.Data
}

// SetCreated sets the value of Created.
func (s *ImagesResponse) SetCreated(val int) {
	s.Created = val
}

// SetData sets the value of Data.
func (s *ImagesResponse) SetData(val []Image) {
	s.Data = val
}

type ListAssistantFilesOrder string

const (
	ListAssistantFilesOrderAsc  ListAssistantFilesOrder = "asc"
	ListAssistantFilesOrderDesc ListAssistantFilesOrder = "desc"
)

// AllValues returns all ListAssistantFilesOrder values.
func (ListAssistantFilesOrder) AllValues() []ListAssistantFilesOrder {
	return []ListAssistantFilesOrder{
		ListAssistantFilesOrderAsc,
		ListAssistantFilesOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListAssistantFilesOrder) MarshalText() ([]byte, error) {
	switch s {
	case ListAssistantFilesOrderAsc:
		return []byte(s), nil
	case ListAssistantFilesOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListAssistantFilesOrder) UnmarshalText(data []byte) error {
	switch ListAssistantFilesOrder(data) {
	case ListAssistantFilesOrderAsc:
		*s = ListAssistantFilesOrderAsc
		return nil
	case ListAssistantFilesOrderDesc:
		*s = ListAssistantFilesOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ListAssistantFilesResponse
type ListAssistantFilesResponse struct {
	Object  string                `json:"object"`
	Data    []AssistantFileObject `json:"data"`
	FirstID string                `json:"first_id"`
	LastID  string                `json:"last_id"`
	HasMore bool                  `json:"has_more"`
}

// GetObject returns the value of Object.
func (s *ListAssistantFilesResponse) GetObject() string {
	return s.Object
}

// GetData returns the value of Data.
func (s *ListAssistantFilesResponse) GetData() []AssistantFileObject {
	return s.Data
}

// GetFirstID returns the value of FirstID.
func (s *ListAssistantFilesResponse) GetFirstID() string {
	return s.FirstID
}

// GetLastID returns the value of LastID.
func (s *ListAssistantFilesResponse) GetLastID() string {
	return s.LastID
}

// GetHasMore returns the value of HasMore.
func (s *ListAssistantFilesResponse) GetHasMore() bool {
	return s.HasMore
}

// SetObject sets the value of Object.
func (s *ListAssistantFilesResponse) SetObject(val string) {
	s.Object = val
}

// SetData sets the value of Data.
func (s *ListAssistantFilesResponse) SetData(val []AssistantFileObject) {
	s.Data = val
}

// SetFirstID sets the value of FirstID.
func (s *ListAssistantFilesResponse) SetFirstID(val string) {
	s.FirstID = val
}

// SetLastID sets the value of LastID.
func (s *ListAssistantFilesResponse) SetLastID(val string) {
	s.LastID = val
}

// SetHasMore sets the value of HasMore.
func (s *ListAssistantFilesResponse) SetHasMore(val bool) {
	s.HasMore = val
}

type ListAssistantsOrder string

const (
	ListAssistantsOrderAsc  ListAssistantsOrder = "asc"
	ListAssistantsOrderDesc ListAssistantsOrder = "desc"
)

// AllValues returns all ListAssistantsOrder values.
func (ListAssistantsOrder) AllValues() []ListAssistantsOrder {
	return []ListAssistantsOrder{
		ListAssistantsOrderAsc,
		ListAssistantsOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListAssistantsOrder) MarshalText() ([]byte, error) {
	switch s {
	case ListAssistantsOrderAsc:
		return []byte(s), nil
	case ListAssistantsOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListAssistantsOrder) UnmarshalText(data []byte) error {
	switch ListAssistantsOrder(data) {
	case ListAssistantsOrderAsc:
		*s = ListAssistantsOrderAsc
		return nil
	case ListAssistantsOrderDesc:
		*s = ListAssistantsOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ListAssistantsResponse
type ListAssistantsResponse struct {
	Object  string            `json:"object"`
	Data    []AssistantObject `json:"data"`
	FirstID string            `json:"first_id"`
	LastID  string            `json:"last_id"`
	HasMore bool              `json:"has_more"`
}

// GetObject returns the value of Object.
func (s *ListAssistantsResponse) GetObject() string {
	return s.Object
}

// GetData returns the value of Data.
func (s *ListAssistantsResponse) GetData() []AssistantObject {
	return s.Data
}

// GetFirstID returns the value of FirstID.
func (s *ListAssistantsResponse) GetFirstID() string {
	return s.FirstID
}

// GetLastID returns the value of LastID.
func (s *ListAssistantsResponse) GetLastID() string {
	return s.LastID
}

// GetHasMore returns the value of HasMore.
func (s *ListAssistantsResponse) GetHasMore() bool {
	return s.HasMore
}

// SetObject sets the value of Object.
func (s *ListAssistantsResponse) SetObject(val string) {
	s.Object = val
}

// SetData sets the value of Data.
func (s *ListAssistantsResponse) SetData(val []AssistantObject) {
	s.Data = val
}

// SetFirstID sets the value of FirstID.
func (s *ListAssistantsResponse) SetFirstID(val string) {
	s.FirstID = val
}

// SetLastID sets the value of LastID.
func (s *ListAssistantsResponse) SetLastID(val string) {
	s.LastID = val
}

// SetHasMore sets the value of HasMore.
func (s *ListAssistantsResponse) SetHasMore(val bool) {
	s.HasMore = val
}

// Ref: #/components/schemas/ListFilesResponse
type ListFilesResponse struct {
	Data   []OpenAIFile            `json:"data"`
	Object ListFilesResponseObject `json:"object"`
}

// GetData returns the value of Data.
func (s *ListFilesResponse) GetData() []OpenAIFile {
	return s.Data
}

// GetObject returns the value of Object.
func (s *ListFilesResponse) GetObject() ListFilesResponseObject {
	return s.Object
}

// SetData sets the value of Data.
func (s *ListFilesResponse) SetData(val []OpenAIFile) {
	s.Data = val
}

// SetObject sets the value of Object.
func (s *ListFilesResponse) SetObject(val ListFilesResponseObject) {
	s.Object = val
}

type ListFilesResponseObject string

const (
	ListFilesResponseObjectList ListFilesResponseObject = "list"
)

// AllValues returns all ListFilesResponseObject values.
func (ListFilesResponseObject) AllValues() []ListFilesResponseObject {
	return []ListFilesResponseObject{
		ListFilesResponseObjectList,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListFilesResponseObject) MarshalText() ([]byte, error) {
	switch s {
	case ListFilesResponseObjectList:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListFilesResponseObject) UnmarshalText(data []byte) error {
	switch ListFilesResponseObject(data) {
	case ListFilesResponseObjectList:
		*s = ListFilesResponseObjectList
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ListFineTuningJobEventsResponse
type ListFineTuningJobEventsResponse struct {
	Data   []FineTuningJobEvent                  `json:"data"`
	Object ListFineTuningJobEventsResponseObject `json:"object"`
}

// GetData returns the value of Data.
func (s *ListFineTuningJobEventsResponse) GetData() []FineTuningJobEvent {
	return s.Data
}

// GetObject returns the value of Object.
func (s *ListFineTuningJobEventsResponse) GetObject() ListFineTuningJobEventsResponseObject {
	return s.Object
}

// SetData sets the value of Data.
func (s *ListFineTuningJobEventsResponse) SetData(val []FineTuningJobEvent) {
	s.Data = val
}

// SetObject sets the value of Object.
func (s *ListFineTuningJobEventsResponse) SetObject(val ListFineTuningJobEventsResponseObject) {
	s.Object = val
}

type ListFineTuningJobEventsResponseObject string

const (
	ListFineTuningJobEventsResponseObjectList ListFineTuningJobEventsResponseObject = "list"
)

// AllValues returns all ListFineTuningJobEventsResponseObject values.
func (ListFineTuningJobEventsResponseObject) AllValues() []ListFineTuningJobEventsResponseObject {
	return []ListFineTuningJobEventsResponseObject{
		ListFineTuningJobEventsResponseObjectList,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListFineTuningJobEventsResponseObject) MarshalText() ([]byte, error) {
	switch s {
	case ListFineTuningJobEventsResponseObjectList:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListFineTuningJobEventsResponseObject) UnmarshalText(data []byte) error {
	switch ListFineTuningJobEventsResponseObject(data) {
	case ListFineTuningJobEventsResponseObjectList:
		*s = ListFineTuningJobEventsResponseObjectList
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListMessageFilesOrder string

const (
	ListMessageFilesOrderAsc  ListMessageFilesOrder = "asc"
	ListMessageFilesOrderDesc ListMessageFilesOrder = "desc"
)

// AllValues returns all ListMessageFilesOrder values.
func (ListMessageFilesOrder) AllValues() []ListMessageFilesOrder {
	return []ListMessageFilesOrder{
		ListMessageFilesOrderAsc,
		ListMessageFilesOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListMessageFilesOrder) MarshalText() ([]byte, error) {
	switch s {
	case ListMessageFilesOrderAsc:
		return []byte(s), nil
	case ListMessageFilesOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListMessageFilesOrder) UnmarshalText(data []byte) error {
	switch ListMessageFilesOrder(data) {
	case ListMessageFilesOrderAsc:
		*s = ListMessageFilesOrderAsc
		return nil
	case ListMessageFilesOrderDesc:
		*s = ListMessageFilesOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ListMessageFilesResponse
type ListMessageFilesResponse struct {
	Object  string              `json:"object"`
	Data    []MessageFileObject `json:"data"`
	FirstID string              `json:"first_id"`
	LastID  string              `json:"last_id"`
	HasMore bool                `json:"has_more"`
}

// GetObject returns the value of Object.
func (s *ListMessageFilesResponse) GetObject() string {
	return s.Object
}

// GetData returns the value of Data.
func (s *ListMessageFilesResponse) GetData() []MessageFileObject {
	return s.Data
}

// GetFirstID returns the value of FirstID.
func (s *ListMessageFilesResponse) GetFirstID() string {
	return s.FirstID
}

// GetLastID returns the value of LastID.
func (s *ListMessageFilesResponse) GetLastID() string {
	return s.LastID
}

// GetHasMore returns the value of HasMore.
func (s *ListMessageFilesResponse) GetHasMore() bool {
	return s.HasMore
}

// SetObject sets the value of Object.
func (s *ListMessageFilesResponse) SetObject(val string) {
	s.Object = val
}

// SetData sets the value of Data.
func (s *ListMessageFilesResponse) SetData(val []MessageFileObject) {
	s.Data = val
}

// SetFirstID sets the value of FirstID.
func (s *ListMessageFilesResponse) SetFirstID(val string) {
	s.FirstID = val
}

// SetLastID sets the value of LastID.
func (s *ListMessageFilesResponse) SetLastID(val string) {
	s.LastID = val
}

// SetHasMore sets the value of HasMore.
func (s *ListMessageFilesResponse) SetHasMore(val bool) {
	s.HasMore = val
}

type ListMessagesOrder string

const (
	ListMessagesOrderAsc  ListMessagesOrder = "asc"
	ListMessagesOrderDesc ListMessagesOrder = "desc"
)

// AllValues returns all ListMessagesOrder values.
func (ListMessagesOrder) AllValues() []ListMessagesOrder {
	return []ListMessagesOrder{
		ListMessagesOrderAsc,
		ListMessagesOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListMessagesOrder) MarshalText() ([]byte, error) {
	switch s {
	case ListMessagesOrderAsc:
		return []byte(s), nil
	case ListMessagesOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListMessagesOrder) UnmarshalText(data []byte) error {
	switch ListMessagesOrder(data) {
	case ListMessagesOrderAsc:
		*s = ListMessagesOrderAsc
		return nil
	case ListMessagesOrderDesc:
		*s = ListMessagesOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ListMessagesResponse
type ListMessagesResponse struct {
	Object  string          `json:"object"`
	Data    []MessageObject `json:"data"`
	FirstID string          `json:"first_id"`
	LastID  string          `json:"last_id"`
	HasMore bool            `json:"has_more"`
}

// GetObject returns the value of Object.
func (s *ListMessagesResponse) GetObject() string {
	return s.Object
}

// GetData returns the value of Data.
func (s *ListMessagesResponse) GetData() []MessageObject {
	return s.Data
}

// GetFirstID returns the value of FirstID.
func (s *ListMessagesResponse) GetFirstID() string {
	return s.FirstID
}

// GetLastID returns the value of LastID.
func (s *ListMessagesResponse) GetLastID() string {
	return s.LastID
}

// GetHasMore returns the value of HasMore.
func (s *ListMessagesResponse) GetHasMore() bool {
	return s.HasMore
}

// SetObject sets the value of Object.
func (s *ListMessagesResponse) SetObject(val string) {
	s.Object = val
}

// SetData sets the value of Data.
func (s *ListMessagesResponse) SetData(val []MessageObject) {
	s.Data = val
}

// SetFirstID sets the value of FirstID.
func (s *ListMessagesResponse) SetFirstID(val string) {
	s.FirstID = val
}

// SetLastID sets the value of LastID.
func (s *ListMessagesResponse) SetLastID(val string) {
	s.LastID = val
}

// SetHasMore sets the value of HasMore.
func (s *ListMessagesResponse) SetHasMore(val bool) {
	s.HasMore = val
}

// Ref: #/components/schemas/ListModelsResponse
type ListModelsResponse struct {
	Object ListModelsResponseObject `json:"object"`
	Data   []Model                  `json:"data"`
}

// GetObject returns the value of Object.
func (s *ListModelsResponse) GetObject() ListModelsResponseObject {
	return s.Object
}

// GetData returns the value of Data.
func (s *ListModelsResponse) GetData() []Model {
	return s.Data
}

// SetObject sets the value of Object.
func (s *ListModelsResponse) SetObject(val ListModelsResponseObject) {
	s.Object = val
}

// SetData sets the value of Data.
func (s *ListModelsResponse) SetData(val []Model) {
	s.Data = val
}

type ListModelsResponseObject string

const (
	ListModelsResponseObjectList ListModelsResponseObject = "list"
)

// AllValues returns all ListModelsResponseObject values.
func (ListModelsResponseObject) AllValues() []ListModelsResponseObject {
	return []ListModelsResponseObject{
		ListModelsResponseObjectList,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListModelsResponseObject) MarshalText() ([]byte, error) {
	switch s {
	case ListModelsResponseObjectList:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListModelsResponseObject) UnmarshalText(data []byte) error {
	switch ListModelsResponseObject(data) {
	case ListModelsResponseObjectList:
		*s = ListModelsResponseObjectList
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ListPaginatedFineTuningJobsResponse
type ListPaginatedFineTuningJobsResponse struct {
	Data    []FineTuningJob                           `json:"data"`
	HasMore bool                                      `json:"has_more"`
	Object  ListPaginatedFineTuningJobsResponseObject `json:"object"`
}

// GetData returns the value of Data.
func (s *ListPaginatedFineTuningJobsResponse) GetData() []FineTuningJob {
	return s.Data
}

// GetHasMore returns the value of HasMore.
func (s *ListPaginatedFineTuningJobsResponse) GetHasMore() bool {
	return s.HasMore
}

// GetObject returns the value of Object.
func (s *ListPaginatedFineTuningJobsResponse) GetObject() ListPaginatedFineTuningJobsResponseObject {
	return s.Object
}

// SetData sets the value of Data.
func (s *ListPaginatedFineTuningJobsResponse) SetData(val []FineTuningJob) {
	s.Data = val
}

// SetHasMore sets the value of HasMore.
func (s *ListPaginatedFineTuningJobsResponse) SetHasMore(val bool) {
	s.HasMore = val
}

// SetObject sets the value of Object.
func (s *ListPaginatedFineTuningJobsResponse) SetObject(val ListPaginatedFineTuningJobsResponseObject) {
	s.Object = val
}

type ListPaginatedFineTuningJobsResponseObject string

const (
	ListPaginatedFineTuningJobsResponseObjectList ListPaginatedFineTuningJobsResponseObject = "list"
)

// AllValues returns all ListPaginatedFineTuningJobsResponseObject values.
func (ListPaginatedFineTuningJobsResponseObject) AllValues() []ListPaginatedFineTuningJobsResponseObject {
	return []ListPaginatedFineTuningJobsResponseObject{
		ListPaginatedFineTuningJobsResponseObjectList,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListPaginatedFineTuningJobsResponseObject) MarshalText() ([]byte, error) {
	switch s {
	case ListPaginatedFineTuningJobsResponseObjectList:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListPaginatedFineTuningJobsResponseObject) UnmarshalText(data []byte) error {
	switch ListPaginatedFineTuningJobsResponseObject(data) {
	case ListPaginatedFineTuningJobsResponseObjectList:
		*s = ListPaginatedFineTuningJobsResponseObjectList
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type ListRunStepsOrder string

const (
	ListRunStepsOrderAsc  ListRunStepsOrder = "asc"
	ListRunStepsOrderDesc ListRunStepsOrder = "desc"
)

// AllValues returns all ListRunStepsOrder values.
func (ListRunStepsOrder) AllValues() []ListRunStepsOrder {
	return []ListRunStepsOrder{
		ListRunStepsOrderAsc,
		ListRunStepsOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListRunStepsOrder) MarshalText() ([]byte, error) {
	switch s {
	case ListRunStepsOrderAsc:
		return []byte(s), nil
	case ListRunStepsOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListRunStepsOrder) UnmarshalText(data []byte) error {
	switch ListRunStepsOrder(data) {
	case ListRunStepsOrderAsc:
		*s = ListRunStepsOrderAsc
		return nil
	case ListRunStepsOrderDesc:
		*s = ListRunStepsOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ListRunStepsResponse
type ListRunStepsResponse struct {
	Object  string          `json:"object"`
	Data    []RunStepObject `json:"data"`
	FirstID string          `json:"first_id"`
	LastID  string          `json:"last_id"`
	HasMore bool            `json:"has_more"`
}

// GetObject returns the value of Object.
func (s *ListRunStepsResponse) GetObject() string {
	return s.Object
}

// GetData returns the value of Data.
func (s *ListRunStepsResponse) GetData() []RunStepObject {
	return s.Data
}

// GetFirstID returns the value of FirstID.
func (s *ListRunStepsResponse) GetFirstID() string {
	return s.FirstID
}

// GetLastID returns the value of LastID.
func (s *ListRunStepsResponse) GetLastID() string {
	return s.LastID
}

// GetHasMore returns the value of HasMore.
func (s *ListRunStepsResponse) GetHasMore() bool {
	return s.HasMore
}

// SetObject sets the value of Object.
func (s *ListRunStepsResponse) SetObject(val string) {
	s.Object = val
}

// SetData sets the value of Data.
func (s *ListRunStepsResponse) SetData(val []RunStepObject) {
	s.Data = val
}

// SetFirstID sets the value of FirstID.
func (s *ListRunStepsResponse) SetFirstID(val string) {
	s.FirstID = val
}

// SetLastID sets the value of LastID.
func (s *ListRunStepsResponse) SetLastID(val string) {
	s.LastID = val
}

// SetHasMore sets the value of HasMore.
func (s *ListRunStepsResponse) SetHasMore(val bool) {
	s.HasMore = val
}

type ListRunsOrder string

const (
	ListRunsOrderAsc  ListRunsOrder = "asc"
	ListRunsOrderDesc ListRunsOrder = "desc"
)

// AllValues returns all ListRunsOrder values.
func (ListRunsOrder) AllValues() []ListRunsOrder {
	return []ListRunsOrder{
		ListRunsOrderAsc,
		ListRunsOrderDesc,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ListRunsOrder) MarshalText() ([]byte, error) {
	switch s {
	case ListRunsOrderAsc:
		return []byte(s), nil
	case ListRunsOrderDesc:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ListRunsOrder) UnmarshalText(data []byte) error {
	switch ListRunsOrder(data) {
	case ListRunsOrderAsc:
		*s = ListRunsOrderAsc
		return nil
	case ListRunsOrderDesc:
		*s = ListRunsOrderDesc
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ListRunsResponse
type ListRunsResponse struct {
	Object  string      `json:"object"`
	Data    []RunObject `json:"data"`
	FirstID string      `json:"first_id"`
	LastID  string      `json:"last_id"`
	HasMore bool        `json:"has_more"`
}

// GetObject returns the value of Object.
func (s *ListRunsResponse) GetObject() string {
	return s.Object
}

// GetData returns the value of Data.
func (s *ListRunsResponse) GetData() []RunObject {
	return s.Data
}

// GetFirstID returns the value of FirstID.
func (s *ListRunsResponse) GetFirstID() string {
	return s.FirstID
}

// GetLastID returns the value of LastID.
func (s *ListRunsResponse) GetLastID() string {
	return s.LastID
}

// GetHasMore returns the value of HasMore.
func (s *ListRunsResponse) GetHasMore() bool {
	return s.HasMore
}

// SetObject sets the value of Object.
func (s *ListRunsResponse) SetObject(val string) {
	s.Object = val
}

// SetData sets the value of Data.
func (s *ListRunsResponse) SetData(val []RunObject) {
	s.Data = val
}

// SetFirstID sets the value of FirstID.
func (s *ListRunsResponse) SetFirstID(val string) {
	s.FirstID = val
}

// SetLastID sets the value of LastID.
func (s *ListRunsResponse) SetLastID(val string) {
	s.LastID = val
}

// SetHasMore sets the value of HasMore.
func (s *ListRunsResponse) SetHasMore(val bool) {
	s.HasMore = val
}

// References an image [File](/docs/api-reference/files) in the content of a message.
// Ref: #/components/schemas/MessageContentImageFileObject
type MessageContentImageFileObject struct {
	// Always `image_file`.
	Type      MessageContentImageFileObjectType      `json:"type"`
	ImageFile MessageContentImageFileObjectImageFile `json:"image_file"`
}

// GetType returns the value of Type.
func (s *MessageContentImageFileObject) GetType() MessageContentImageFileObjectType {
	return s.Type
}

// GetImageFile returns the value of ImageFile.
func (s *MessageContentImageFileObject) GetImageFile() MessageContentImageFileObjectImageFile {
	return s.ImageFile
}

// SetType sets the value of Type.
func (s *MessageContentImageFileObject) SetType(val MessageContentImageFileObjectType) {
	s.Type = val
}

// SetImageFile sets the value of ImageFile.
func (s *MessageContentImageFileObject) SetImageFile(val MessageContentImageFileObjectImageFile) {
	s.ImageFile = val
}

type MessageContentImageFileObjectImageFile struct {
	// The [File](/docs/api-reference/files) ID of the image in the message content.
	FileID string `json:"file_id"`
}

// GetFileID returns the value of FileID.
func (s *MessageContentImageFileObjectImageFile) GetFileID() string {
	return s.FileID
}

// SetFileID sets the value of FileID.
func (s *MessageContentImageFileObjectImageFile) SetFileID(val string) {
	s.FileID = val
}

// Always `image_file`.
type MessageContentImageFileObjectType string

const (
	MessageContentImageFileObjectTypeImageFile MessageContentImageFileObjectType = "image_file"
)

// AllValues returns all MessageContentImageFileObjectType values.
func (MessageContentImageFileObjectType) AllValues() []MessageContentImageFileObjectType {
	return []MessageContentImageFileObjectType{
		MessageContentImageFileObjectTypeImageFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageContentImageFileObjectType) MarshalText() ([]byte, error) {
	switch s {
	case MessageContentImageFileObjectTypeImageFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageContentImageFileObjectType) UnmarshalText(data []byte) error {
	switch MessageContentImageFileObjectType(data) {
	case MessageContentImageFileObjectTypeImageFile:
		*s = MessageContentImageFileObjectTypeImageFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A citation within the message that points to a specific quote from a specific File associated with
// the assistant or the message. Generated when the assistant uses the "retrieval" tool to search
// files.
// Ref: #/components/schemas/MessageContentTextAnnotationsFileCitationObject
type MessageContentTextAnnotationsFileCitationObject struct {
	// Always `file_citation`.
	Type MessageContentTextAnnotationsFileCitationObjectType `json:"type"`
	// The text in the message content that needs to be replaced.
	Text         string                                                      `json:"text"`
	FileCitation MessageContentTextAnnotationsFileCitationObjectFileCitation `json:"file_citation"`
	StartIndex   int                                                         `json:"start_index"`
	EndIndex     int                                                         `json:"end_index"`
}

// GetType returns the value of Type.
func (s *MessageContentTextAnnotationsFileCitationObject) GetType() MessageContentTextAnnotationsFileCitationObjectType {
	return s.Type
}

// GetText returns the value of Text.
func (s *MessageContentTextAnnotationsFileCitationObject) GetText() string {
	return s.Text
}

// GetFileCitation returns the value of FileCitation.
func (s *MessageContentTextAnnotationsFileCitationObject) GetFileCitation() MessageContentTextAnnotationsFileCitationObjectFileCitation {
	return s.FileCitation
}

// GetStartIndex returns the value of StartIndex.
func (s *MessageContentTextAnnotationsFileCitationObject) GetStartIndex() int {
	return s.StartIndex
}

// GetEndIndex returns the value of EndIndex.
func (s *MessageContentTextAnnotationsFileCitationObject) GetEndIndex() int {
	return s.EndIndex
}

// SetType sets the value of Type.
func (s *MessageContentTextAnnotationsFileCitationObject) SetType(val MessageContentTextAnnotationsFileCitationObjectType) {
	s.Type = val
}

// SetText sets the value of Text.
func (s *MessageContentTextAnnotationsFileCitationObject) SetText(val string) {
	s.Text = val
}

// SetFileCitation sets the value of FileCitation.
func (s *MessageContentTextAnnotationsFileCitationObject) SetFileCitation(val MessageContentTextAnnotationsFileCitationObjectFileCitation) {
	s.FileCitation = val
}

// SetStartIndex sets the value of StartIndex.
func (s *MessageContentTextAnnotationsFileCitationObject) SetStartIndex(val int) {
	s.StartIndex = val
}

// SetEndIndex sets the value of EndIndex.
func (s *MessageContentTextAnnotationsFileCitationObject) SetEndIndex(val int) {
	s.EndIndex = val
}

type MessageContentTextAnnotationsFileCitationObjectFileCitation struct {
	// The ID of the specific File the citation is from.
	FileID string `json:"file_id"`
	// The specific quote in the file.
	Quote string `json:"quote"`
}

// GetFileID returns the value of FileID.
func (s *MessageContentTextAnnotationsFileCitationObjectFileCitation) GetFileID() string {
	return s.FileID
}

// GetQuote returns the value of Quote.
func (s *MessageContentTextAnnotationsFileCitationObjectFileCitation) GetQuote() string {
	return s.Quote
}

// SetFileID sets the value of FileID.
func (s *MessageContentTextAnnotationsFileCitationObjectFileCitation) SetFileID(val string) {
	s.FileID = val
}

// SetQuote sets the value of Quote.
func (s *MessageContentTextAnnotationsFileCitationObjectFileCitation) SetQuote(val string) {
	s.Quote = val
}

// Always `file_citation`.
type MessageContentTextAnnotationsFileCitationObjectType string

const (
	MessageContentTextAnnotationsFileCitationObjectTypeFileCitation MessageContentTextAnnotationsFileCitationObjectType = "file_citation"
)

// AllValues returns all MessageContentTextAnnotationsFileCitationObjectType values.
func (MessageContentTextAnnotationsFileCitationObjectType) AllValues() []MessageContentTextAnnotationsFileCitationObjectType {
	return []MessageContentTextAnnotationsFileCitationObjectType{
		MessageContentTextAnnotationsFileCitationObjectTypeFileCitation,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageContentTextAnnotationsFileCitationObjectType) MarshalText() ([]byte, error) {
	switch s {
	case MessageContentTextAnnotationsFileCitationObjectTypeFileCitation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageContentTextAnnotationsFileCitationObjectType) UnmarshalText(data []byte) error {
	switch MessageContentTextAnnotationsFileCitationObjectType(data) {
	case MessageContentTextAnnotationsFileCitationObjectTypeFileCitation:
		*s = MessageContentTextAnnotationsFileCitationObjectTypeFileCitation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A URL for the file that's generated when the assistant used the `code_interpreter` tool to
// generate a file.
// Ref: #/components/schemas/MessageContentTextAnnotationsFilePathObject
type MessageContentTextAnnotationsFilePathObject struct {
	// Always `file_path`.
	Type MessageContentTextAnnotationsFilePathObjectType `json:"type"`
	// The text in the message content that needs to be replaced.
	Text       string                                              `json:"text"`
	FilePath   MessageContentTextAnnotationsFilePathObjectFilePath `json:"file_path"`
	StartIndex int                                                 `json:"start_index"`
	EndIndex   int                                                 `json:"end_index"`
}

// GetType returns the value of Type.
func (s *MessageContentTextAnnotationsFilePathObject) GetType() MessageContentTextAnnotationsFilePathObjectType {
	return s.Type
}

// GetText returns the value of Text.
func (s *MessageContentTextAnnotationsFilePathObject) GetText() string {
	return s.Text
}

// GetFilePath returns the value of FilePath.
func (s *MessageContentTextAnnotationsFilePathObject) GetFilePath() MessageContentTextAnnotationsFilePathObjectFilePath {
	return s.FilePath
}

// GetStartIndex returns the value of StartIndex.
func (s *MessageContentTextAnnotationsFilePathObject) GetStartIndex() int {
	return s.StartIndex
}

// GetEndIndex returns the value of EndIndex.
func (s *MessageContentTextAnnotationsFilePathObject) GetEndIndex() int {
	return s.EndIndex
}

// SetType sets the value of Type.
func (s *MessageContentTextAnnotationsFilePathObject) SetType(val MessageContentTextAnnotationsFilePathObjectType) {
	s.Type = val
}

// SetText sets the value of Text.
func (s *MessageContentTextAnnotationsFilePathObject) SetText(val string) {
	s.Text = val
}

// SetFilePath sets the value of FilePath.
func (s *MessageContentTextAnnotationsFilePathObject) SetFilePath(val MessageContentTextAnnotationsFilePathObjectFilePath) {
	s.FilePath = val
}

// SetStartIndex sets the value of StartIndex.
func (s *MessageContentTextAnnotationsFilePathObject) SetStartIndex(val int) {
	s.StartIndex = val
}

// SetEndIndex sets the value of EndIndex.
func (s *MessageContentTextAnnotationsFilePathObject) SetEndIndex(val int) {
	s.EndIndex = val
}

type MessageContentTextAnnotationsFilePathObjectFilePath struct {
	// The ID of the file that was generated.
	FileID string `json:"file_id"`
}

// GetFileID returns the value of FileID.
func (s *MessageContentTextAnnotationsFilePathObjectFilePath) GetFileID() string {
	return s.FileID
}

// SetFileID sets the value of FileID.
func (s *MessageContentTextAnnotationsFilePathObjectFilePath) SetFileID(val string) {
	s.FileID = val
}

// Always `file_path`.
type MessageContentTextAnnotationsFilePathObjectType string

const (
	MessageContentTextAnnotationsFilePathObjectTypeFilePath MessageContentTextAnnotationsFilePathObjectType = "file_path"
)

// AllValues returns all MessageContentTextAnnotationsFilePathObjectType values.
func (MessageContentTextAnnotationsFilePathObjectType) AllValues() []MessageContentTextAnnotationsFilePathObjectType {
	return []MessageContentTextAnnotationsFilePathObjectType{
		MessageContentTextAnnotationsFilePathObjectTypeFilePath,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageContentTextAnnotationsFilePathObjectType) MarshalText() ([]byte, error) {
	switch s {
	case MessageContentTextAnnotationsFilePathObjectTypeFilePath:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageContentTextAnnotationsFilePathObjectType) UnmarshalText(data []byte) error {
	switch MessageContentTextAnnotationsFilePathObjectType(data) {
	case MessageContentTextAnnotationsFilePathObjectTypeFilePath:
		*s = MessageContentTextAnnotationsFilePathObjectTypeFilePath
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The text content that is part of a message.
// Ref: #/components/schemas/MessageContentTextObject
type MessageContentTextObject struct {
	// Always `text`.
	Type MessageContentTextObjectType `json:"type"`
	Text MessageContentTextObjectText `json:"text"`
}

// GetType returns the value of Type.
func (s *MessageContentTextObject) GetType() MessageContentTextObjectType {
	return s.Type
}

// GetText returns the value of Text.
func (s *MessageContentTextObject) GetText() MessageContentTextObjectText {
	return s.Text
}

// SetType sets the value of Type.
func (s *MessageContentTextObject) SetType(val MessageContentTextObjectType) {
	s.Type = val
}

// SetText sets the value of Text.
func (s *MessageContentTextObject) SetText(val MessageContentTextObjectText) {
	s.Text = val
}

type MessageContentTextObjectText struct {
	// The data that makes up the text.
	Value       string                                        `json:"value"`
	Annotations []MessageContentTextObjectTextAnnotationsItem `json:"annotations"`
}

// GetValue returns the value of Value.
func (s *MessageContentTextObjectText) GetValue() string {
	return s.Value
}

// GetAnnotations returns the value of Annotations.
func (s *MessageContentTextObjectText) GetAnnotations() []MessageContentTextObjectTextAnnotationsItem {
	return s.Annotations
}

// SetValue sets the value of Value.
func (s *MessageContentTextObjectText) SetValue(val string) {
	s.Value = val
}

// SetAnnotations sets the value of Annotations.
func (s *MessageContentTextObjectText) SetAnnotations(val []MessageContentTextObjectTextAnnotationsItem) {
	s.Annotations = val
}

// MessageContentTextObjectTextAnnotationsItem represents sum type.
type MessageContentTextObjectTextAnnotationsItem struct {
	Type                                            MessageContentTextObjectTextAnnotationsItemType // switch on this field
	MessageContentTextAnnotationsFileCitationObject MessageContentTextAnnotationsFileCitationObject
	MessageContentTextAnnotationsFilePathObject     MessageContentTextAnnotationsFilePathObject
}

// MessageContentTextObjectTextAnnotationsItemType is oneOf type of MessageContentTextObjectTextAnnotationsItem.
type MessageContentTextObjectTextAnnotationsItemType string

// Possible values for MessageContentTextObjectTextAnnotationsItemType.
const (
	MessageContentTextAnnotationsFileCitationObjectMessageContentTextObjectTextAnnotationsItem MessageContentTextObjectTextAnnotationsItemType = "MessageContentTextAnnotationsFileCitationObject"
	MessageContentTextAnnotationsFilePathObjectMessageContentTextObjectTextAnnotationsItem     MessageContentTextObjectTextAnnotationsItemType = "MessageContentTextAnnotationsFilePathObject"
)

// IsMessageContentTextAnnotationsFileCitationObject reports whether MessageContentTextObjectTextAnnotationsItem is MessageContentTextAnnotationsFileCitationObject.
func (s MessageContentTextObjectTextAnnotationsItem) IsMessageContentTextAnnotationsFileCitationObject() bool {
	return s.Type == MessageContentTextAnnotationsFileCitationObjectMessageContentTextObjectTextAnnotationsItem
}

// IsMessageContentTextAnnotationsFilePathObject reports whether MessageContentTextObjectTextAnnotationsItem is MessageContentTextAnnotationsFilePathObject.
func (s MessageContentTextObjectTextAnnotationsItem) IsMessageContentTextAnnotationsFilePathObject() bool {
	return s.Type == MessageContentTextAnnotationsFilePathObjectMessageContentTextObjectTextAnnotationsItem
}

// SetMessageContentTextAnnotationsFileCitationObject sets MessageContentTextObjectTextAnnotationsItem to MessageContentTextAnnotationsFileCitationObject.
func (s *MessageContentTextObjectTextAnnotationsItem) SetMessageContentTextAnnotationsFileCitationObject(v MessageContentTextAnnotationsFileCitationObject) {
	s.Type = MessageContentTextAnnotationsFileCitationObjectMessageContentTextObjectTextAnnotationsItem
	s.MessageContentTextAnnotationsFileCitationObject = v
}

// GetMessageContentTextAnnotationsFileCitationObject returns MessageContentTextAnnotationsFileCitationObject and true boolean if MessageContentTextObjectTextAnnotationsItem is MessageContentTextAnnotationsFileCitationObject.
func (s MessageContentTextObjectTextAnnotationsItem) GetMessageContentTextAnnotationsFileCitationObject() (v MessageContentTextAnnotationsFileCitationObject, ok bool) {
	if !s.IsMessageContentTextAnnotationsFileCitationObject() {
		return v, false
	}
	return s.MessageContentTextAnnotationsFileCitationObject, true
}

// NewMessageContentTextAnnotationsFileCitationObjectMessageContentTextObjectTextAnnotationsItem returns new MessageContentTextObjectTextAnnotationsItem from MessageContentTextAnnotationsFileCitationObject.
func NewMessageContentTextAnnotationsFileCitationObjectMessageContentTextObjectTextAnnotationsItem(v MessageContentTextAnnotationsFileCitationObject) MessageContentTextObjectTextAnnotationsItem {
	var s MessageContentTextObjectTextAnnotationsItem
	s.SetMessageContentTextAnnotationsFileCitationObject(v)
	return s
}

// SetMessageContentTextAnnotationsFilePathObject sets MessageContentTextObjectTextAnnotationsItem to MessageContentTextAnnotationsFilePathObject.
func (s *MessageContentTextObjectTextAnnotationsItem) SetMessageContentTextAnnotationsFilePathObject(v MessageContentTextAnnotationsFilePathObject) {
	s.Type = MessageContentTextAnnotationsFilePathObjectMessageContentTextObjectTextAnnotationsItem
	s.MessageContentTextAnnotationsFilePathObject = v
}

// GetMessageContentTextAnnotationsFilePathObject returns MessageContentTextAnnotationsFilePathObject and true boolean if MessageContentTextObjectTextAnnotationsItem is MessageContentTextAnnotationsFilePathObject.
func (s MessageContentTextObjectTextAnnotationsItem) GetMessageContentTextAnnotationsFilePathObject() (v MessageContentTextAnnotationsFilePathObject, ok bool) {
	if !s.IsMessageContentTextAnnotationsFilePathObject() {
		return v, false
	}
	return s.MessageContentTextAnnotationsFilePathObject, true
}

// NewMessageContentTextAnnotationsFilePathObjectMessageContentTextObjectTextAnnotationsItem returns new MessageContentTextObjectTextAnnotationsItem from MessageContentTextAnnotationsFilePathObject.
func NewMessageContentTextAnnotationsFilePathObjectMessageContentTextObjectTextAnnotationsItem(v MessageContentTextAnnotationsFilePathObject) MessageContentTextObjectTextAnnotationsItem {
	var s MessageContentTextObjectTextAnnotationsItem
	s.SetMessageContentTextAnnotationsFilePathObject(v)
	return s
}

// Always `text`.
type MessageContentTextObjectType string

const (
	MessageContentTextObjectTypeText MessageContentTextObjectType = "text"
)

// AllValues returns all MessageContentTextObjectType values.
func (MessageContentTextObjectType) AllValues() []MessageContentTextObjectType {
	return []MessageContentTextObjectType{
		MessageContentTextObjectTypeText,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageContentTextObjectType) MarshalText() ([]byte, error) {
	switch s {
	case MessageContentTextObjectTypeText:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageContentTextObjectType) UnmarshalText(data []byte) error {
	switch MessageContentTextObjectType(data) {
	case MessageContentTextObjectTypeText:
		*s = MessageContentTextObjectTypeText
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// A list of files attached to a `message`.
// Ref: #/components/schemas/MessageFileObject
type MessageFileObject struct {
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `thread.message.file`.
	Object MessageFileObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the message file was created.
	CreatedAt int `json:"created_at"`
	// The ID of the [message](/docs/api-reference/messages) that the [File](/docs/api-reference/files)
	// is attached to.
	MessageID string `json:"message_id"`
}

// GetID returns the value of ID.
func (s *MessageFileObject) GetID() string {
	return s.ID
}

// GetObject returns the value of Object.
func (s *MessageFileObject) GetObject() MessageFileObjectObject {
	return s.Object
}

// GetCreatedAt returns the value of CreatedAt.
func (s *MessageFileObject) GetCreatedAt() int {
	return s.CreatedAt
}

// GetMessageID returns the value of MessageID.
func (s *MessageFileObject) GetMessageID() string {
	return s.MessageID
}

// SetID sets the value of ID.
func (s *MessageFileObject) SetID(val string) {
	s.ID = val
}

// SetObject sets the value of Object.
func (s *MessageFileObject) SetObject(val MessageFileObjectObject) {
	s.Object = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *MessageFileObject) SetCreatedAt(val int) {
	s.CreatedAt = val
}

// SetMessageID sets the value of MessageID.
func (s *MessageFileObject) SetMessageID(val string) {
	s.MessageID = val
}

// The object type, which is always `thread.message.file`.
type MessageFileObjectObject string

const (
	MessageFileObjectObjectThreadMessageFile MessageFileObjectObject = "thread.message.file"
)

// AllValues returns all MessageFileObjectObject values.
func (MessageFileObjectObject) AllValues() []MessageFileObjectObject {
	return []MessageFileObjectObject{
		MessageFileObjectObjectThreadMessageFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageFileObjectObject) MarshalText() ([]byte, error) {
	switch s {
	case MessageFileObjectObjectThreadMessageFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageFileObjectObject) UnmarshalText(data []byte) error {
	switch MessageFileObjectObject(data) {
	case MessageFileObjectObjectThreadMessageFile:
		*s = MessageFileObjectObjectThreadMessageFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents a message within a [thread](/docs/api-reference/threads).
// Ref: #/components/schemas/MessageObject
type MessageObject struct {
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `thread.message`.
	Object MessageObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the message was created.
	CreatedAt int `json:"created_at"`
	// The [thread](/docs/api-reference/threads) ID that this message belongs to.
	ThreadID string `json:"thread_id"`
	// The entity that produced the message. One of `user` or `assistant`.
	Role MessageObjectRole `json:"role"`
	// The content of the message in array of text and/or images.
	Content []MessageObjectContentItem `json:"content"`
	// If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this
	// message.
	AssistantID NilString `json:"assistant_id"`
	// If applicable, the ID of the [run](/docs/api-reference/runs) associated with the authoring of this
	// message.
	RunID NilString `json:"run_id"`
	// A list of [file](/docs/api-reference/files) IDs that the assistant should use. Useful for tools
	// like retrieval and code_interpreter that can access files. A maximum of 10 files can be attached
	// to a message.
	FileIds []string `json:"file_ids"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata *MessageObjectMetadata `json:"metadata"`
}

// GetID returns the value of ID.
func (s *MessageObject) GetID() string {
	return s.ID
}

// GetObject returns the value of Object.
func (s *MessageObject) GetObject() MessageObjectObject {
	return s.Object
}

// GetCreatedAt returns the value of CreatedAt.
func (s *MessageObject) GetCreatedAt() int {
	return s.CreatedAt
}

// GetThreadID returns the value of ThreadID.
func (s *MessageObject) GetThreadID() string {
	return s.ThreadID
}

// GetRole returns the value of Role.
func (s *MessageObject) GetRole() MessageObjectRole {
	return s.Role
}

// GetContent returns the value of Content.
func (s *MessageObject) GetContent() []MessageObjectContentItem {
	return s.Content
}

// GetAssistantID returns the value of AssistantID.
func (s *MessageObject) GetAssistantID() NilString {
	return s.AssistantID
}

// GetRunID returns the value of RunID.
func (s *MessageObject) GetRunID() NilString {
	return s.RunID
}

// GetFileIds returns the value of FileIds.
func (s *MessageObject) GetFileIds() []string {
	return s.FileIds
}

// GetMetadata returns the value of Metadata.
func (s *MessageObject) GetMetadata() *MessageObjectMetadata {
	return s.Metadata
}

// SetID sets the value of ID.
func (s *MessageObject) SetID(val string) {
	s.ID = val
}

// SetObject sets the value of Object.
func (s *MessageObject) SetObject(val MessageObjectObject) {
	s.Object = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *MessageObject) SetCreatedAt(val int) {
	s.CreatedAt = val
}

// SetThreadID sets the value of ThreadID.
func (s *MessageObject) SetThreadID(val string) {
	s.ThreadID = val
}

// SetRole sets the value of Role.
func (s *MessageObject) SetRole(val MessageObjectRole) {
	s.Role = val
}

// SetContent sets the value of Content.
func (s *MessageObject) SetContent(val []MessageObjectContentItem) {
	s.Content = val
}

// SetAssistantID sets the value of AssistantID.
func (s *MessageObject) SetAssistantID(val NilString) {
	s.AssistantID = val
}

// SetRunID sets the value of RunID.
func (s *MessageObject) SetRunID(val NilString) {
	s.RunID = val
}

// SetFileIds sets the value of FileIds.
func (s *MessageObject) SetFileIds(val []string) {
	s.FileIds = val
}

// SetMetadata sets the value of Metadata.
func (s *MessageObject) SetMetadata(val *MessageObjectMetadata) {
	s.Metadata = val
}

// MessageObjectContentItem represents sum type.
type MessageObjectContentItem struct {
	Type                          MessageObjectContentItemType // switch on this field
	MessageContentImageFileObject MessageContentImageFileObject
	MessageContentTextObject      MessageContentTextObject
}

// MessageObjectContentItemType is oneOf type of MessageObjectContentItem.
type MessageObjectContentItemType string

// Possible values for MessageObjectContentItemType.
const (
	MessageContentImageFileObjectMessageObjectContentItem MessageObjectContentItemType = "MessageContentImageFileObject"
	MessageContentTextObjectMessageObjectContentItem      MessageObjectContentItemType = "MessageContentTextObject"
)

// IsMessageContentImageFileObject reports whether MessageObjectContentItem is MessageContentImageFileObject.
func (s MessageObjectContentItem) IsMessageContentImageFileObject() bool {
	return s.Type == MessageContentImageFileObjectMessageObjectContentItem
}

// IsMessageContentTextObject reports whether MessageObjectContentItem is MessageContentTextObject.
func (s MessageObjectContentItem) IsMessageContentTextObject() bool {
	return s.Type == MessageContentTextObjectMessageObjectContentItem
}

// SetMessageContentImageFileObject sets MessageObjectContentItem to MessageContentImageFileObject.
func (s *MessageObjectContentItem) SetMessageContentImageFileObject(v MessageContentImageFileObject) {
	s.Type = MessageContentImageFileObjectMessageObjectContentItem
	s.MessageContentImageFileObject = v
}

// GetMessageContentImageFileObject returns MessageContentImageFileObject and true boolean if MessageObjectContentItem is MessageContentImageFileObject.
func (s MessageObjectContentItem) GetMessageContentImageFileObject() (v MessageContentImageFileObject, ok bool) {
	if !s.IsMessageContentImageFileObject() {
		return v, false
	}
	return s.MessageContentImageFileObject, true
}

// NewMessageContentImageFileObjectMessageObjectContentItem returns new MessageObjectContentItem from MessageContentImageFileObject.
func NewMessageContentImageFileObjectMessageObjectContentItem(v MessageContentImageFileObject) MessageObjectContentItem {
	var s MessageObjectContentItem
	s.SetMessageContentImageFileObject(v)
	return s
}

// SetMessageContentTextObject sets MessageObjectContentItem to MessageContentTextObject.
func (s *MessageObjectContentItem) SetMessageContentTextObject(v MessageContentTextObject) {
	s.Type = MessageContentTextObjectMessageObjectContentItem
	s.MessageContentTextObject = v
}

// GetMessageContentTextObject returns MessageContentTextObject and true boolean if MessageObjectContentItem is MessageContentTextObject.
func (s MessageObjectContentItem) GetMessageContentTextObject() (v MessageContentTextObject, ok bool) {
	if !s.IsMessageContentTextObject() {
		return v, false
	}
	return s.MessageContentTextObject, true
}

// NewMessageContentTextObjectMessageObjectContentItem returns new MessageObjectContentItem from MessageContentTextObject.
func NewMessageContentTextObjectMessageObjectContentItem(v MessageContentTextObject) MessageObjectContentItem {
	var s MessageObjectContentItem
	s.SetMessageContentTextObject(v)
	return s
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type MessageObjectMetadata struct{}

// The object type, which is always `thread.message`.
type MessageObjectObject string

const (
	MessageObjectObjectThreadMessage MessageObjectObject = "thread.message"
)

// AllValues returns all MessageObjectObject values.
func (MessageObjectObject) AllValues() []MessageObjectObject {
	return []MessageObjectObject{
		MessageObjectObjectThreadMessage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageObjectObject) MarshalText() ([]byte, error) {
	switch s {
	case MessageObjectObjectThreadMessage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageObjectObject) UnmarshalText(data []byte) error {
	switch MessageObjectObject(data) {
	case MessageObjectObjectThreadMessage:
		*s = MessageObjectObjectThreadMessage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The entity that produced the message. One of `user` or `assistant`.
type MessageObjectRole string

const (
	MessageObjectRoleUser      MessageObjectRole = "user"
	MessageObjectRoleAssistant MessageObjectRole = "assistant"
)

// AllValues returns all MessageObjectRole values.
func (MessageObjectRole) AllValues() []MessageObjectRole {
	return []MessageObjectRole{
		MessageObjectRoleUser,
		MessageObjectRoleAssistant,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s MessageObjectRole) MarshalText() ([]byte, error) {
	switch s {
	case MessageObjectRoleUser:
		return []byte(s), nil
	case MessageObjectRoleAssistant:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *MessageObjectRole) UnmarshalText(data []byte) error {
	switch MessageObjectRole(data) {
	case MessageObjectRoleUser:
		*s = MessageObjectRoleUser
		return nil
	case MessageObjectRoleAssistant:
		*s = MessageObjectRoleAssistant
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes an OpenAI model offering that can be used with the API.
// Ref: #/components/schemas/Model
type Model struct {
	// The model identifier, which can be referenced in the API endpoints.
	ID string `json:"id"`
	// The Unix timestamp (in seconds) when the model was created.
	Created int `json:"created"`
	// The object type, which is always "model".
	Object ModelObject `json:"object"`
	// The organization that owns the model.
	OwnedBy string `json:"owned_by"`
}

// GetID returns the value of ID.
func (s *Model) GetID() string {
	return s.ID
}

// GetCreated returns the value of Created.
func (s *Model) GetCreated() int {
	return s.Created
}

// GetObject returns the value of Object.
func (s *Model) GetObject() ModelObject {
	return s.Object
}

// GetOwnedBy returns the value of OwnedBy.
func (s *Model) GetOwnedBy() string {
	return s.OwnedBy
}

// SetID sets the value of ID.
func (s *Model) SetID(val string) {
	s.ID = val
}

// SetCreated sets the value of Created.
func (s *Model) SetCreated(val int) {
	s.Created = val
}

// SetObject sets the value of Object.
func (s *Model) SetObject(val ModelObject) {
	s.Object = val
}

// SetOwnedBy sets the value of OwnedBy.
func (s *Model) SetOwnedBy(val string) {
	s.OwnedBy = val
}

// The object type, which is always "model".
type ModelObject string

const (
	ModelObjectModel ModelObject = "model"
)

// AllValues returns all ModelObject values.
func (ModelObject) AllValues() []ModelObject {
	return []ModelObject{
		ModelObjectModel,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ModelObject) MarshalText() ([]byte, error) {
	switch s {
	case ModelObjectModel:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ModelObject) UnmarshalText(data []byte) error {
	switch ModelObject(data) {
	case ModelObjectModel:
		*s = ModelObjectModel
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ModifyAssistantRequest
type ModifyAssistantRequest struct {
	// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see
	// all of your available models, or see our [Model overview](/docs/models/overview) for descriptions
	// of them.
	Model OptModifyAssistantRequestModel `json:"model"`
	// The name of the assistant. The maximum length is 256 characters.
	Name OptNilString `json:"name"`
	// The description of the assistant. The maximum length is 512 characters.
	Description OptNilString `json:"description"`
	// The system instructions that the assistant uses. The maximum length is 32768 characters.
	Instructions OptNilString `json:"instructions"`
	// A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools
	// can be of types `code_interpreter`, `retrieval`, or `function`.
	Tools []ModifyAssistantRequestToolsItem `json:"tools"`
	// A list of [File](/docs/api-reference/files) IDs attached to this assistant. There can be a maximum
	// of 20 files attached to the assistant. Files are ordered by their creation date in ascending order.
	//  If a file was previously attached to the list but does not show up in the list, it will be
	// deleted from the assistant.
	FileIds []string `json:"file_ids"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata OptModifyAssistantRequestMetadata `json:"metadata"`
}

// GetModel returns the value of Model.
func (s *ModifyAssistantRequest) GetModel() OptModifyAssistantRequestModel {
	return s.Model
}

// GetName returns the value of Name.
func (s *ModifyAssistantRequest) GetName() OptNilString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *ModifyAssistantRequest) GetDescription() OptNilString {
	return s.Description
}

// GetInstructions returns the value of Instructions.
func (s *ModifyAssistantRequest) GetInstructions() OptNilString {
	return s.Instructions
}

// GetTools returns the value of Tools.
func (s *ModifyAssistantRequest) GetTools() []ModifyAssistantRequestToolsItem {
	return s.Tools
}

// GetFileIds returns the value of FileIds.
func (s *ModifyAssistantRequest) GetFileIds() []string {
	return s.FileIds
}

// GetMetadata returns the value of Metadata.
func (s *ModifyAssistantRequest) GetMetadata() OptModifyAssistantRequestMetadata {
	return s.Metadata
}

// SetModel sets the value of Model.
func (s *ModifyAssistantRequest) SetModel(val OptModifyAssistantRequestModel) {
	s.Model = val
}

// SetName sets the value of Name.
func (s *ModifyAssistantRequest) SetName(val OptNilString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *ModifyAssistantRequest) SetDescription(val OptNilString) {
	s.Description = val
}

// SetInstructions sets the value of Instructions.
func (s *ModifyAssistantRequest) SetInstructions(val OptNilString) {
	s.Instructions = val
}

// SetTools sets the value of Tools.
func (s *ModifyAssistantRequest) SetTools(val []ModifyAssistantRequestToolsItem) {
	s.Tools = val
}

// SetFileIds sets the value of FileIds.
func (s *ModifyAssistantRequest) SetFileIds(val []string) {
	s.FileIds = val
}

// SetMetadata sets the value of Metadata.
func (s *ModifyAssistantRequest) SetMetadata(val OptModifyAssistantRequestMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type ModifyAssistantRequestMetadata struct{}

// ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see
// all of your available models, or see our [Model overview](/docs/models/overview) for descriptions
// of them.
// ModifyAssistantRequestModel represents sum type.
type ModifyAssistantRequestModel struct {
	Type   ModifyAssistantRequestModelType // switch on this field
	String string
}

// ModifyAssistantRequestModelType is oneOf type of ModifyAssistantRequestModel.
type ModifyAssistantRequestModelType string

// Possible values for ModifyAssistantRequestModelType.
const (
	StringModifyAssistantRequestModel ModifyAssistantRequestModelType = "string"
)

// IsString reports whether ModifyAssistantRequestModel is string.
func (s ModifyAssistantRequestModel) IsString() bool {
	return s.Type == StringModifyAssistantRequestModel
}

// SetString sets ModifyAssistantRequestModel to string.
func (s *ModifyAssistantRequestModel) SetString(v string) {
	s.Type = StringModifyAssistantRequestModel
	s.String = v
}

// GetString returns string and true boolean if ModifyAssistantRequestModel is string.
func (s ModifyAssistantRequestModel) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringModifyAssistantRequestModel returns new ModifyAssistantRequestModel from string.
func NewStringModifyAssistantRequestModel(v string) ModifyAssistantRequestModel {
	var s ModifyAssistantRequestModel
	s.SetString(v)
	return s
}

// ModifyAssistantRequestToolsItem represents sum type.
type ModifyAssistantRequestToolsItem struct {
	Type                    ModifyAssistantRequestToolsItemType // switch on this field
	AssistantToolsCode      AssistantToolsCode
	AssistantToolsRetrieval AssistantToolsRetrieval
	AssistantToolsFunction  AssistantToolsFunction
}

// ModifyAssistantRequestToolsItemType is oneOf type of ModifyAssistantRequestToolsItem.
type ModifyAssistantRequestToolsItemType string

// Possible values for ModifyAssistantRequestToolsItemType.
const (
	AssistantToolsCodeModifyAssistantRequestToolsItem      ModifyAssistantRequestToolsItemType = "code_interpreter"
	AssistantToolsRetrievalModifyAssistantRequestToolsItem ModifyAssistantRequestToolsItemType = "retrieval"
	AssistantToolsFunctionModifyAssistantRequestToolsItem  ModifyAssistantRequestToolsItemType = "function"
)

// IsAssistantToolsCode reports whether ModifyAssistantRequestToolsItem is AssistantToolsCode.
func (s ModifyAssistantRequestToolsItem) IsAssistantToolsCode() bool {
	return s.Type == AssistantToolsCodeModifyAssistantRequestToolsItem
}

// IsAssistantToolsRetrieval reports whether ModifyAssistantRequestToolsItem is AssistantToolsRetrieval.
func (s ModifyAssistantRequestToolsItem) IsAssistantToolsRetrieval() bool {
	return s.Type == AssistantToolsRetrievalModifyAssistantRequestToolsItem
}

// IsAssistantToolsFunction reports whether ModifyAssistantRequestToolsItem is AssistantToolsFunction.
func (s ModifyAssistantRequestToolsItem) IsAssistantToolsFunction() bool {
	return s.Type == AssistantToolsFunctionModifyAssistantRequestToolsItem
}

// SetAssistantToolsCode sets ModifyAssistantRequestToolsItem to AssistantToolsCode.
func (s *ModifyAssistantRequestToolsItem) SetAssistantToolsCode(v AssistantToolsCode) {
	s.Type = AssistantToolsCodeModifyAssistantRequestToolsItem
	s.AssistantToolsCode = v
}

// GetAssistantToolsCode returns AssistantToolsCode and true boolean if ModifyAssistantRequestToolsItem is AssistantToolsCode.
func (s ModifyAssistantRequestToolsItem) GetAssistantToolsCode() (v AssistantToolsCode, ok bool) {
	if !s.IsAssistantToolsCode() {
		return v, false
	}
	return s.AssistantToolsCode, true
}

// NewAssistantToolsCodeModifyAssistantRequestToolsItem returns new ModifyAssistantRequestToolsItem from AssistantToolsCode.
func NewAssistantToolsCodeModifyAssistantRequestToolsItem(v AssistantToolsCode) ModifyAssistantRequestToolsItem {
	var s ModifyAssistantRequestToolsItem
	s.SetAssistantToolsCode(v)
	return s
}

// SetAssistantToolsRetrieval sets ModifyAssistantRequestToolsItem to AssistantToolsRetrieval.
func (s *ModifyAssistantRequestToolsItem) SetAssistantToolsRetrieval(v AssistantToolsRetrieval) {
	s.Type = AssistantToolsRetrievalModifyAssistantRequestToolsItem
	s.AssistantToolsRetrieval = v
}

// GetAssistantToolsRetrieval returns AssistantToolsRetrieval and true boolean if ModifyAssistantRequestToolsItem is AssistantToolsRetrieval.
func (s ModifyAssistantRequestToolsItem) GetAssistantToolsRetrieval() (v AssistantToolsRetrieval, ok bool) {
	if !s.IsAssistantToolsRetrieval() {
		return v, false
	}
	return s.AssistantToolsRetrieval, true
}

// NewAssistantToolsRetrievalModifyAssistantRequestToolsItem returns new ModifyAssistantRequestToolsItem from AssistantToolsRetrieval.
func NewAssistantToolsRetrievalModifyAssistantRequestToolsItem(v AssistantToolsRetrieval) ModifyAssistantRequestToolsItem {
	var s ModifyAssistantRequestToolsItem
	s.SetAssistantToolsRetrieval(v)
	return s
}

// SetAssistantToolsFunction sets ModifyAssistantRequestToolsItem to AssistantToolsFunction.
func (s *ModifyAssistantRequestToolsItem) SetAssistantToolsFunction(v AssistantToolsFunction) {
	s.Type = AssistantToolsFunctionModifyAssistantRequestToolsItem
	s.AssistantToolsFunction = v
}

// GetAssistantToolsFunction returns AssistantToolsFunction and true boolean if ModifyAssistantRequestToolsItem is AssistantToolsFunction.
func (s ModifyAssistantRequestToolsItem) GetAssistantToolsFunction() (v AssistantToolsFunction, ok bool) {
	if !s.IsAssistantToolsFunction() {
		return v, false
	}
	return s.AssistantToolsFunction, true
}

// NewAssistantToolsFunctionModifyAssistantRequestToolsItem returns new ModifyAssistantRequestToolsItem from AssistantToolsFunction.
func NewAssistantToolsFunctionModifyAssistantRequestToolsItem(v AssistantToolsFunction) ModifyAssistantRequestToolsItem {
	var s ModifyAssistantRequestToolsItem
	s.SetAssistantToolsFunction(v)
	return s
}

// Ref: #/components/schemas/ModifyMessageRequest
type ModifyMessageRequest struct {
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata OptModifyMessageRequestMetadata `json:"metadata"`
}

// GetMetadata returns the value of Metadata.
func (s *ModifyMessageRequest) GetMetadata() OptModifyMessageRequestMetadata {
	return s.Metadata
}

// SetMetadata sets the value of Metadata.
func (s *ModifyMessageRequest) SetMetadata(val OptModifyMessageRequestMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type ModifyMessageRequestMetadata struct{}

// Ref: #/components/schemas/ModifyRunRequest
type ModifyRunRequest struct {
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata OptModifyRunRequestMetadata `json:"metadata"`
}

// GetMetadata returns the value of Metadata.
func (s *ModifyRunRequest) GetMetadata() OptModifyRunRequestMetadata {
	return s.Metadata
}

// SetMetadata sets the value of Metadata.
func (s *ModifyRunRequest) SetMetadata(val OptModifyRunRequestMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type ModifyRunRequestMetadata struct{}

// Ref: #/components/schemas/ModifyThreadRequest
type ModifyThreadRequest struct {
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata OptModifyThreadRequestMetadata `json:"metadata"`
}

// GetMetadata returns the value of Metadata.
func (s *ModifyThreadRequest) GetMetadata() OptModifyThreadRequestMetadata {
	return s.Metadata
}

// SetMetadata sets the value of Metadata.
func (s *ModifyThreadRequest) SetMetadata(val OptModifyThreadRequestMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type ModifyThreadRequestMetadata struct{}

// NewNilCreateChatCompletionResponseChoicesItemLogprobs returns new NilCreateChatCompletionResponseChoicesItemLogprobs with value set to v.
func NewNilCreateChatCompletionResponseChoicesItemLogprobs(v CreateChatCompletionResponseChoicesItemLogprobs) NilCreateChatCompletionResponseChoicesItemLogprobs {
	return NilCreateChatCompletionResponseChoicesItemLogprobs{
		Value: v,
	}
}

// NilCreateChatCompletionResponseChoicesItemLogprobs is nullable CreateChatCompletionResponseChoicesItemLogprobs.
type NilCreateChatCompletionResponseChoicesItemLogprobs struct {
	Value CreateChatCompletionResponseChoicesItemLogprobs
	Null  bool
}

// SetTo sets value to v.
func (o *NilCreateChatCompletionResponseChoicesItemLogprobs) SetTo(v CreateChatCompletionResponseChoicesItemLogprobs) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCreateChatCompletionResponseChoicesItemLogprobs) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilCreateChatCompletionResponseChoicesItemLogprobs) SetToNull() {
	o.Null = true
	var v CreateChatCompletionResponseChoicesItemLogprobs
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilCreateChatCompletionResponseChoicesItemLogprobs) Get() (v CreateChatCompletionResponseChoicesItemLogprobs, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCreateChatCompletionResponseChoicesItemLogprobs) Or(d CreateChatCompletionResponseChoicesItemLogprobs) CreateChatCompletionResponseChoicesItemLogprobs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilFineTuningJobError returns new NilFineTuningJobError with value set to v.
func NewNilFineTuningJobError(v FineTuningJobError) NilFineTuningJobError {
	return NilFineTuningJobError{
		Value: v,
	}
}

// NilFineTuningJobError is nullable FineTuningJobError.
type NilFineTuningJobError struct {
	Value FineTuningJobError
	Null  bool
}

// SetTo sets value to v.
func (o *NilFineTuningJobError) SetTo(v FineTuningJobError) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilFineTuningJobError) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilFineTuningJobError) SetToNull() {
	o.Null = true
	var v FineTuningJobError
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilFineTuningJobError) Get() (v FineTuningJobError, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilFineTuningJobError) Or(d FineTuningJobError) FineTuningJobError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilInt returns new NilInt with value set to v.
func NewNilInt(v int) NilInt {
	return NilInt{
		Value: v,
	}
}

// NilInt is nullable int.
type NilInt struct {
	Value int
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt) SetTo(v int) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInt) SetToNull() {
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilRunCompletionUsage returns new NilRunCompletionUsage with value set to v.
func NewNilRunCompletionUsage(v RunCompletionUsage) NilRunCompletionUsage {
	return NilRunCompletionUsage{
		Value: v,
	}
}

// NilRunCompletionUsage is nullable RunCompletionUsage.
type NilRunCompletionUsage struct {
	Value RunCompletionUsage
	Null  bool
}

// SetTo sets value to v.
func (o *NilRunCompletionUsage) SetTo(v RunCompletionUsage) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilRunCompletionUsage) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilRunCompletionUsage) SetToNull() {
	o.Null = true
	var v RunCompletionUsage
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilRunCompletionUsage) Get() (v RunCompletionUsage, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilRunCompletionUsage) Or(d RunCompletionUsage) RunCompletionUsage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilRunObjectLastError returns new NilRunObjectLastError with value set to v.
func NewNilRunObjectLastError(v RunObjectLastError) NilRunObjectLastError {
	return NilRunObjectLastError{
		Value: v,
	}
}

// NilRunObjectLastError is nullable RunObjectLastError.
type NilRunObjectLastError struct {
	Value RunObjectLastError
	Null  bool
}

// SetTo sets value to v.
func (o *NilRunObjectLastError) SetTo(v RunObjectLastError) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilRunObjectLastError) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilRunObjectLastError) SetToNull() {
	o.Null = true
	var v RunObjectLastError
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilRunObjectLastError) Get() (v RunObjectLastError, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilRunObjectLastError) Or(d RunObjectLastError) RunObjectLastError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilRunObjectRequiredAction returns new NilRunObjectRequiredAction with value set to v.
func NewNilRunObjectRequiredAction(v RunObjectRequiredAction) NilRunObjectRequiredAction {
	return NilRunObjectRequiredAction{
		Value: v,
	}
}

// NilRunObjectRequiredAction is nullable RunObjectRequiredAction.
type NilRunObjectRequiredAction struct {
	Value RunObjectRequiredAction
	Null  bool
}

// SetTo sets value to v.
func (o *NilRunObjectRequiredAction) SetTo(v RunObjectRequiredAction) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilRunObjectRequiredAction) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilRunObjectRequiredAction) SetToNull() {
	o.Null = true
	var v RunObjectRequiredAction
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilRunObjectRequiredAction) Get() (v RunObjectRequiredAction, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilRunObjectRequiredAction) Or(d RunObjectRequiredAction) RunObjectRequiredAction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilRunStepCompletionUsage returns new NilRunStepCompletionUsage with value set to v.
func NewNilRunStepCompletionUsage(v RunStepCompletionUsage) NilRunStepCompletionUsage {
	return NilRunStepCompletionUsage{
		Value: v,
	}
}

// NilRunStepCompletionUsage is nullable RunStepCompletionUsage.
type NilRunStepCompletionUsage struct {
	Value RunStepCompletionUsage
	Null  bool
}

// SetTo sets value to v.
func (o *NilRunStepCompletionUsage) SetTo(v RunStepCompletionUsage) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilRunStepCompletionUsage) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilRunStepCompletionUsage) SetToNull() {
	o.Null = true
	var v RunStepCompletionUsage
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilRunStepCompletionUsage) Get() (v RunStepCompletionUsage, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilRunStepCompletionUsage) Or(d RunStepCompletionUsage) RunStepCompletionUsage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilRunStepObjectLastError returns new NilRunStepObjectLastError with value set to v.
func NewNilRunStepObjectLastError(v RunStepObjectLastError) NilRunStepObjectLastError {
	return NilRunStepObjectLastError{
		Value: v,
	}
}

// NilRunStepObjectLastError is nullable RunStepObjectLastError.
type NilRunStepObjectLastError struct {
	Value RunStepObjectLastError
	Null  bool
}

// SetTo sets value to v.
func (o *NilRunStepObjectLastError) SetTo(v RunStepObjectLastError) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilRunStepObjectLastError) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilRunStepObjectLastError) SetToNull() {
	o.Null = true
	var v RunStepObjectLastError
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilRunStepObjectLastError) Get() (v RunStepObjectLastError, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilRunStepObjectLastError) Or(d RunStepObjectLastError) RunStepObjectLastError {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilString) SetToNull() {
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// The `File` object represents a document that has been uploaded to OpenAI.
// Ref: #/components/schemas/OpenAIFile
type OpenAIFile struct {
	// The file identifier, which can be referenced in the API endpoints.
	ID string `json:"id"`
	// The size of the file, in bytes.
	Bytes int `json:"bytes"`
	// The Unix timestamp (in seconds) for when the file was created.
	CreatedAt int `json:"created_at"`
	// The name of the file.
	Filename string `json:"filename"`
	// The object type, which is always `file`.
	Object OpenAIFileObject `json:"object"`
	// The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`,
	// `assistants`, and `assistants_output`.
	Purpose OpenAIFilePurpose `json:"purpose"`
	// Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or
	// `error`.
	//
	// Deprecated: schema marks this property as deprecated.
	Status OpenAIFileStatus `json:"status"`
	// Deprecated. For details on why a fine-tuning training file failed validation, see the `error`
	// field on `fine_tuning.job`.
	//
	// Deprecated: schema marks this property as deprecated.
	StatusDetails OptString `json:"status_details"`
}

// GetID returns the value of ID.
func (s *OpenAIFile) GetID() string {
	return s.ID
}

// GetBytes returns the value of Bytes.
func (s *OpenAIFile) GetBytes() int {
	return s.Bytes
}

// GetCreatedAt returns the value of CreatedAt.
func (s *OpenAIFile) GetCreatedAt() int {
	return s.CreatedAt
}

// GetFilename returns the value of Filename.
func (s *OpenAIFile) GetFilename() string {
	return s.Filename
}

// GetObject returns the value of Object.
func (s *OpenAIFile) GetObject() OpenAIFileObject {
	return s.Object
}

// GetPurpose returns the value of Purpose.
func (s *OpenAIFile) GetPurpose() OpenAIFilePurpose {
	return s.Purpose
}

// GetStatus returns the value of Status.
func (s *OpenAIFile) GetStatus() OpenAIFileStatus {
	return s.Status
}

// GetStatusDetails returns the value of StatusDetails.
func (s *OpenAIFile) GetStatusDetails() OptString {
	return s.StatusDetails
}

// SetID sets the value of ID.
func (s *OpenAIFile) SetID(val string) {
	s.ID = val
}

// SetBytes sets the value of Bytes.
func (s *OpenAIFile) SetBytes(val int) {
	s.Bytes = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *OpenAIFile) SetCreatedAt(val int) {
	s.CreatedAt = val
}

// SetFilename sets the value of Filename.
func (s *OpenAIFile) SetFilename(val string) {
	s.Filename = val
}

// SetObject sets the value of Object.
func (s *OpenAIFile) SetObject(val OpenAIFileObject) {
	s.Object = val
}

// SetPurpose sets the value of Purpose.
func (s *OpenAIFile) SetPurpose(val OpenAIFilePurpose) {
	s.Purpose = val
}

// SetStatus sets the value of Status.
func (s *OpenAIFile) SetStatus(val OpenAIFileStatus) {
	s.Status = val
}

// SetStatusDetails sets the value of StatusDetails.
func (s *OpenAIFile) SetStatusDetails(val OptString) {
	s.StatusDetails = val
}

// The object type, which is always `file`.
type OpenAIFileObject string

const (
	OpenAIFileObjectFile OpenAIFileObject = "file"
)

// AllValues returns all OpenAIFileObject values.
func (OpenAIFileObject) AllValues() []OpenAIFileObject {
	return []OpenAIFileObject{
		OpenAIFileObjectFile,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OpenAIFileObject) MarshalText() ([]byte, error) {
	switch s {
	case OpenAIFileObjectFile:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OpenAIFileObject) UnmarshalText(data []byte) error {
	switch OpenAIFileObject(data) {
	case OpenAIFileObjectFile:
		*s = OpenAIFileObjectFile
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The intended purpose of the file. Supported values are `fine-tune`, `fine-tune-results`,
// `assistants`, and `assistants_output`.
type OpenAIFilePurpose string

const (
	OpenAIFilePurposeFineTune         OpenAIFilePurpose = "fine-tune"
	OpenAIFilePurposeFineTuneResults  OpenAIFilePurpose = "fine-tune-results"
	OpenAIFilePurposeAssistants       OpenAIFilePurpose = "assistants"
	OpenAIFilePurposeAssistantsOutput OpenAIFilePurpose = "assistants_output"
)

// AllValues returns all OpenAIFilePurpose values.
func (OpenAIFilePurpose) AllValues() []OpenAIFilePurpose {
	return []OpenAIFilePurpose{
		OpenAIFilePurposeFineTune,
		OpenAIFilePurposeFineTuneResults,
		OpenAIFilePurposeAssistants,
		OpenAIFilePurposeAssistantsOutput,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OpenAIFilePurpose) MarshalText() ([]byte, error) {
	switch s {
	case OpenAIFilePurposeFineTune:
		return []byte(s), nil
	case OpenAIFilePurposeFineTuneResults:
		return []byte(s), nil
	case OpenAIFilePurposeAssistants:
		return []byte(s), nil
	case OpenAIFilePurposeAssistantsOutput:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OpenAIFilePurpose) UnmarshalText(data []byte) error {
	switch OpenAIFilePurpose(data) {
	case OpenAIFilePurposeFineTune:
		*s = OpenAIFilePurposeFineTune
		return nil
	case OpenAIFilePurposeFineTuneResults:
		*s = OpenAIFilePurposeFineTuneResults
		return nil
	case OpenAIFilePurposeAssistants:
		*s = OpenAIFilePurposeAssistants
		return nil
	case OpenAIFilePurposeAssistantsOutput:
		*s = OpenAIFilePurposeAssistantsOutput
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or
// `error`.
//
// Deprecated: schema marks this type as deprecated.
type OpenAIFileStatus string

const (
	OpenAIFileStatusUploaded  OpenAIFileStatus = "uploaded"
	OpenAIFileStatusProcessed OpenAIFileStatus = "processed"
	OpenAIFileStatusError     OpenAIFileStatus = "error"
)

// AllValues returns all OpenAIFileStatus values.
func (OpenAIFileStatus) AllValues() []OpenAIFileStatus {
	return []OpenAIFileStatus{
		OpenAIFileStatusUploaded,
		OpenAIFileStatusProcessed,
		OpenAIFileStatusError,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s OpenAIFileStatus) MarshalText() ([]byte, error) {
	switch s {
	case OpenAIFileStatusUploaded:
		return []byte(s), nil
	case OpenAIFileStatusProcessed:
		return []byte(s), nil
	case OpenAIFileStatusError:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OpenAIFileStatus) UnmarshalText(data []byte) error {
	switch OpenAIFileStatus(data) {
	case OpenAIFileStatusUploaded:
		*s = OpenAIFileStatusUploaded
		return nil
	case OpenAIFileStatusProcessed:
		*s = OpenAIFileStatusProcessed
		return nil
	case OpenAIFileStatusError:
		*s = OpenAIFileStatusError
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewOptChatCompletionResponseMessageFunctionCall returns new OptChatCompletionResponseMessageFunctionCall with value set to v.
func NewOptChatCompletionResponseMessageFunctionCall(v ChatCompletionResponseMessageFunctionCall) OptChatCompletionResponseMessageFunctionCall {
	return OptChatCompletionResponseMessageFunctionCall{
		Value: v,
		Set:   true,
	}
}

// OptChatCompletionResponseMessageFunctionCall is optional ChatCompletionResponseMessageFunctionCall.
type OptChatCompletionResponseMessageFunctionCall struct {
	Value ChatCompletionResponseMessageFunctionCall
	Set   bool
}

// IsSet returns true if OptChatCompletionResponseMessageFunctionCall was set.
func (o OptChatCompletionResponseMessageFunctionCall) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatCompletionResponseMessageFunctionCall) Reset() {
	var v ChatCompletionResponseMessageFunctionCall
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatCompletionResponseMessageFunctionCall) SetTo(v ChatCompletionResponseMessageFunctionCall) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatCompletionResponseMessageFunctionCall) Get() (v ChatCompletionResponseMessageFunctionCall, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatCompletionResponseMessageFunctionCall) Or(d ChatCompletionResponseMessageFunctionCall) ChatCompletionResponseMessageFunctionCall {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptChatCompletionToolChoiceOption returns new OptChatCompletionToolChoiceOption with value set to v.
func NewOptChatCompletionToolChoiceOption(v ChatCompletionToolChoiceOption) OptChatCompletionToolChoiceOption {
	return OptChatCompletionToolChoiceOption{
		Value: v,
		Set:   true,
	}
}

// OptChatCompletionToolChoiceOption is optional ChatCompletionToolChoiceOption.
type OptChatCompletionToolChoiceOption struct {
	Value ChatCompletionToolChoiceOption
	Set   bool
}

// IsSet returns true if OptChatCompletionToolChoiceOption was set.
func (o OptChatCompletionToolChoiceOption) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptChatCompletionToolChoiceOption) Reset() {
	var v ChatCompletionToolChoiceOption
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptChatCompletionToolChoiceOption) SetTo(v ChatCompletionToolChoiceOption) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptChatCompletionToolChoiceOption) Get() (v ChatCompletionToolChoiceOption, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptChatCompletionToolChoiceOption) Or(d ChatCompletionToolChoiceOption) ChatCompletionToolChoiceOption {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCompletionUsage returns new OptCompletionUsage with value set to v.
func NewOptCompletionUsage(v CompletionUsage) OptCompletionUsage {
	return OptCompletionUsage{
		Value: v,
		Set:   true,
	}
}

// OptCompletionUsage is optional CompletionUsage.
type OptCompletionUsage struct {
	Value CompletionUsage
	Set   bool
}

// IsSet returns true if OptCompletionUsage was set.
func (o OptCompletionUsage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCompletionUsage) Reset() {
	var v CompletionUsage
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCompletionUsage) SetTo(v CompletionUsage) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCompletionUsage) Get() (v CompletionUsage, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCompletionUsage) Or(d CompletionUsage) CompletionUsage {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateAssistantRequestMetadata returns new OptCreateAssistantRequestMetadata with value set to v.
func NewOptCreateAssistantRequestMetadata(v *CreateAssistantRequestMetadata) OptCreateAssistantRequestMetadata {
	return OptCreateAssistantRequestMetadata{
		Value: v,
		Set:   true,
	}
}

// OptCreateAssistantRequestMetadata is optional *CreateAssistantRequestMetadata.
type OptCreateAssistantRequestMetadata struct {
	Value *CreateAssistantRequestMetadata
	Set   bool
}

// IsSet returns true if OptCreateAssistantRequestMetadata was set.
func (o OptCreateAssistantRequestMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateAssistantRequestMetadata) Reset() {
	var v *CreateAssistantRequestMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateAssistantRequestMetadata) SetTo(v *CreateAssistantRequestMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateAssistantRequestMetadata) Get() (v *CreateAssistantRequestMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateAssistantRequestMetadata) Or(d *CreateAssistantRequestMetadata) *CreateAssistantRequestMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateChatCompletionRequestFunctionCall returns new OptCreateChatCompletionRequestFunctionCall with value set to v.
func NewOptCreateChatCompletionRequestFunctionCall(v CreateChatCompletionRequestFunctionCall) OptCreateChatCompletionRequestFunctionCall {
	return OptCreateChatCompletionRequestFunctionCall{
		Value: v,
		Set:   true,
	}
}

// OptCreateChatCompletionRequestFunctionCall is optional CreateChatCompletionRequestFunctionCall.
type OptCreateChatCompletionRequestFunctionCall struct {
	Value CreateChatCompletionRequestFunctionCall
	Set   bool
}

// IsSet returns true if OptCreateChatCompletionRequestFunctionCall was set.
func (o OptCreateChatCompletionRequestFunctionCall) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateChatCompletionRequestFunctionCall) Reset() {
	var v CreateChatCompletionRequestFunctionCall
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateChatCompletionRequestFunctionCall) SetTo(v CreateChatCompletionRequestFunctionCall) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateChatCompletionRequestFunctionCall) Get() (v CreateChatCompletionRequestFunctionCall, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateChatCompletionRequestFunctionCall) Or(d CreateChatCompletionRequestFunctionCall) CreateChatCompletionRequestFunctionCall {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateChatCompletionRequestResponseFormat returns new OptCreateChatCompletionRequestResponseFormat with value set to v.
func NewOptCreateChatCompletionRequestResponseFormat(v CreateChatCompletionRequestResponseFormat) OptCreateChatCompletionRequestResponseFormat {
	return OptCreateChatCompletionRequestResponseFormat{
		Value: v,
		Set:   true,
	}
}

// OptCreateChatCompletionRequestResponseFormat is optional CreateChatCompletionRequestResponseFormat.
type OptCreateChatCompletionRequestResponseFormat struct {
	Value CreateChatCompletionRequestResponseFormat
	Set   bool
}

// IsSet returns true if OptCreateChatCompletionRequestResponseFormat was set.
func (o OptCreateChatCompletionRequestResponseFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateChatCompletionRequestResponseFormat) Reset() {
	var v CreateChatCompletionRequestResponseFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateChatCompletionRequestResponseFormat) SetTo(v CreateChatCompletionRequestResponseFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateChatCompletionRequestResponseFormat) Get() (v CreateChatCompletionRequestResponseFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateChatCompletionRequestResponseFormat) Or(d CreateChatCompletionRequestResponseFormat) CreateChatCompletionRequestResponseFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateChatCompletionRequestResponseFormatType returns new OptCreateChatCompletionRequestResponseFormatType with value set to v.
func NewOptCreateChatCompletionRequestResponseFormatType(v CreateChatCompletionRequestResponseFormatType) OptCreateChatCompletionRequestResponseFormatType {
	return OptCreateChatCompletionRequestResponseFormatType{
		Value: v,
		Set:   true,
	}
}

// OptCreateChatCompletionRequestResponseFormatType is optional CreateChatCompletionRequestResponseFormatType.
type OptCreateChatCompletionRequestResponseFormatType struct {
	Value CreateChatCompletionRequestResponseFormatType
	Set   bool
}

// IsSet returns true if OptCreateChatCompletionRequestResponseFormatType was set.
func (o OptCreateChatCompletionRequestResponseFormatType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateChatCompletionRequestResponseFormatType) Reset() {
	var v CreateChatCompletionRequestResponseFormatType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateChatCompletionRequestResponseFormatType) SetTo(v CreateChatCompletionRequestResponseFormatType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateChatCompletionRequestResponseFormatType) Get() (v CreateChatCompletionRequestResponseFormatType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateChatCompletionRequestResponseFormatType) Or(d CreateChatCompletionRequestResponseFormatType) CreateChatCompletionRequestResponseFormatType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateChatCompletionRequestStop returns new OptCreateChatCompletionRequestStop with value set to v.
func NewOptCreateChatCompletionRequestStop(v CreateChatCompletionRequestStop) OptCreateChatCompletionRequestStop {
	return OptCreateChatCompletionRequestStop{
		Value: v,
		Set:   true,
	}
}

// OptCreateChatCompletionRequestStop is optional CreateChatCompletionRequestStop.
type OptCreateChatCompletionRequestStop struct {
	Value CreateChatCompletionRequestStop
	Set   bool
}

// IsSet returns true if OptCreateChatCompletionRequestStop was set.
func (o OptCreateChatCompletionRequestStop) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateChatCompletionRequestStop) Reset() {
	var v CreateChatCompletionRequestStop
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateChatCompletionRequestStop) SetTo(v CreateChatCompletionRequestStop) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateChatCompletionRequestStop) Get() (v CreateChatCompletionRequestStop, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateChatCompletionRequestStop) Or(d CreateChatCompletionRequestStop) CreateChatCompletionRequestStop {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateFineTuningJobRequestHyperparameters returns new OptCreateFineTuningJobRequestHyperparameters with value set to v.
func NewOptCreateFineTuningJobRequestHyperparameters(v CreateFineTuningJobRequestHyperparameters) OptCreateFineTuningJobRequestHyperparameters {
	return OptCreateFineTuningJobRequestHyperparameters{
		Value: v,
		Set:   true,
	}
}

// OptCreateFineTuningJobRequestHyperparameters is optional CreateFineTuningJobRequestHyperparameters.
type OptCreateFineTuningJobRequestHyperparameters struct {
	Value CreateFineTuningJobRequestHyperparameters
	Set   bool
}

// IsSet returns true if OptCreateFineTuningJobRequestHyperparameters was set.
func (o OptCreateFineTuningJobRequestHyperparameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateFineTuningJobRequestHyperparameters) Reset() {
	var v CreateFineTuningJobRequestHyperparameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateFineTuningJobRequestHyperparameters) SetTo(v CreateFineTuningJobRequestHyperparameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateFineTuningJobRequestHyperparameters) Get() (v CreateFineTuningJobRequestHyperparameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateFineTuningJobRequestHyperparameters) Or(d CreateFineTuningJobRequestHyperparameters) CreateFineTuningJobRequestHyperparameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateFineTuningJobRequestHyperparametersBatchSize returns new OptCreateFineTuningJobRequestHyperparametersBatchSize with value set to v.
func NewOptCreateFineTuningJobRequestHyperparametersBatchSize(v CreateFineTuningJobRequestHyperparametersBatchSize) OptCreateFineTuningJobRequestHyperparametersBatchSize {
	return OptCreateFineTuningJobRequestHyperparametersBatchSize{
		Value: v,
		Set:   true,
	}
}

// OptCreateFineTuningJobRequestHyperparametersBatchSize is optional CreateFineTuningJobRequestHyperparametersBatchSize.
type OptCreateFineTuningJobRequestHyperparametersBatchSize struct {
	Value CreateFineTuningJobRequestHyperparametersBatchSize
	Set   bool
}

// IsSet returns true if OptCreateFineTuningJobRequestHyperparametersBatchSize was set.
func (o OptCreateFineTuningJobRequestHyperparametersBatchSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateFineTuningJobRequestHyperparametersBatchSize) Reset() {
	var v CreateFineTuningJobRequestHyperparametersBatchSize
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateFineTuningJobRequestHyperparametersBatchSize) SetTo(v CreateFineTuningJobRequestHyperparametersBatchSize) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateFineTuningJobRequestHyperparametersBatchSize) Get() (v CreateFineTuningJobRequestHyperparametersBatchSize, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateFineTuningJobRequestHyperparametersBatchSize) Or(d CreateFineTuningJobRequestHyperparametersBatchSize) CreateFineTuningJobRequestHyperparametersBatchSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier returns new OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier with value set to v.
func NewOptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier(v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier) OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier {
	return OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier{
		Value: v,
		Set:   true,
	}
}

// OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier is optional CreateFineTuningJobRequestHyperparametersLearningRateMultiplier.
type OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier struct {
	Value CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
	Set   bool
}

// IsSet returns true if OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier was set.
func (o OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier) IsSet() bool {
	return o.Set
}

// Reset unsets value.
func (o *OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier) Reset() {
	var v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier) SetTo(v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier) Get() (v CreateFineTuningJobRequestHyperparametersLearningRateMultiplier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateFineTuningJobRequestHyperparametersLearningRateMultiplier) Or(d CreateFineTuningJobRequestHyperparametersLearningRateMultiplier) CreateFineTuningJobRequestHyperparametersLearningRateMultiplier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateFineTuningJobRequestHyperparametersNEpochs returns new OptCreateFineTuningJobRequestHyperparametersNEpochs with value set to v.
func NewOptCreateFineTuningJobRequestHyperparametersNEpochs(v CreateFineTuningJobRequestHyperparametersNEpochs) OptCreateFineTuningJobRequestHyperparametersNEpochs {
	return OptCreateFineTuningJobRequestHyperparametersNEpochs{
		Value: v,
		Set:   true,
	}
}

// OptCreateFineTuningJobRequestHyperparametersNEpochs is optional CreateFineTuningJobRequestHyperparametersNEpochs.
type OptCreateFineTuningJobRequestHyperparametersNEpochs struct {
	Value CreateFineTuningJobRequestHyperparametersNEpochs
	Set   bool
}

// IsSet returns true if OptCreateFineTuningJobRequestHyperparametersNEpochs was set.
func (o OptCreateFineTuningJobRequestHyperparametersNEpochs) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateFineTuningJobRequestHyperparametersNEpochs) Reset() {
	var v CreateFineTuningJobRequestHyperparametersNEpochs
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateFineTuningJobRequestHyperparametersNEpochs) SetTo(v CreateFineTuningJobRequestHyperparametersNEpochs) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateFineTuningJobRequestHyperparametersNEpochs) Get() (v CreateFineTuningJobRequestHyperparametersNEpochs, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateFineTuningJobRequestHyperparametersNEpochs) Or(d CreateFineTuningJobRequestHyperparametersNEpochs) CreateFineTuningJobRequestHyperparametersNEpochs {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateImageRequestQuality returns new OptCreateImageRequestQuality with value set to v.
func NewOptCreateImageRequestQuality(v CreateImageRequestQuality) OptCreateImageRequestQuality {
	return OptCreateImageRequestQuality{
		Value: v,
		Set:   true,
	}
}

// OptCreateImageRequestQuality is optional CreateImageRequestQuality.
type OptCreateImageRequestQuality struct {
	Value CreateImageRequestQuality
	Set   bool
}

// IsSet returns true if OptCreateImageRequestQuality was set.
func (o OptCreateImageRequestQuality) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateImageRequestQuality) Reset() {
	var v CreateImageRequestQuality
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateImageRequestQuality) SetTo(v CreateImageRequestQuality) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateImageRequestQuality) Get() (v CreateImageRequestQuality, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateImageRequestQuality) Or(d CreateImageRequestQuality) CreateImageRequestQuality {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateMessageRequestMetadata returns new OptCreateMessageRequestMetadata with value set to v.
func NewOptCreateMessageRequestMetadata(v *CreateMessageRequestMetadata) OptCreateMessageRequestMetadata {
	return OptCreateMessageRequestMetadata{
		Value: v,
		Set:   true,
	}
}

// OptCreateMessageRequestMetadata is optional *CreateMessageRequestMetadata.
type OptCreateMessageRequestMetadata struct {
	Value *CreateMessageRequestMetadata
	Set   bool
}

// IsSet returns true if OptCreateMessageRequestMetadata was set.
func (o OptCreateMessageRequestMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateMessageRequestMetadata) Reset() {
	var v *CreateMessageRequestMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateMessageRequestMetadata) SetTo(v *CreateMessageRequestMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateMessageRequestMetadata) Get() (v *CreateMessageRequestMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateMessageRequestMetadata) Or(d *CreateMessageRequestMetadata) *CreateMessageRequestMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateRunRequestMetadata returns new OptCreateRunRequestMetadata with value set to v.
func NewOptCreateRunRequestMetadata(v *CreateRunRequestMetadata) OptCreateRunRequestMetadata {
	return OptCreateRunRequestMetadata{
		Value: v,
		Set:   true,
	}
}

// OptCreateRunRequestMetadata is optional *CreateRunRequestMetadata.
type OptCreateRunRequestMetadata struct {
	Value *CreateRunRequestMetadata
	Set   bool
}

// IsSet returns true if OptCreateRunRequestMetadata was set.
func (o OptCreateRunRequestMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateRunRequestMetadata) Reset() {
	var v *CreateRunRequestMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateRunRequestMetadata) SetTo(v *CreateRunRequestMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateRunRequestMetadata) Get() (v *CreateRunRequestMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateRunRequestMetadata) Or(d *CreateRunRequestMetadata) *CreateRunRequestMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateSpeechRequestResponseFormat returns new OptCreateSpeechRequestResponseFormat with value set to v.
func NewOptCreateSpeechRequestResponseFormat(v CreateSpeechRequestResponseFormat) OptCreateSpeechRequestResponseFormat {
	return OptCreateSpeechRequestResponseFormat{
		Value: v,
		Set:   true,
	}
}

// OptCreateSpeechRequestResponseFormat is optional CreateSpeechRequestResponseFormat.
type OptCreateSpeechRequestResponseFormat struct {
	Value CreateSpeechRequestResponseFormat
	Set   bool
}

// IsSet returns true if OptCreateSpeechRequestResponseFormat was set.
func (o OptCreateSpeechRequestResponseFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateSpeechRequestResponseFormat) Reset() {
	var v CreateSpeechRequestResponseFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateSpeechRequestResponseFormat) SetTo(v CreateSpeechRequestResponseFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateSpeechRequestResponseFormat) Get() (v CreateSpeechRequestResponseFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateSpeechRequestResponseFormat) Or(d CreateSpeechRequestResponseFormat) CreateSpeechRequestResponseFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateThreadAndRunRequestMetadata returns new OptCreateThreadAndRunRequestMetadata with value set to v.
func NewOptCreateThreadAndRunRequestMetadata(v *CreateThreadAndRunRequestMetadata) OptCreateThreadAndRunRequestMetadata {
	return OptCreateThreadAndRunRequestMetadata{
		Value: v,
		Set:   true,
	}
}

// OptCreateThreadAndRunRequestMetadata is optional *CreateThreadAndRunRequestMetadata.
type OptCreateThreadAndRunRequestMetadata struct {
	Value *CreateThreadAndRunRequestMetadata
	Set   bool
}

// IsSet returns true if OptCreateThreadAndRunRequestMetadata was set.
func (o OptCreateThreadAndRunRequestMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateThreadAndRunRequestMetadata) Reset() {
	var v *CreateThreadAndRunRequestMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateThreadAndRunRequestMetadata) SetTo(v *CreateThreadAndRunRequestMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateThreadAndRunRequestMetadata) Get() (v *CreateThreadAndRunRequestMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateThreadAndRunRequestMetadata) Or(d *CreateThreadAndRunRequestMetadata) *CreateThreadAndRunRequestMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateThreadRequest returns new OptCreateThreadRequest with value set to v.
func NewOptCreateThreadRequest(v CreateThreadRequest) OptCreateThreadRequest {
	return OptCreateThreadRequest{
		Value: v,
		Set:   true,
	}
}

// OptCreateThreadRequest is optional CreateThreadRequest.
type OptCreateThreadRequest struct {
	Value CreateThreadRequest
	Set   bool
}

// IsSet returns true if OptCreateThreadRequest was set.
func (o OptCreateThreadRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateThreadRequest) Reset() {
	var v CreateThreadRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateThreadRequest) SetTo(v CreateThreadRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateThreadRequest) Get() (v CreateThreadRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateThreadRequest) Or(d CreateThreadRequest) CreateThreadRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateThreadRequestMetadata returns new OptCreateThreadRequestMetadata with value set to v.
func NewOptCreateThreadRequestMetadata(v *CreateThreadRequestMetadata) OptCreateThreadRequestMetadata {
	return OptCreateThreadRequestMetadata{
		Value: v,
		Set:   true,
	}
}

// OptCreateThreadRequestMetadata is optional *CreateThreadRequestMetadata.
type OptCreateThreadRequestMetadata struct {
	Value *CreateThreadRequestMetadata
	Set   bool
}

// IsSet returns true if OptCreateThreadRequestMetadata was set.
func (o OptCreateThreadRequestMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateThreadRequestMetadata) Reset() {
	var v *CreateThreadRequestMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateThreadRequestMetadata) SetTo(v *CreateThreadRequestMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateThreadRequestMetadata) Get() (v *CreateThreadRequestMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateThreadRequestMetadata) Or(d *CreateThreadRequestMetadata) *CreateThreadRequestMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCreateTranscriptionRequestMultipartResponseFormat returns new OptCreateTranscriptionRequestMultipartResponseFormat with value set to v.
func NewOptCreateTranscriptionRequestMultipartResponseFormat(v CreateTranscriptionRequestMultipartResponseFormat) OptCreateTranscriptionRequestMultipartResponseFormat {
	return OptCreateTranscriptionRequestMultipartResponseFormat{
		Value: v,
		Set:   true,
	}
}

// OptCreateTranscriptionRequestMultipartResponseFormat is optional CreateTranscriptionRequestMultipartResponseFormat.
type OptCreateTranscriptionRequestMultipartResponseFormat struct {
	Value CreateTranscriptionRequestMultipartResponseFormat
	Set   bool
}

// IsSet returns true if OptCreateTranscriptionRequestMultipartResponseFormat was set.
func (o OptCreateTranscriptionRequestMultipartResponseFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCreateTranscriptionRequestMultipartResponseFormat) Reset() {
	var v CreateTranscriptionRequestMultipartResponseFormat
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCreateTranscriptionRequestMultipartResponseFormat) SetTo(v CreateTranscriptionRequestMultipartResponseFormat) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCreateTranscriptionRequestMultipartResponseFormat) Get() (v CreateTranscriptionRequestMultipartResponseFormat, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCreateTranscriptionRequestMultipartResponseFormat) Or(d CreateTranscriptionRequestMultipartResponseFormat) CreateTranscriptionRequestMultipartResponseFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFunctionParameters returns new OptFunctionParameters with value set to v.
func NewOptFunctionParameters(v FunctionParameters) OptFunctionParameters {
	return OptFunctionParameters{
		Value: v,
		Set:   true,
	}
}

// OptFunctionParameters is optional FunctionParameters.
type OptFunctionParameters struct {
	Value FunctionParameters
	Set   bool
}

// IsSet returns true if OptFunctionParameters was set.
func (o OptFunctionParameters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFunctionParameters) Reset() {
	var v FunctionParameters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFunctionParameters) SetTo(v FunctionParameters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFunctionParameters) Get() (v FunctionParameters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFunctionParameters) Or(d FunctionParameters) FunctionParameters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListAssistantFilesOrder returns new OptListAssistantFilesOrder with value set to v.
func NewOptListAssistantFilesOrder(v ListAssistantFilesOrder) OptListAssistantFilesOrder {
	return OptListAssistantFilesOrder{
		Value: v,
		Set:   true,
	}
}

// OptListAssistantFilesOrder is optional ListAssistantFilesOrder.
type OptListAssistantFilesOrder struct {
	Value ListAssistantFilesOrder
	Set   bool
}

// IsSet returns true if OptListAssistantFilesOrder was set.
func (o OptListAssistantFilesOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListAssistantFilesOrder) Reset() {
	var v ListAssistantFilesOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListAssistantFilesOrder) SetTo(v ListAssistantFilesOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListAssistantFilesOrder) Get() (v ListAssistantFilesOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListAssistantFilesOrder) Or(d ListAssistantFilesOrder) ListAssistantFilesOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListAssistantsOrder returns new OptListAssistantsOrder with value set to v.
func NewOptListAssistantsOrder(v ListAssistantsOrder) OptListAssistantsOrder {
	return OptListAssistantsOrder{
		Value: v,
		Set:   true,
	}
}

// OptListAssistantsOrder is optional ListAssistantsOrder.
type OptListAssistantsOrder struct {
	Value ListAssistantsOrder
	Set   bool
}

// IsSet returns true if OptListAssistantsOrder was set.
func (o OptListAssistantsOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListAssistantsOrder) Reset() {
	var v ListAssistantsOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListAssistantsOrder) SetTo(v ListAssistantsOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListAssistantsOrder) Get() (v ListAssistantsOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListAssistantsOrder) Or(d ListAssistantsOrder) ListAssistantsOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListMessageFilesOrder returns new OptListMessageFilesOrder with value set to v.
func NewOptListMessageFilesOrder(v ListMessageFilesOrder) OptListMessageFilesOrder {
	return OptListMessageFilesOrder{
		Value: v,
		Set:   true,
	}
}

// OptListMessageFilesOrder is optional ListMessageFilesOrder.
type OptListMessageFilesOrder struct {
	Value ListMessageFilesOrder
	Set   bool
}

// IsSet returns true if OptListMessageFilesOrder was set.
func (o OptListMessageFilesOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListMessageFilesOrder) Reset() {
	var v ListMessageFilesOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListMessageFilesOrder) SetTo(v ListMessageFilesOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListMessageFilesOrder) Get() (v ListMessageFilesOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListMessageFilesOrder) Or(d ListMessageFilesOrder) ListMessageFilesOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListMessagesOrder returns new OptListMessagesOrder with value set to v.
func NewOptListMessagesOrder(v ListMessagesOrder) OptListMessagesOrder {
	return OptListMessagesOrder{
		Value: v,
		Set:   true,
	}
}

// OptListMessagesOrder is optional ListMessagesOrder.
type OptListMessagesOrder struct {
	Value ListMessagesOrder
	Set   bool
}

// IsSet returns true if OptListMessagesOrder was set.
func (o OptListMessagesOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListMessagesOrder) Reset() {
	var v ListMessagesOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListMessagesOrder) SetTo(v ListMessagesOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListMessagesOrder) Get() (v ListMessagesOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListMessagesOrder) Or(d ListMessagesOrder) ListMessagesOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListRunStepsOrder returns new OptListRunStepsOrder with value set to v.
func NewOptListRunStepsOrder(v ListRunStepsOrder) OptListRunStepsOrder {
	return OptListRunStepsOrder{
		Value: v,
		Set:   true,
	}
}

// OptListRunStepsOrder is optional ListRunStepsOrder.
type OptListRunStepsOrder struct {
	Value ListRunStepsOrder
	Set   bool
}

// IsSet returns true if OptListRunStepsOrder was set.
func (o OptListRunStepsOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListRunStepsOrder) Reset() {
	var v ListRunStepsOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListRunStepsOrder) SetTo(v ListRunStepsOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListRunStepsOrder) Get() (v ListRunStepsOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListRunStepsOrder) Or(d ListRunStepsOrder) ListRunStepsOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListRunsOrder returns new OptListRunsOrder with value set to v.
func NewOptListRunsOrder(v ListRunsOrder) OptListRunsOrder {
	return OptListRunsOrder{
		Value: v,
		Set:   true,
	}
}

// OptListRunsOrder is optional ListRunsOrder.
type OptListRunsOrder struct {
	Value ListRunsOrder
	Set   bool
}

// IsSet returns true if OptListRunsOrder was set.
func (o OptListRunsOrder) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListRunsOrder) Reset() {
	var v ListRunsOrder
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListRunsOrder) SetTo(v ListRunsOrder) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListRunsOrder) Get() (v ListRunsOrder, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListRunsOrder) Or(d ListRunsOrder) ListRunsOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptModifyAssistantRequestMetadata returns new OptModifyAssistantRequestMetadata with value set to v.
func NewOptModifyAssistantRequestMetadata(v *ModifyAssistantRequestMetadata) OptModifyAssistantRequestMetadata {
	return OptModifyAssistantRequestMetadata{
		Value: v,
		Set:   true,
	}
}

// OptModifyAssistantRequestMetadata is optional *ModifyAssistantRequestMetadata.
type OptModifyAssistantRequestMetadata struct {
	Value *ModifyAssistantRequestMetadata
	Set   bool
}

// IsSet returns true if OptModifyAssistantRequestMetadata was set.
func (o OptModifyAssistantRequestMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptModifyAssistantRequestMetadata) Reset() {
	var v *ModifyAssistantRequestMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptModifyAssistantRequestMetadata) SetTo(v *ModifyAssistantRequestMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptModifyAssistantRequestMetadata) Get() (v *ModifyAssistantRequestMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptModifyAssistantRequestMetadata) Or(d *ModifyAssistantRequestMetadata) *ModifyAssistantRequestMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptModifyAssistantRequestModel returns new OptModifyAssistantRequestModel with value set to v.
func NewOptModifyAssistantRequestModel(v ModifyAssistantRequestModel) OptModifyAssistantRequestModel {
	return OptModifyAssistantRequestModel{
		Value: v,
		Set:   true,
	}
}

// OptModifyAssistantRequestModel is optional ModifyAssistantRequestModel.
type OptModifyAssistantRequestModel struct {
	Value ModifyAssistantRequestModel
	Set   bool
}

// IsSet returns true if OptModifyAssistantRequestModel was set.
func (o OptModifyAssistantRequestModel) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptModifyAssistantRequestModel) Reset() {
	var v ModifyAssistantRequestModel
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptModifyAssistantRequestModel) SetTo(v ModifyAssistantRequestModel) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptModifyAssistantRequestModel) Get() (v ModifyAssistantRequestModel, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptModifyAssistantRequestModel) Or(d ModifyAssistantRequestModel) ModifyAssistantRequestModel {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptModifyMessageRequestMetadata returns new OptModifyMessageRequestMetadata with value set to v.
func NewOptModifyMessageRequestMetadata(v *ModifyMessageRequestMetadata) OptModifyMessageRequestMetadata {
	return OptModifyMessageRequestMetadata{
		Value: v,
		Set:   true,
	}
}

// OptModifyMessageRequestMetadata is optional *ModifyMessageRequestMetadata.
type OptModifyMessageRequestMetadata struct {
	Value *ModifyMessageRequestMetadata
	Set   bool
}

// IsSet returns true if OptModifyMessageRequestMetadata was set.
func (o OptModifyMessageRequestMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptModifyMessageRequestMetadata) Reset() {
	var v *ModifyMessageRequestMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptModifyMessageRequestMetadata) SetTo(v *ModifyMessageRequestMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptModifyMessageRequestMetadata) Get() (v *ModifyMessageRequestMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptModifyMessageRequestMetadata) Or(d *ModifyMessageRequestMetadata) *ModifyMessageRequestMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptModifyRunRequestMetadata returns new OptModifyRunRequestMetadata with value set to v.
func NewOptModifyRunRequestMetadata(v *ModifyRunRequestMetadata) OptModifyRunRequestMetadata {
	return OptModifyRunRequestMetadata{
		Value: v,
		Set:   true,
	}
}

// OptModifyRunRequestMetadata is optional *ModifyRunRequestMetadata.
type OptModifyRunRequestMetadata struct {
	Value *ModifyRunRequestMetadata
	Set   bool
}

// IsSet returns true if OptModifyRunRequestMetadata was set.
func (o OptModifyRunRequestMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptModifyRunRequestMetadata) Reset() {
	var v *ModifyRunRequestMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptModifyRunRequestMetadata) SetTo(v *ModifyRunRequestMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptModifyRunRequestMetadata) Get() (v *ModifyRunRequestMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptModifyRunRequestMetadata) Or(d *ModifyRunRequestMetadata) *ModifyRunRequestMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptModifyThreadRequestMetadata returns new OptModifyThreadRequestMetadata with value set to v.
func NewOptModifyThreadRequestMetadata(v *ModifyThreadRequestMetadata) OptModifyThreadRequestMetadata {
	return OptModifyThreadRequestMetadata{
		Value: v,
		Set:   true,
	}
}

// OptModifyThreadRequestMetadata is optional *ModifyThreadRequestMetadata.
type OptModifyThreadRequestMetadata struct {
	Value *ModifyThreadRequestMetadata
	Set   bool
}

// IsSet returns true if OptModifyThreadRequestMetadata was set.
func (o OptModifyThreadRequestMetadata) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptModifyThreadRequestMetadata) Reset() {
	var v *ModifyThreadRequestMetadata
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptModifyThreadRequestMetadata) SetTo(v *ModifyThreadRequestMetadata) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptModifyThreadRequestMetadata) Get() (v *ModifyThreadRequestMetadata, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptModifyThreadRequestMetadata) Or(d *ModifyThreadRequestMetadata) *ModifyThreadRequestMetadata {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMultipartFile returns new OptMultipartFile with value set to v.
func NewOptMultipartFile(v ht.MultipartFile) OptMultipartFile {
	return OptMultipartFile{
		Value: v,
		Set:   true,
	}
}

// OptMultipartFile is optional ht.MultipartFile.
type OptMultipartFile struct {
	Value ht.MultipartFile
	Set   bool
}

// IsSet returns true if OptMultipartFile was set.
func (o OptMultipartFile) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMultipartFile) Reset() {
	var v ht.MultipartFile
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMultipartFile) SetTo(v ht.MultipartFile) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMultipartFile) Get() (v ht.MultipartFile, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMultipartFile) Or(d ht.MultipartFile) ht.MultipartFile {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilBool) SetToNull() {
	o.Set = true
	o.Null = true
	var v bool
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateChatCompletionRequestLogitBias returns new OptNilCreateChatCompletionRequestLogitBias with value set to v.
func NewOptNilCreateChatCompletionRequestLogitBias(v CreateChatCompletionRequestLogitBias) OptNilCreateChatCompletionRequestLogitBias {
	return OptNilCreateChatCompletionRequestLogitBias{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateChatCompletionRequestLogitBias is optional nullable CreateChatCompletionRequestLogitBias.
type OptNilCreateChatCompletionRequestLogitBias struct {
	Value CreateChatCompletionRequestLogitBias
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateChatCompletionRequestLogitBias was set.
func (o OptNilCreateChatCompletionRequestLogitBias) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateChatCompletionRequestLogitBias) Reset() {
	var v CreateChatCompletionRequestLogitBias
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateChatCompletionRequestLogitBias) SetTo(v CreateChatCompletionRequestLogitBias) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateChatCompletionRequestLogitBias) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateChatCompletionRequestLogitBias) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateChatCompletionRequestLogitBias
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateChatCompletionRequestLogitBias) Get() (v CreateChatCompletionRequestLogitBias, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateChatCompletionRequestLogitBias) Or(d CreateChatCompletionRequestLogitBias) CreateChatCompletionRequestLogitBias {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateImageEditRequestMultipartResponseFormat returns new OptNilCreateImageEditRequestMultipartResponseFormat with value set to v.
func NewOptNilCreateImageEditRequestMultipartResponseFormat(v CreateImageEditRequestMultipartResponseFormat) OptNilCreateImageEditRequestMultipartResponseFormat {
	return OptNilCreateImageEditRequestMultipartResponseFormat{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateImageEditRequestMultipartResponseFormat is optional nullable CreateImageEditRequestMultipartResponseFormat.
type OptNilCreateImageEditRequestMultipartResponseFormat struct {
	Value CreateImageEditRequestMultipartResponseFormat
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateImageEditRequestMultipartResponseFormat was set.
func (o OptNilCreateImageEditRequestMultipartResponseFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateImageEditRequestMultipartResponseFormat) Reset() {
	var v CreateImageEditRequestMultipartResponseFormat
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateImageEditRequestMultipartResponseFormat) SetTo(v CreateImageEditRequestMultipartResponseFormat) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateImageEditRequestMultipartResponseFormat) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateImageEditRequestMultipartResponseFormat) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateImageEditRequestMultipartResponseFormat
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateImageEditRequestMultipartResponseFormat) Get() (v CreateImageEditRequestMultipartResponseFormat, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateImageEditRequestMultipartResponseFormat) Or(d CreateImageEditRequestMultipartResponseFormat) CreateImageEditRequestMultipartResponseFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateImageEditRequestMultipartSize returns new OptNilCreateImageEditRequestMultipartSize with value set to v.
func NewOptNilCreateImageEditRequestMultipartSize(v CreateImageEditRequestMultipartSize) OptNilCreateImageEditRequestMultipartSize {
	return OptNilCreateImageEditRequestMultipartSize{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateImageEditRequestMultipartSize is optional nullable CreateImageEditRequestMultipartSize.
type OptNilCreateImageEditRequestMultipartSize struct {
	Value CreateImageEditRequestMultipartSize
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateImageEditRequestMultipartSize was set.
func (o OptNilCreateImageEditRequestMultipartSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateImageEditRequestMultipartSize) Reset() {
	var v CreateImageEditRequestMultipartSize
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateImageEditRequestMultipartSize) SetTo(v CreateImageEditRequestMultipartSize) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateImageEditRequestMultipartSize) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateImageEditRequestMultipartSize) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateImageEditRequestMultipartSize
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateImageEditRequestMultipartSize) Get() (v CreateImageEditRequestMultipartSize, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateImageEditRequestMultipartSize) Or(d CreateImageEditRequestMultipartSize) CreateImageEditRequestMultipartSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateImageRequestResponseFormat returns new OptNilCreateImageRequestResponseFormat with value set to v.
func NewOptNilCreateImageRequestResponseFormat(v CreateImageRequestResponseFormat) OptNilCreateImageRequestResponseFormat {
	return OptNilCreateImageRequestResponseFormat{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateImageRequestResponseFormat is optional nullable CreateImageRequestResponseFormat.
type OptNilCreateImageRequestResponseFormat struct {
	Value CreateImageRequestResponseFormat
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateImageRequestResponseFormat was set.
func (o OptNilCreateImageRequestResponseFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateImageRequestResponseFormat) Reset() {
	var v CreateImageRequestResponseFormat
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateImageRequestResponseFormat) SetTo(v CreateImageRequestResponseFormat) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateImageRequestResponseFormat) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateImageRequestResponseFormat) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateImageRequestResponseFormat
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateImageRequestResponseFormat) Get() (v CreateImageRequestResponseFormat, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateImageRequestResponseFormat) Or(d CreateImageRequestResponseFormat) CreateImageRequestResponseFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateImageRequestSize returns new OptNilCreateImageRequestSize with value set to v.
func NewOptNilCreateImageRequestSize(v CreateImageRequestSize) OptNilCreateImageRequestSize {
	return OptNilCreateImageRequestSize{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateImageRequestSize is optional nullable CreateImageRequestSize.
type OptNilCreateImageRequestSize struct {
	Value CreateImageRequestSize
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateImageRequestSize was set.
func (o OptNilCreateImageRequestSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateImageRequestSize) Reset() {
	var v CreateImageRequestSize
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateImageRequestSize) SetTo(v CreateImageRequestSize) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateImageRequestSize) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateImageRequestSize) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateImageRequestSize
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateImageRequestSize) Get() (v CreateImageRequestSize, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateImageRequestSize) Or(d CreateImageRequestSize) CreateImageRequestSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateImageRequestStyle returns new OptNilCreateImageRequestStyle with value set to v.
func NewOptNilCreateImageRequestStyle(v CreateImageRequestStyle) OptNilCreateImageRequestStyle {
	return OptNilCreateImageRequestStyle{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateImageRequestStyle is optional nullable CreateImageRequestStyle.
type OptNilCreateImageRequestStyle struct {
	Value CreateImageRequestStyle
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateImageRequestStyle was set.
func (o OptNilCreateImageRequestStyle) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateImageRequestStyle) Reset() {
	var v CreateImageRequestStyle
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateImageRequestStyle) SetTo(v CreateImageRequestStyle) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateImageRequestStyle) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateImageRequestStyle) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateImageRequestStyle
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateImageRequestStyle) Get() (v CreateImageRequestStyle, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateImageRequestStyle) Or(d CreateImageRequestStyle) CreateImageRequestStyle {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateImageVariationRequestMultipartResponseFormat returns new OptNilCreateImageVariationRequestMultipartResponseFormat with value set to v.
func NewOptNilCreateImageVariationRequestMultipartResponseFormat(v CreateImageVariationRequestMultipartResponseFormat) OptNilCreateImageVariationRequestMultipartResponseFormat {
	return OptNilCreateImageVariationRequestMultipartResponseFormat{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateImageVariationRequestMultipartResponseFormat is optional nullable CreateImageVariationRequestMultipartResponseFormat.
type OptNilCreateImageVariationRequestMultipartResponseFormat struct {
	Value CreateImageVariationRequestMultipartResponseFormat
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateImageVariationRequestMultipartResponseFormat was set.
func (o OptNilCreateImageVariationRequestMultipartResponseFormat) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateImageVariationRequestMultipartResponseFormat) Reset() {
	var v CreateImageVariationRequestMultipartResponseFormat
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateImageVariationRequestMultipartResponseFormat) SetTo(v CreateImageVariationRequestMultipartResponseFormat) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateImageVariationRequestMultipartResponseFormat) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateImageVariationRequestMultipartResponseFormat) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateImageVariationRequestMultipartResponseFormat
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateImageVariationRequestMultipartResponseFormat) Get() (v CreateImageVariationRequestMultipartResponseFormat, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateImageVariationRequestMultipartResponseFormat) Or(d CreateImageVariationRequestMultipartResponseFormat) CreateImageVariationRequestMultipartResponseFormat {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateImageVariationRequestMultipartSize returns new OptNilCreateImageVariationRequestMultipartSize with value set to v.
func NewOptNilCreateImageVariationRequestMultipartSize(v CreateImageVariationRequestMultipartSize) OptNilCreateImageVariationRequestMultipartSize {
	return OptNilCreateImageVariationRequestMultipartSize{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateImageVariationRequestMultipartSize is optional nullable CreateImageVariationRequestMultipartSize.
type OptNilCreateImageVariationRequestMultipartSize struct {
	Value CreateImageVariationRequestMultipartSize
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateImageVariationRequestMultipartSize was set.
func (o OptNilCreateImageVariationRequestMultipartSize) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateImageVariationRequestMultipartSize) Reset() {
	var v CreateImageVariationRequestMultipartSize
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateImageVariationRequestMultipartSize) SetTo(v CreateImageVariationRequestMultipartSize) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateImageVariationRequestMultipartSize) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateImageVariationRequestMultipartSize) SetToNull() {
	o.Set = true
	o.Null = true
	var v CreateImageVariationRequestMultipartSize
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateImageVariationRequestMultipartSize) Get() (v CreateImageVariationRequestMultipartSize, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateImageVariationRequestMultipartSize) Or(d CreateImageVariationRequestMultipartSize) CreateImageVariationRequestMultipartSize {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateRunRequestToolsItemArray returns new OptNilCreateRunRequestToolsItemArray with value set to v.
func NewOptNilCreateRunRequestToolsItemArray(v []CreateRunRequestToolsItem) OptNilCreateRunRequestToolsItemArray {
	return OptNilCreateRunRequestToolsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateRunRequestToolsItemArray is optional nullable []CreateRunRequestToolsItem.
type OptNilCreateRunRequestToolsItemArray struct {
	Value []CreateRunRequestToolsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateRunRequestToolsItemArray was set.
func (o OptNilCreateRunRequestToolsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateRunRequestToolsItemArray) Reset() {
	var v []CreateRunRequestToolsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateRunRequestToolsItemArray) SetTo(v []CreateRunRequestToolsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateRunRequestToolsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateRunRequestToolsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []CreateRunRequestToolsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateRunRequestToolsItemArray) Get() (v []CreateRunRequestToolsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateRunRequestToolsItemArray) Or(d []CreateRunRequestToolsItem) []CreateRunRequestToolsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilCreateThreadAndRunRequestToolsItemArray returns new OptNilCreateThreadAndRunRequestToolsItemArray with value set to v.
func NewOptNilCreateThreadAndRunRequestToolsItemArray(v []CreateThreadAndRunRequestToolsItem) OptNilCreateThreadAndRunRequestToolsItemArray {
	return OptNilCreateThreadAndRunRequestToolsItemArray{
		Value: v,
		Set:   true,
	}
}

// OptNilCreateThreadAndRunRequestToolsItemArray is optional nullable []CreateThreadAndRunRequestToolsItem.
type OptNilCreateThreadAndRunRequestToolsItemArray struct {
	Value []CreateThreadAndRunRequestToolsItem
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilCreateThreadAndRunRequestToolsItemArray was set.
func (o OptNilCreateThreadAndRunRequestToolsItemArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilCreateThreadAndRunRequestToolsItemArray) Reset() {
	var v []CreateThreadAndRunRequestToolsItem
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilCreateThreadAndRunRequestToolsItemArray) SetTo(v []CreateThreadAndRunRequestToolsItem) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilCreateThreadAndRunRequestToolsItemArray) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilCreateThreadAndRunRequestToolsItemArray) SetToNull() {
	o.Set = true
	o.Null = true
	var v []CreateThreadAndRunRequestToolsItem
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilCreateThreadAndRunRequestToolsItemArray) Get() (v []CreateThreadAndRunRequestToolsItem, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilCreateThreadAndRunRequestToolsItemArray) Or(d []CreateThreadAndRunRequestToolsItem) []CreateThreadAndRunRequestToolsItem {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilFloat64 returns new OptNilFloat64 with value set to v.
func NewOptNilFloat64(v float64) OptNilFloat64 {
	return OptNilFloat64{
		Value: v,
		Set:   true,
	}
}

// OptNilFloat64 is optional nullable float64.
type OptNilFloat64 struct {
	Value float64
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilFloat64 was set.
func (o OptNilFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilFloat64) SetTo(v float64) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilFloat64) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilFloat64) SetToNull() {
	o.Set = true
	o.Null = true
	var v float64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilFloat64) Get() (v float64, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilInt returns new OptNilInt with value set to v.
func NewOptNilInt(v int) OptNilInt {
	return OptNilInt{
		Value: v,
		Set:   true,
	}
}

// OptNilInt is optional nullable int.
type OptNilInt struct {
	Value int
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilInt was set.
func (o OptNilInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilInt) SetTo(v int) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilInt) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilInt) SetToNull() {
	o.Set = true
	o.Null = true
	var v int
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilInt) Get() (v int, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Usage statistics related to the run. This value will be `null` if the run is not in a terminal
// state (i.e. `in_progress`, `queued`, etc.).
// Ref: #/components/schemas/RunCompletionUsage
type RunCompletionUsage struct {
	// Number of completion tokens used over the course of the run.
	CompletionTokens int `json:"completion_tokens"`
	// Number of prompt tokens used over the course of the run.
	PromptTokens int `json:"prompt_tokens"`
	// Total number of tokens used (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// GetCompletionTokens returns the value of CompletionTokens.
func (s *RunCompletionUsage) GetCompletionTokens() int {
	return s.CompletionTokens
}

// GetPromptTokens returns the value of PromptTokens.
func (s *RunCompletionUsage) GetPromptTokens() int {
	return s.PromptTokens
}

// GetTotalTokens returns the value of TotalTokens.
func (s *RunCompletionUsage) GetTotalTokens() int {
	return s.TotalTokens
}

// SetCompletionTokens sets the value of CompletionTokens.
func (s *RunCompletionUsage) SetCompletionTokens(val int) {
	s.CompletionTokens = val
}

// SetPromptTokens sets the value of PromptTokens.
func (s *RunCompletionUsage) SetPromptTokens(val int) {
	s.PromptTokens = val
}

// SetTotalTokens sets the value of TotalTokens.
func (s *RunCompletionUsage) SetTotalTokens(val int) {
	s.TotalTokens = val
}

// Represents an execution run on a [thread](/docs/api-reference/threads).
// Ref: #/components/schemas/RunObject
type RunObject struct {
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `thread.run`.
	Object RunObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the run was created.
	CreatedAt int `json:"created_at"`
	// The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
	ThreadID string `json:"thread_id"`
	// The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
	AssistantID string `json:"assistant_id"`
	// The status of the run, which can be either `queued`, `in_progress`, `requires_action`,
	// `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
	Status RunObjectStatus `json:"status"`
	// Details on the action required to continue the run. Will be `null` if no action is required.
	RequiredAction NilRunObjectRequiredAction `json:"required_action"`
	// The last error associated with this run. Will be `null` if there are no errors.
	LastError NilRunObjectLastError `json:"last_error"`
	// The Unix timestamp (in seconds) for when the run will expire.
	ExpiresAt int `json:"expires_at"`
	// The Unix timestamp (in seconds) for when the run was started.
	StartedAt NilInt `json:"started_at"`
	// The Unix timestamp (in seconds) for when the run was cancelled.
	CancelledAt NilInt `json:"cancelled_at"`
	// The Unix timestamp (in seconds) for when the run failed.
	FailedAt NilInt `json:"failed_at"`
	// The Unix timestamp (in seconds) for when the run was completed.
	CompletedAt NilInt `json:"completed_at"`
	// The model that the [assistant](/docs/api-reference/assistants) used for this run.
	Model string `json:"model"`
	// The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
	Instructions string `json:"instructions"`
	// The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
	Tools []RunObjectToolsItem `json:"tools"`
	// The list of [File](/docs/api-reference/files) IDs the [assistant](/docs/api-reference/assistants)
	// used for this run.
	FileIds []string `json:"file_ids"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata *RunObjectMetadata    `json:"metadata"`
	Usage    NilRunCompletionUsage `json:"usage"`
}

// GetID returns the value of ID.
func (s *RunObject) GetID() string {
	return s.ID
}

// GetObject returns the value of Object.
func (s *RunObject) GetObject() RunObjectObject {
	return s.Object
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RunObject) GetCreatedAt() int {
	return s.CreatedAt
}

// GetThreadID returns the value of ThreadID.
func (s *RunObject) GetThreadID() string {
	return s.ThreadID
}

// GetAssistantID returns the value of AssistantID.
func (s *RunObject) GetAssistantID() string {
	return s.AssistantID
}

// GetStatus returns the value of Status.
func (s *RunObject) GetStatus() RunObjectStatus {
	return s.Status
}

// GetRequiredAction returns the value of RequiredAction.
func (s *RunObject) GetRequiredAction() NilRunObjectRequiredAction {
	return s.RequiredAction
}

// GetLastError returns the value of LastError.
func (s *RunObject) GetLastError() NilRunObjectLastError {
	return s.LastError
}

// GetExpiresAt returns the value of ExpiresAt.
func (s *RunObject) GetExpiresAt() int {
	return s.ExpiresAt
}

// GetStartedAt returns the value of StartedAt.
func (s *RunObject) GetStartedAt() NilInt {
	return s.StartedAt
}

// GetCancelledAt returns the value of CancelledAt.
func (s *RunObject) GetCancelledAt() NilInt {
	return s.CancelledAt
}

// GetFailedAt returns the value of FailedAt.
func (s *RunObject) GetFailedAt() NilInt {
	return s.FailedAt
}

// GetCompletedAt returns the value of CompletedAt.
func (s *RunObject) GetCompletedAt() NilInt {
	return s.CompletedAt
}

// GetModel returns the value of Model.
func (s *RunObject) GetModel() string {
	return s.Model
}

// GetInstructions returns the value of Instructions.
func (s *RunObject) GetInstructions() string {
	return s.Instructions
}

// GetTools returns the value of Tools.
func (s *RunObject) GetTools() []RunObjectToolsItem {
	return s.Tools
}

// GetFileIds returns the value of FileIds.
func (s *RunObject) GetFileIds() []string {
	return s.FileIds
}

// GetMetadata returns the value of Metadata.
func (s *RunObject) GetMetadata() *RunObjectMetadata {
	return s.Metadata
}

// GetUsage returns the value of Usage.
func (s *RunObject) GetUsage() NilRunCompletionUsage {
	return s.Usage
}

// SetID sets the value of ID.
func (s *RunObject) SetID(val string) {
	s.ID = val
}

// SetObject sets the value of Object.
func (s *RunObject) SetObject(val RunObjectObject) {
	s.Object = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RunObject) SetCreatedAt(val int) {
	s.CreatedAt = val
}

// SetThreadID sets the value of ThreadID.
func (s *RunObject) SetThreadID(val string) {
	s.ThreadID = val
}

// SetAssistantID sets the value of AssistantID.
func (s *RunObject) SetAssistantID(val string) {
	s.AssistantID = val
}

// SetStatus sets the value of Status.
func (s *RunObject) SetStatus(val RunObjectStatus) {
	s.Status = val
}

// SetRequiredAction sets the value of RequiredAction.
func (s *RunObject) SetRequiredAction(val NilRunObjectRequiredAction) {
	s.RequiredAction = val
}

// SetLastError sets the value of LastError.
func (s *RunObject) SetLastError(val NilRunObjectLastError) {
	s.LastError = val
}

// SetExpiresAt sets the value of ExpiresAt.
func (s *RunObject) SetExpiresAt(val int) {
	s.ExpiresAt = val
}

// SetStartedAt sets the value of StartedAt.
func (s *RunObject) SetStartedAt(val NilInt) {
	s.StartedAt = val
}

// SetCancelledAt sets the value of CancelledAt.
func (s *RunObject) SetCancelledAt(val NilInt) {
	s.CancelledAt = val
}

// SetFailedAt sets the value of FailedAt.
func (s *RunObject) SetFailedAt(val NilInt) {
	s.FailedAt = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *RunObject) SetCompletedAt(val NilInt) {
	s.CompletedAt = val
}

// SetModel sets the value of Model.
func (s *RunObject) SetModel(val string) {
	s.Model = val
}

// SetInstructions sets the value of Instructions.
func (s *RunObject) SetInstructions(val string) {
	s.Instructions = val
}

// SetTools sets the value of Tools.
func (s *RunObject) SetTools(val []RunObjectToolsItem) {
	s.Tools = val
}

// SetFileIds sets the value of FileIds.
func (s *RunObject) SetFileIds(val []string) {
	s.FileIds = val
}

// SetMetadata sets the value of Metadata.
func (s *RunObject) SetMetadata(val *RunObjectMetadata) {
	s.Metadata = val
}

// SetUsage sets the value of Usage.
func (s *RunObject) SetUsage(val NilRunCompletionUsage) {
	s.Usage = val
}

// The last error associated with this run. Will be `null` if there are no errors.
type RunObjectLastError struct {
	// One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
	Code RunObjectLastErrorCode `json:"code"`
	// A human-readable description of the error.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *RunObjectLastError) GetCode() RunObjectLastErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *RunObjectLastError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *RunObjectLastError) SetCode(val RunObjectLastErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *RunObjectLastError) SetMessage(val string) {
	s.Message = val
}

// One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
type RunObjectLastErrorCode string

const (
	RunObjectLastErrorCodeServerError       RunObjectLastErrorCode = "server_error"
	RunObjectLastErrorCodeRateLimitExceeded RunObjectLastErrorCode = "rate_limit_exceeded"
	RunObjectLastErrorCodeInvalidPrompt     RunObjectLastErrorCode = "invalid_prompt"
)

// AllValues returns all RunObjectLastErrorCode values.
func (RunObjectLastErrorCode) AllValues() []RunObjectLastErrorCode {
	return []RunObjectLastErrorCode{
		RunObjectLastErrorCodeServerError,
		RunObjectLastErrorCodeRateLimitExceeded,
		RunObjectLastErrorCodeInvalidPrompt,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunObjectLastErrorCode) MarshalText() ([]byte, error) {
	switch s {
	case RunObjectLastErrorCodeServerError:
		return []byte(s), nil
	case RunObjectLastErrorCodeRateLimitExceeded:
		return []byte(s), nil
	case RunObjectLastErrorCodeInvalidPrompt:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunObjectLastErrorCode) UnmarshalText(data []byte) error {
	switch RunObjectLastErrorCode(data) {
	case RunObjectLastErrorCodeServerError:
		*s = RunObjectLastErrorCodeServerError
		return nil
	case RunObjectLastErrorCodeRateLimitExceeded:
		*s = RunObjectLastErrorCodeRateLimitExceeded
		return nil
	case RunObjectLastErrorCodeInvalidPrompt:
		*s = RunObjectLastErrorCodeInvalidPrompt
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type RunObjectMetadata struct{}

// The object type, which is always `thread.run`.
type RunObjectObject string

const (
	RunObjectObjectThreadRun RunObjectObject = "thread.run"
)

// AllValues returns all RunObjectObject values.
func (RunObjectObject) AllValues() []RunObjectObject {
	return []RunObjectObject{
		RunObjectObjectThreadRun,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunObjectObject) MarshalText() ([]byte, error) {
	switch s {
	case RunObjectObjectThreadRun:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunObjectObject) UnmarshalText(data []byte) error {
	switch RunObjectObject(data) {
	case RunObjectObjectThreadRun:
		*s = RunObjectObjectThreadRun
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Details on the action required to continue the run. Will be `null` if no action is required.
type RunObjectRequiredAction struct {
	// For now, this is always `submit_tool_outputs`.
	Type RunObjectRequiredActionType `json:"type"`
	// Details on the tool outputs needed for this run to continue.
	SubmitToolOutputs RunObjectRequiredActionSubmitToolOutputs `json:"submit_tool_outputs"`
}

// GetType returns the value of Type.
func (s *RunObjectRequiredAction) GetType() RunObjectRequiredActionType {
	return s.Type
}

// GetSubmitToolOutputs returns the value of SubmitToolOutputs.
func (s *RunObjectRequiredAction) GetSubmitToolOutputs() RunObjectRequiredActionSubmitToolOutputs {
	return s.SubmitToolOutputs
}

// SetType sets the value of Type.
func (s *RunObjectRequiredAction) SetType(val RunObjectRequiredActionType) {
	s.Type = val
}

// SetSubmitToolOutputs sets the value of SubmitToolOutputs.
func (s *RunObjectRequiredAction) SetSubmitToolOutputs(val RunObjectRequiredActionSubmitToolOutputs) {
	s.SubmitToolOutputs = val
}

// Details on the tool outputs needed for this run to continue.
type RunObjectRequiredActionSubmitToolOutputs struct {
	// A list of the relevant tool calls.
	ToolCalls []RunToolCallObject `json:"tool_calls"`
}

// GetToolCalls returns the value of ToolCalls.
func (s *RunObjectRequiredActionSubmitToolOutputs) GetToolCalls() []RunToolCallObject {
	return s.ToolCalls
}

// SetToolCalls sets the value of ToolCalls.
func (s *RunObjectRequiredActionSubmitToolOutputs) SetToolCalls(val []RunToolCallObject) {
	s.ToolCalls = val
}

// For now, this is always `submit_tool_outputs`.
type RunObjectRequiredActionType string

const (
	RunObjectRequiredActionTypeSubmitToolOutputs RunObjectRequiredActionType = "submit_tool_outputs"
)

// AllValues returns all RunObjectRequiredActionType values.
func (RunObjectRequiredActionType) AllValues() []RunObjectRequiredActionType {
	return []RunObjectRequiredActionType{
		RunObjectRequiredActionTypeSubmitToolOutputs,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunObjectRequiredActionType) MarshalText() ([]byte, error) {
	switch s {
	case RunObjectRequiredActionTypeSubmitToolOutputs:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunObjectRequiredActionType) UnmarshalText(data []byte) error {
	switch RunObjectRequiredActionType(data) {
	case RunObjectRequiredActionTypeSubmitToolOutputs:
		*s = RunObjectRequiredActionTypeSubmitToolOutputs
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the run, which can be either `queued`, `in_progress`, `requires_action`,
// `cancelling`, `cancelled`, `failed`, `completed`, or `expired`.
type RunObjectStatus string

const (
	RunObjectStatusQueued         RunObjectStatus = "queued"
	RunObjectStatusInProgress     RunObjectStatus = "in_progress"
	RunObjectStatusRequiresAction RunObjectStatus = "requires_action"
	RunObjectStatusCancelling     RunObjectStatus = "cancelling"
	RunObjectStatusCancelled      RunObjectStatus = "cancelled"
	RunObjectStatusFailed         RunObjectStatus = "failed"
	RunObjectStatusCompleted      RunObjectStatus = "completed"
	RunObjectStatusExpired        RunObjectStatus = "expired"
)

// AllValues returns all RunObjectStatus values.
func (RunObjectStatus) AllValues() []RunObjectStatus {
	return []RunObjectStatus{
		RunObjectStatusQueued,
		RunObjectStatusInProgress,
		RunObjectStatusRequiresAction,
		RunObjectStatusCancelling,
		RunObjectStatusCancelled,
		RunObjectStatusFailed,
		RunObjectStatusCompleted,
		RunObjectStatusExpired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunObjectStatus) MarshalText() ([]byte, error) {
	switch s {
	case RunObjectStatusQueued:
		return []byte(s), nil
	case RunObjectStatusInProgress:
		return []byte(s), nil
	case RunObjectStatusRequiresAction:
		return []byte(s), nil
	case RunObjectStatusCancelling:
		return []byte(s), nil
	case RunObjectStatusCancelled:
		return []byte(s), nil
	case RunObjectStatusFailed:
		return []byte(s), nil
	case RunObjectStatusCompleted:
		return []byte(s), nil
	case RunObjectStatusExpired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunObjectStatus) UnmarshalText(data []byte) error {
	switch RunObjectStatus(data) {
	case RunObjectStatusQueued:
		*s = RunObjectStatusQueued
		return nil
	case RunObjectStatusInProgress:
		*s = RunObjectStatusInProgress
		return nil
	case RunObjectStatusRequiresAction:
		*s = RunObjectStatusRequiresAction
		return nil
	case RunObjectStatusCancelling:
		*s = RunObjectStatusCancelling
		return nil
	case RunObjectStatusCancelled:
		*s = RunObjectStatusCancelled
		return nil
	case RunObjectStatusFailed:
		*s = RunObjectStatusFailed
		return nil
	case RunObjectStatusCompleted:
		*s = RunObjectStatusCompleted
		return nil
	case RunObjectStatusExpired:
		*s = RunObjectStatusExpired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// RunObjectToolsItem represents sum type.
type RunObjectToolsItem struct {
	Type                    RunObjectToolsItemType // switch on this field
	AssistantToolsCode      AssistantToolsCode
	AssistantToolsRetrieval AssistantToolsRetrieval
	AssistantToolsFunction  AssistantToolsFunction
}

// RunObjectToolsItemType is oneOf type of RunObjectToolsItem.
type RunObjectToolsItemType string

// Possible values for RunObjectToolsItemType.
const (
	AssistantToolsCodeRunObjectToolsItem      RunObjectToolsItemType = "code_interpreter"
	AssistantToolsRetrievalRunObjectToolsItem RunObjectToolsItemType = "retrieval"
	AssistantToolsFunctionRunObjectToolsItem  RunObjectToolsItemType = "function"
)

// IsAssistantToolsCode reports whether RunObjectToolsItem is AssistantToolsCode.
func (s RunObjectToolsItem) IsAssistantToolsCode() bool {
	return s.Type == AssistantToolsCodeRunObjectToolsItem
}

// IsAssistantToolsRetrieval reports whether RunObjectToolsItem is AssistantToolsRetrieval.
func (s RunObjectToolsItem) IsAssistantToolsRetrieval() bool {
	return s.Type == AssistantToolsRetrievalRunObjectToolsItem
}

// IsAssistantToolsFunction reports whether RunObjectToolsItem is AssistantToolsFunction.
func (s RunObjectToolsItem) IsAssistantToolsFunction() bool {
	return s.Type == AssistantToolsFunctionRunObjectToolsItem
}

// SetAssistantToolsCode sets RunObjectToolsItem to AssistantToolsCode.
func (s *RunObjectToolsItem) SetAssistantToolsCode(v AssistantToolsCode) {
	s.Type = AssistantToolsCodeRunObjectToolsItem
	s.AssistantToolsCode = v
}

// GetAssistantToolsCode returns AssistantToolsCode and true boolean if RunObjectToolsItem is AssistantToolsCode.
func (s RunObjectToolsItem) GetAssistantToolsCode() (v AssistantToolsCode, ok bool) {
	if !s.IsAssistantToolsCode() {
		return v, false
	}
	return s.AssistantToolsCode, true
}

// NewAssistantToolsCodeRunObjectToolsItem returns new RunObjectToolsItem from AssistantToolsCode.
func NewAssistantToolsCodeRunObjectToolsItem(v AssistantToolsCode) RunObjectToolsItem {
	var s RunObjectToolsItem
	s.SetAssistantToolsCode(v)
	return s
}

// SetAssistantToolsRetrieval sets RunObjectToolsItem to AssistantToolsRetrieval.
func (s *RunObjectToolsItem) SetAssistantToolsRetrieval(v AssistantToolsRetrieval) {
	s.Type = AssistantToolsRetrievalRunObjectToolsItem
	s.AssistantToolsRetrieval = v
}

// GetAssistantToolsRetrieval returns AssistantToolsRetrieval and true boolean if RunObjectToolsItem is AssistantToolsRetrieval.
func (s RunObjectToolsItem) GetAssistantToolsRetrieval() (v AssistantToolsRetrieval, ok bool) {
	if !s.IsAssistantToolsRetrieval() {
		return v, false
	}
	return s.AssistantToolsRetrieval, true
}

// NewAssistantToolsRetrievalRunObjectToolsItem returns new RunObjectToolsItem from AssistantToolsRetrieval.
func NewAssistantToolsRetrievalRunObjectToolsItem(v AssistantToolsRetrieval) RunObjectToolsItem {
	var s RunObjectToolsItem
	s.SetAssistantToolsRetrieval(v)
	return s
}

// SetAssistantToolsFunction sets RunObjectToolsItem to AssistantToolsFunction.
func (s *RunObjectToolsItem) SetAssistantToolsFunction(v AssistantToolsFunction) {
	s.Type = AssistantToolsFunctionRunObjectToolsItem
	s.AssistantToolsFunction = v
}

// GetAssistantToolsFunction returns AssistantToolsFunction and true boolean if RunObjectToolsItem is AssistantToolsFunction.
func (s RunObjectToolsItem) GetAssistantToolsFunction() (v AssistantToolsFunction, ok bool) {
	if !s.IsAssistantToolsFunction() {
		return v, false
	}
	return s.AssistantToolsFunction, true
}

// NewAssistantToolsFunctionRunObjectToolsItem returns new RunObjectToolsItem from AssistantToolsFunction.
func NewAssistantToolsFunctionRunObjectToolsItem(v AssistantToolsFunction) RunObjectToolsItem {
	var s RunObjectToolsItem
	s.SetAssistantToolsFunction(v)
	return s
}

// Usage statistics related to the run step. This value will be `null` while the run step's status is
// `in_progress`.
// Ref: #/components/schemas/RunStepCompletionUsage
type RunStepCompletionUsage struct {
	// Number of completion tokens used over the course of the run step.
	CompletionTokens int `json:"completion_tokens"`
	// Number of prompt tokens used over the course of the run step.
	PromptTokens int `json:"prompt_tokens"`
	// Total number of tokens used (prompt + completion).
	TotalTokens int `json:"total_tokens"`
}

// GetCompletionTokens returns the value of CompletionTokens.
func (s *RunStepCompletionUsage) GetCompletionTokens() int {
	return s.CompletionTokens
}

// GetPromptTokens returns the value of PromptTokens.
func (s *RunStepCompletionUsage) GetPromptTokens() int {
	return s.PromptTokens
}

// GetTotalTokens returns the value of TotalTokens.
func (s *RunStepCompletionUsage) GetTotalTokens() int {
	return s.TotalTokens
}

// SetCompletionTokens sets the value of CompletionTokens.
func (s *RunStepCompletionUsage) SetCompletionTokens(val int) {
	s.CompletionTokens = val
}

// SetPromptTokens sets the value of PromptTokens.
func (s *RunStepCompletionUsage) SetPromptTokens(val int) {
	s.PromptTokens = val
}

// SetTotalTokens sets the value of TotalTokens.
func (s *RunStepCompletionUsage) SetTotalTokens(val int) {
	s.TotalTokens = val
}

// Details of the message creation by the run step.
// Ref: #/components/schemas/RunStepDetailsMessageCreationObject
type RunStepDetailsMessageCreationObject struct {
	// Always `message_creation`.
	Type            RunStepDetailsMessageCreationObjectType            `json:"type"`
	MessageCreation RunStepDetailsMessageCreationObjectMessageCreation `json:"message_creation"`
}

// GetType returns the value of Type.
func (s *RunStepDetailsMessageCreationObject) GetType() RunStepDetailsMessageCreationObjectType {
	return s.Type
}

// GetMessageCreation returns the value of MessageCreation.
func (s *RunStepDetailsMessageCreationObject) GetMessageCreation() RunStepDetailsMessageCreationObjectMessageCreation {
	return s.MessageCreation
}

// SetType sets the value of Type.
func (s *RunStepDetailsMessageCreationObject) SetType(val RunStepDetailsMessageCreationObjectType) {
	s.Type = val
}

// SetMessageCreation sets the value of MessageCreation.
func (s *RunStepDetailsMessageCreationObject) SetMessageCreation(val RunStepDetailsMessageCreationObjectMessageCreation) {
	s.MessageCreation = val
}

type RunStepDetailsMessageCreationObjectMessageCreation struct {
	// The ID of the message that was created by this run step.
	MessageID string `json:"message_id"`
}

// GetMessageID returns the value of MessageID.
func (s *RunStepDetailsMessageCreationObjectMessageCreation) GetMessageID() string {
	return s.MessageID
}

// SetMessageID sets the value of MessageID.
func (s *RunStepDetailsMessageCreationObjectMessageCreation) SetMessageID(val string) {
	s.MessageID = val
}

// Always `message_creation`.
type RunStepDetailsMessageCreationObjectType string

const (
	RunStepDetailsMessageCreationObjectTypeMessageCreation RunStepDetailsMessageCreationObjectType = "message_creation"
)

// AllValues returns all RunStepDetailsMessageCreationObjectType values.
func (RunStepDetailsMessageCreationObjectType) AllValues() []RunStepDetailsMessageCreationObjectType {
	return []RunStepDetailsMessageCreationObjectType{
		RunStepDetailsMessageCreationObjectTypeMessageCreation,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepDetailsMessageCreationObjectType) MarshalText() ([]byte, error) {
	switch s {
	case RunStepDetailsMessageCreationObjectTypeMessageCreation:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepDetailsMessageCreationObjectType) UnmarshalText(data []byte) error {
	switch RunStepDetailsMessageCreationObjectType(data) {
	case RunStepDetailsMessageCreationObjectTypeMessageCreation:
		*s = RunStepDetailsMessageCreationObjectTypeMessageCreation
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Details of the Code Interpreter tool call the run step was involved in.
// Ref: #/components/schemas/RunStepDetailsToolCallsCodeObject
type RunStepDetailsToolCallsCodeObject struct {
	// The ID of the tool call.
	ID string `json:"id"`
	// The Code Interpreter tool call definition.
	CodeInterpreter RunStepDetailsToolCallsCodeObjectCodeInterpreter `json:"code_interpreter"`
}

// GetID returns the value of ID.
func (s *RunStepDetailsToolCallsCodeObject) GetID() string {
	return s.ID
}

// GetCodeInterpreter returns the value of CodeInterpreter.
func (s *RunStepDetailsToolCallsCodeObject) GetCodeInterpreter() RunStepDetailsToolCallsCodeObjectCodeInterpreter {
	return s.CodeInterpreter
}

// SetID sets the value of ID.
func (s *RunStepDetailsToolCallsCodeObject) SetID(val string) {
	s.ID = val
}

// SetCodeInterpreter sets the value of CodeInterpreter.
func (s *RunStepDetailsToolCallsCodeObject) SetCodeInterpreter(val RunStepDetailsToolCallsCodeObjectCodeInterpreter) {
	s.CodeInterpreter = val
}

// The Code Interpreter tool call definition.
type RunStepDetailsToolCallsCodeObjectCodeInterpreter struct {
	// The input to the Code Interpreter tool call.
	Input string `json:"input"`
	// The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items,
	// including text (`logs`) or images (`image`). Each of these are represented by a different object
	// type.
	Outputs []RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItem `json:"outputs"`
}

// GetInput returns the value of Input.
func (s *RunStepDetailsToolCallsCodeObjectCodeInterpreter) GetInput() string {
	return s.Input
}

// GetOutputs returns the value of Outputs.
func (s *RunStepDetailsToolCallsCodeObjectCodeInterpreter) GetOutputs() []RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItem {
	return s.Outputs
}

// SetInput sets the value of Input.
func (s *RunStepDetailsToolCallsCodeObjectCodeInterpreter) SetInput(val string) {
	s.Input = val
}

// SetOutputs sets the value of Outputs.
func (s *RunStepDetailsToolCallsCodeObjectCodeInterpreter) SetOutputs(val []RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItem) {
	s.Outputs = val
}

type RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItem struct {
	OneOf RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum
}

// GetOneOf returns the value of OneOf.
func (s *RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItem) GetOneOf() RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItem) SetOneOf(val RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum) {
	s.OneOf = val
}

// RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum represents sum type.
type RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum struct {
	Type                                         RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSumType // switch on this field
	RunStepDetailsToolCallsCodeOutputLogsObject  RunStepDetailsToolCallsCodeOutputLogsObject
	RunStepDetailsToolCallsCodeOutputImageObject RunStepDetailsToolCallsCodeOutputImageObject
}

// RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSumType is oneOf type of RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum.
type RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSumType string

// Possible values for RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSumType.
const (
	RunStepDetailsToolCallsCodeOutputLogsObjectRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum  RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSumType = "logs"
	RunStepDetailsToolCallsCodeOutputImageObjectRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSumType = "image"
)

// IsRunStepDetailsToolCallsCodeOutputLogsObject reports whether RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum is RunStepDetailsToolCallsCodeOutputLogsObject.
func (s RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum) IsRunStepDetailsToolCallsCodeOutputLogsObject() bool {
	return s.Type == RunStepDetailsToolCallsCodeOutputLogsObjectRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum
}

// IsRunStepDetailsToolCallsCodeOutputImageObject reports whether RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum is RunStepDetailsToolCallsCodeOutputImageObject.
func (s RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum) IsRunStepDetailsToolCallsCodeOutputImageObject() bool {
	return s.Type == RunStepDetailsToolCallsCodeOutputImageObjectRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum
}

// SetRunStepDetailsToolCallsCodeOutputLogsObject sets RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum to RunStepDetailsToolCallsCodeOutputLogsObject.
func (s *RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum) SetRunStepDetailsToolCallsCodeOutputLogsObject(v RunStepDetailsToolCallsCodeOutputLogsObject) {
	s.Type = RunStepDetailsToolCallsCodeOutputLogsObjectRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum
	s.RunStepDetailsToolCallsCodeOutputLogsObject = v
}

// GetRunStepDetailsToolCallsCodeOutputLogsObject returns RunStepDetailsToolCallsCodeOutputLogsObject and true boolean if RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum is RunStepDetailsToolCallsCodeOutputLogsObject.
func (s RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum) GetRunStepDetailsToolCallsCodeOutputLogsObject() (v RunStepDetailsToolCallsCodeOutputLogsObject, ok bool) {
	if !s.IsRunStepDetailsToolCallsCodeOutputLogsObject() {
		return v, false
	}
	return s.RunStepDetailsToolCallsCodeOutputLogsObject, true
}

// NewRunStepDetailsToolCallsCodeOutputLogsObjectRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum returns new RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum from RunStepDetailsToolCallsCodeOutputLogsObject.
func NewRunStepDetailsToolCallsCodeOutputLogsObjectRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum(v RunStepDetailsToolCallsCodeOutputLogsObject) RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum {
	var s RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum
	s.SetRunStepDetailsToolCallsCodeOutputLogsObject(v)
	return s
}

// SetRunStepDetailsToolCallsCodeOutputImageObject sets RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum to RunStepDetailsToolCallsCodeOutputImageObject.
func (s *RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum) SetRunStepDetailsToolCallsCodeOutputImageObject(v RunStepDetailsToolCallsCodeOutputImageObject) {
	s.Type = RunStepDetailsToolCallsCodeOutputImageObjectRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum
	s.RunStepDetailsToolCallsCodeOutputImageObject = v
}

// GetRunStepDetailsToolCallsCodeOutputImageObject returns RunStepDetailsToolCallsCodeOutputImageObject and true boolean if RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum is RunStepDetailsToolCallsCodeOutputImageObject.
func (s RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum) GetRunStepDetailsToolCallsCodeOutputImageObject() (v RunStepDetailsToolCallsCodeOutputImageObject, ok bool) {
	if !s.IsRunStepDetailsToolCallsCodeOutputImageObject() {
		return v, false
	}
	return s.RunStepDetailsToolCallsCodeOutputImageObject, true
}

// NewRunStepDetailsToolCallsCodeOutputImageObjectRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum returns new RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum from RunStepDetailsToolCallsCodeOutputImageObject.
func NewRunStepDetailsToolCallsCodeOutputImageObjectRunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum(v RunStepDetailsToolCallsCodeOutputImageObject) RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum {
	var s RunStepDetailsToolCallsCodeObjectCodeInterpreterOutputsItemSum
	s.SetRunStepDetailsToolCallsCodeOutputImageObject(v)
	return s
}

// The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
type RunStepDetailsToolCallsCodeObjectType string

const (
	RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter RunStepDetailsToolCallsCodeObjectType = "code_interpreter"
)

// AllValues returns all RunStepDetailsToolCallsCodeObjectType values.
func (RunStepDetailsToolCallsCodeObjectType) AllValues() []RunStepDetailsToolCallsCodeObjectType {
	return []RunStepDetailsToolCallsCodeObjectType{
		RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepDetailsToolCallsCodeObjectType) MarshalText() ([]byte, error) {
	switch s {
	case RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepDetailsToolCallsCodeObjectType) UnmarshalText(data []byte) error {
	switch RunStepDetailsToolCallsCodeObjectType(data) {
	case RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter:
		*s = RunStepDetailsToolCallsCodeObjectTypeCodeInterpreter
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject
type RunStepDetailsToolCallsCodeOutputImageObject struct {
	Image RunStepDetailsToolCallsCodeOutputImageObjectImage `json:"image"`
}

// GetImage returns the value of Image.
func (s *RunStepDetailsToolCallsCodeOutputImageObject) GetImage() RunStepDetailsToolCallsCodeOutputImageObjectImage {
	return s.Image
}

// SetImage sets the value of Image.
func (s *RunStepDetailsToolCallsCodeOutputImageObject) SetImage(val RunStepDetailsToolCallsCodeOutputImageObjectImage) {
	s.Image = val
}

type RunStepDetailsToolCallsCodeOutputImageObjectImage struct {
	// The [file](/docs/api-reference/files) ID of the image.
	FileID string `json:"file_id"`
}

// GetFileID returns the value of FileID.
func (s *RunStepDetailsToolCallsCodeOutputImageObjectImage) GetFileID() string {
	return s.FileID
}

// SetFileID sets the value of FileID.
func (s *RunStepDetailsToolCallsCodeOutputImageObjectImage) SetFileID(val string) {
	s.FileID = val
}

// Always `image`.
type RunStepDetailsToolCallsCodeOutputImageObjectType string

const (
	RunStepDetailsToolCallsCodeOutputImageObjectTypeImage RunStepDetailsToolCallsCodeOutputImageObjectType = "image"
)

// AllValues returns all RunStepDetailsToolCallsCodeOutputImageObjectType values.
func (RunStepDetailsToolCallsCodeOutputImageObjectType) AllValues() []RunStepDetailsToolCallsCodeOutputImageObjectType {
	return []RunStepDetailsToolCallsCodeOutputImageObjectType{
		RunStepDetailsToolCallsCodeOutputImageObjectTypeImage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepDetailsToolCallsCodeOutputImageObjectType) MarshalText() ([]byte, error) {
	switch s {
	case RunStepDetailsToolCallsCodeOutputImageObjectTypeImage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepDetailsToolCallsCodeOutputImageObjectType) UnmarshalText(data []byte) error {
	switch RunStepDetailsToolCallsCodeOutputImageObjectType(data) {
	case RunStepDetailsToolCallsCodeOutputImageObjectTypeImage:
		*s = RunStepDetailsToolCallsCodeOutputImageObjectTypeImage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Text output from the Code Interpreter tool call as part of a run step.
// Ref: #/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject
type RunStepDetailsToolCallsCodeOutputLogsObject struct {
	// The text output from the Code Interpreter tool call.
	Logs string `json:"logs"`
}

// GetLogs returns the value of Logs.
func (s *RunStepDetailsToolCallsCodeOutputLogsObject) GetLogs() string {
	return s.Logs
}

// SetLogs sets the value of Logs.
func (s *RunStepDetailsToolCallsCodeOutputLogsObject) SetLogs(val string) {
	s.Logs = val
}

// Always `logs`.
type RunStepDetailsToolCallsCodeOutputLogsObjectType string

const (
	RunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs RunStepDetailsToolCallsCodeOutputLogsObjectType = "logs"
)

// AllValues returns all RunStepDetailsToolCallsCodeOutputLogsObjectType values.
func (RunStepDetailsToolCallsCodeOutputLogsObjectType) AllValues() []RunStepDetailsToolCallsCodeOutputLogsObjectType {
	return []RunStepDetailsToolCallsCodeOutputLogsObjectType{
		RunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepDetailsToolCallsCodeOutputLogsObjectType) MarshalText() ([]byte, error) {
	switch s {
	case RunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepDetailsToolCallsCodeOutputLogsObjectType) UnmarshalText(data []byte) error {
	switch RunStepDetailsToolCallsCodeOutputLogsObjectType(data) {
	case RunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs:
		*s = RunStepDetailsToolCallsCodeOutputLogsObjectTypeLogs
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RunStepDetailsToolCallsFunctionObject
type RunStepDetailsToolCallsFunctionObject struct {
	// The ID of the tool call object.
	ID string `json:"id"`
	// The definition of the function that was called.
	Function RunStepDetailsToolCallsFunctionObjectFunction `json:"function"`
}

// GetID returns the value of ID.
func (s *RunStepDetailsToolCallsFunctionObject) GetID() string {
	return s.ID
}

// GetFunction returns the value of Function.
func (s *RunStepDetailsToolCallsFunctionObject) GetFunction() RunStepDetailsToolCallsFunctionObjectFunction {
	return s.Function
}

// SetID sets the value of ID.
func (s *RunStepDetailsToolCallsFunctionObject) SetID(val string) {
	s.ID = val
}

// SetFunction sets the value of Function.
func (s *RunStepDetailsToolCallsFunctionObject) SetFunction(val RunStepDetailsToolCallsFunctionObjectFunction) {
	s.Function = val
}

// The definition of the function that was called.
type RunStepDetailsToolCallsFunctionObjectFunction struct {
	// The name of the function.
	Name string `json:"name"`
	// The arguments passed to the function.
	Arguments string `json:"arguments"`
	// The output of the function. This will be `null` if the outputs have not been
	// [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
	Output NilString `json:"output"`
}

// GetName returns the value of Name.
func (s *RunStepDetailsToolCallsFunctionObjectFunction) GetName() string {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *RunStepDetailsToolCallsFunctionObjectFunction) GetArguments() string {
	return s.Arguments
}

// GetOutput returns the value of Output.
func (s *RunStepDetailsToolCallsFunctionObjectFunction) GetOutput() NilString {
	return s.Output
}

// SetName sets the value of Name.
func (s *RunStepDetailsToolCallsFunctionObjectFunction) SetName(val string) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *RunStepDetailsToolCallsFunctionObjectFunction) SetArguments(val string) {
	s.Arguments = val
}

// SetOutput sets the value of Output.
func (s *RunStepDetailsToolCallsFunctionObjectFunction) SetOutput(val NilString) {
	s.Output = val
}

// The type of tool call. This is always going to be `function` for this type of tool call.
type RunStepDetailsToolCallsFunctionObjectType string

const (
	RunStepDetailsToolCallsFunctionObjectTypeFunction RunStepDetailsToolCallsFunctionObjectType = "function"
)

// AllValues returns all RunStepDetailsToolCallsFunctionObjectType values.
func (RunStepDetailsToolCallsFunctionObjectType) AllValues() []RunStepDetailsToolCallsFunctionObjectType {
	return []RunStepDetailsToolCallsFunctionObjectType{
		RunStepDetailsToolCallsFunctionObjectTypeFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepDetailsToolCallsFunctionObjectType) MarshalText() ([]byte, error) {
	switch s {
	case RunStepDetailsToolCallsFunctionObjectTypeFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepDetailsToolCallsFunctionObjectType) UnmarshalText(data []byte) error {
	switch RunStepDetailsToolCallsFunctionObjectType(data) {
	case RunStepDetailsToolCallsFunctionObjectTypeFunction:
		*s = RunStepDetailsToolCallsFunctionObjectTypeFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Details of the tool call.
// Ref: #/components/schemas/RunStepDetailsToolCallsObject
type RunStepDetailsToolCallsObject struct {
	// Always `tool_calls`.
	Type RunStepDetailsToolCallsObjectType `json:"type"`
	// An array of tool calls the run step was involved in. These can be associated with one of three
	// types of tools: `code_interpreter`, `retrieval`, or `function`.
	ToolCalls []RunStepDetailsToolCallsObjectToolCallsItem `json:"tool_calls"`
}

// GetType returns the value of Type.
func (s *RunStepDetailsToolCallsObject) GetType() RunStepDetailsToolCallsObjectType {
	return s.Type
}

// GetToolCalls returns the value of ToolCalls.
func (s *RunStepDetailsToolCallsObject) GetToolCalls() []RunStepDetailsToolCallsObjectToolCallsItem {
	return s.ToolCalls
}

// SetType sets the value of Type.
func (s *RunStepDetailsToolCallsObject) SetType(val RunStepDetailsToolCallsObjectType) {
	s.Type = val
}

// SetToolCalls sets the value of ToolCalls.
func (s *RunStepDetailsToolCallsObject) SetToolCalls(val []RunStepDetailsToolCallsObjectToolCallsItem) {
	s.ToolCalls = val
}

// RunStepDetailsToolCallsObjectToolCallsItem represents sum type.
type RunStepDetailsToolCallsObjectToolCallsItem struct {
	Type                                   RunStepDetailsToolCallsObjectToolCallsItemType // switch on this field
	RunStepDetailsToolCallsCodeObject      RunStepDetailsToolCallsCodeObject
	RunStepDetailsToolCallsRetrievalObject RunStepDetailsToolCallsRetrievalObject
	RunStepDetailsToolCallsFunctionObject  RunStepDetailsToolCallsFunctionObject
}

// RunStepDetailsToolCallsObjectToolCallsItemType is oneOf type of RunStepDetailsToolCallsObjectToolCallsItem.
type RunStepDetailsToolCallsObjectToolCallsItemType string

// Possible values for RunStepDetailsToolCallsObjectToolCallsItemType.
const (
	RunStepDetailsToolCallsCodeObjectRunStepDetailsToolCallsObjectToolCallsItem      RunStepDetailsToolCallsObjectToolCallsItemType = "code_interpreter"
	RunStepDetailsToolCallsRetrievalObjectRunStepDetailsToolCallsObjectToolCallsItem RunStepDetailsToolCallsObjectToolCallsItemType = "retrieval"
	RunStepDetailsToolCallsFunctionObjectRunStepDetailsToolCallsObjectToolCallsItem  RunStepDetailsToolCallsObjectToolCallsItemType = "function"
)

// IsRunStepDetailsToolCallsCodeObject reports whether RunStepDetailsToolCallsObjectToolCallsItem is RunStepDetailsToolCallsCodeObject.
func (s RunStepDetailsToolCallsObjectToolCallsItem) IsRunStepDetailsToolCallsCodeObject() bool {
	return s.Type == RunStepDetailsToolCallsCodeObjectRunStepDetailsToolCallsObjectToolCallsItem
}

// IsRunStepDetailsToolCallsRetrievalObject reports whether RunStepDetailsToolCallsObjectToolCallsItem is RunStepDetailsToolCallsRetrievalObject.
func (s RunStepDetailsToolCallsObjectToolCallsItem) IsRunStepDetailsToolCallsRetrievalObject() bool {
	return s.Type == RunStepDetailsToolCallsRetrievalObjectRunStepDetailsToolCallsObjectToolCallsItem
}

// IsRunStepDetailsToolCallsFunctionObject reports whether RunStepDetailsToolCallsObjectToolCallsItem is RunStepDetailsToolCallsFunctionObject.
func (s RunStepDetailsToolCallsObjectToolCallsItem) IsRunStepDetailsToolCallsFunctionObject() bool {
	return s.Type == RunStepDetailsToolCallsFunctionObjectRunStepDetailsToolCallsObjectToolCallsItem
}

// SetRunStepDetailsToolCallsCodeObject sets RunStepDetailsToolCallsObjectToolCallsItem to RunStepDetailsToolCallsCodeObject.
func (s *RunStepDetailsToolCallsObjectToolCallsItem) SetRunStepDetailsToolCallsCodeObject(v RunStepDetailsToolCallsCodeObject) {
	s.Type = RunStepDetailsToolCallsCodeObjectRunStepDetailsToolCallsObjectToolCallsItem
	s.RunStepDetailsToolCallsCodeObject = v
}

// GetRunStepDetailsToolCallsCodeObject returns RunStepDetailsToolCallsCodeObject and true boolean if RunStepDetailsToolCallsObjectToolCallsItem is RunStepDetailsToolCallsCodeObject.
func (s RunStepDetailsToolCallsObjectToolCallsItem) GetRunStepDetailsToolCallsCodeObject() (v RunStepDetailsToolCallsCodeObject, ok bool) {
	if !s.IsRunStepDetailsToolCallsCodeObject() {
		return v, false
	}
	return s.RunStepDetailsToolCallsCodeObject, true
}

// NewRunStepDetailsToolCallsCodeObjectRunStepDetailsToolCallsObjectToolCallsItem returns new RunStepDetailsToolCallsObjectToolCallsItem from RunStepDetailsToolCallsCodeObject.
func NewRunStepDetailsToolCallsCodeObjectRunStepDetailsToolCallsObjectToolCallsItem(v RunStepDetailsToolCallsCodeObject) RunStepDetailsToolCallsObjectToolCallsItem {
	var s RunStepDetailsToolCallsObjectToolCallsItem
	s.SetRunStepDetailsToolCallsCodeObject(v)
	return s
}

// SetRunStepDetailsToolCallsRetrievalObject sets RunStepDetailsToolCallsObjectToolCallsItem to RunStepDetailsToolCallsRetrievalObject.
func (s *RunStepDetailsToolCallsObjectToolCallsItem) SetRunStepDetailsToolCallsRetrievalObject(v RunStepDetailsToolCallsRetrievalObject) {
	s.Type = RunStepDetailsToolCallsRetrievalObjectRunStepDetailsToolCallsObjectToolCallsItem
	s.RunStepDetailsToolCallsRetrievalObject = v
}

// GetRunStepDetailsToolCallsRetrievalObject returns RunStepDetailsToolCallsRetrievalObject and true boolean if RunStepDetailsToolCallsObjectToolCallsItem is RunStepDetailsToolCallsRetrievalObject.
func (s RunStepDetailsToolCallsObjectToolCallsItem) GetRunStepDetailsToolCallsRetrievalObject() (v RunStepDetailsToolCallsRetrievalObject, ok bool) {
	if !s.IsRunStepDetailsToolCallsRetrievalObject() {
		return v, false
	}
	return s.RunStepDetailsToolCallsRetrievalObject, true
}

// NewRunStepDetailsToolCallsRetrievalObjectRunStepDetailsToolCallsObjectToolCallsItem returns new RunStepDetailsToolCallsObjectToolCallsItem from RunStepDetailsToolCallsRetrievalObject.
func NewRunStepDetailsToolCallsRetrievalObjectRunStepDetailsToolCallsObjectToolCallsItem(v RunStepDetailsToolCallsRetrievalObject) RunStepDetailsToolCallsObjectToolCallsItem {
	var s RunStepDetailsToolCallsObjectToolCallsItem
	s.SetRunStepDetailsToolCallsRetrievalObject(v)
	return s
}

// SetRunStepDetailsToolCallsFunctionObject sets RunStepDetailsToolCallsObjectToolCallsItem to RunStepDetailsToolCallsFunctionObject.
func (s *RunStepDetailsToolCallsObjectToolCallsItem) SetRunStepDetailsToolCallsFunctionObject(v RunStepDetailsToolCallsFunctionObject) {
	s.Type = RunStepDetailsToolCallsFunctionObjectRunStepDetailsToolCallsObjectToolCallsItem
	s.RunStepDetailsToolCallsFunctionObject = v
}

// GetRunStepDetailsToolCallsFunctionObject returns RunStepDetailsToolCallsFunctionObject and true boolean if RunStepDetailsToolCallsObjectToolCallsItem is RunStepDetailsToolCallsFunctionObject.
func (s RunStepDetailsToolCallsObjectToolCallsItem) GetRunStepDetailsToolCallsFunctionObject() (v RunStepDetailsToolCallsFunctionObject, ok bool) {
	if !s.IsRunStepDetailsToolCallsFunctionObject() {
		return v, false
	}
	return s.RunStepDetailsToolCallsFunctionObject, true
}

// NewRunStepDetailsToolCallsFunctionObjectRunStepDetailsToolCallsObjectToolCallsItem returns new RunStepDetailsToolCallsObjectToolCallsItem from RunStepDetailsToolCallsFunctionObject.
func NewRunStepDetailsToolCallsFunctionObjectRunStepDetailsToolCallsObjectToolCallsItem(v RunStepDetailsToolCallsFunctionObject) RunStepDetailsToolCallsObjectToolCallsItem {
	var s RunStepDetailsToolCallsObjectToolCallsItem
	s.SetRunStepDetailsToolCallsFunctionObject(v)
	return s
}

// Always `tool_calls`.
type RunStepDetailsToolCallsObjectType string

const (
	RunStepDetailsToolCallsObjectTypeToolCalls RunStepDetailsToolCallsObjectType = "tool_calls"
)

// AllValues returns all RunStepDetailsToolCallsObjectType values.
func (RunStepDetailsToolCallsObjectType) AllValues() []RunStepDetailsToolCallsObjectType {
	return []RunStepDetailsToolCallsObjectType{
		RunStepDetailsToolCallsObjectTypeToolCalls,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepDetailsToolCallsObjectType) MarshalText() ([]byte, error) {
	switch s {
	case RunStepDetailsToolCallsObjectTypeToolCalls:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepDetailsToolCallsObjectType) UnmarshalText(data []byte) error {
	switch RunStepDetailsToolCallsObjectType(data) {
	case RunStepDetailsToolCallsObjectTypeToolCalls:
		*s = RunStepDetailsToolCallsObjectTypeToolCalls
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RunStepDetailsToolCallsRetrievalObject
type RunStepDetailsToolCallsRetrievalObject struct {
	// The ID of the tool call object.
	ID string `json:"id"`
	// For now, this is always going to be an empty object.
	Retrieval RunStepDetailsToolCallsRetrievalObjectRetrieval `json:"retrieval"`
}

// GetID returns the value of ID.
func (s *RunStepDetailsToolCallsRetrievalObject) GetID() string {
	return s.ID
}

// GetRetrieval returns the value of Retrieval.
func (s *RunStepDetailsToolCallsRetrievalObject) GetRetrieval() RunStepDetailsToolCallsRetrievalObjectRetrieval {
	return s.Retrieval
}

// SetID sets the value of ID.
func (s *RunStepDetailsToolCallsRetrievalObject) SetID(val string) {
	s.ID = val
}

// SetRetrieval sets the value of Retrieval.
func (s *RunStepDetailsToolCallsRetrievalObject) SetRetrieval(val RunStepDetailsToolCallsRetrievalObjectRetrieval) {
	s.Retrieval = val
}

// For now, this is always going to be an empty object.
type RunStepDetailsToolCallsRetrievalObjectRetrieval struct{}

// The type of tool call. This is always going to be `retrieval` for this type of tool call.
type RunStepDetailsToolCallsRetrievalObjectType string

const (
	RunStepDetailsToolCallsRetrievalObjectTypeRetrieval RunStepDetailsToolCallsRetrievalObjectType = "retrieval"
)

// AllValues returns all RunStepDetailsToolCallsRetrievalObjectType values.
func (RunStepDetailsToolCallsRetrievalObjectType) AllValues() []RunStepDetailsToolCallsRetrievalObjectType {
	return []RunStepDetailsToolCallsRetrievalObjectType{
		RunStepDetailsToolCallsRetrievalObjectTypeRetrieval,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepDetailsToolCallsRetrievalObjectType) MarshalText() ([]byte, error) {
	switch s {
	case RunStepDetailsToolCallsRetrievalObjectTypeRetrieval:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepDetailsToolCallsRetrievalObjectType) UnmarshalText(data []byte) error {
	switch RunStepDetailsToolCallsRetrievalObjectType(data) {
	case RunStepDetailsToolCallsRetrievalObjectTypeRetrieval:
		*s = RunStepDetailsToolCallsRetrievalObjectTypeRetrieval
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Represents a step in execution of a run.
// Ref: #/components/schemas/RunStepObject
type RunStepObject struct {
	// The identifier of the run step, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `thread.run.step`.
	Object RunStepObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the run step was created.
	CreatedAt int `json:"created_at"`
	// The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
	AssistantID string `json:"assistant_id"`
	// The ID of the [thread](/docs/api-reference/threads) that was run.
	ThreadID string `json:"thread_id"`
	// The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
	RunID string `json:"run_id"`
	// The type of run step, which can be either `message_creation` or `tool_calls`.
	Type RunStepObjectType `json:"type"`
	// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`,
	// or `expired`.
	Status RunStepObjectStatus `json:"status"`
	// The details of the run step.
	StepDetails RunStepObjectStepDetails `json:"step_details"`
	// The last error associated with this run step. Will be `null` if there are no errors.
	LastError NilRunStepObjectLastError `json:"last_error"`
	// The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the
	// parent run is expired.
	ExpiredAt NilInt `json:"expired_at"`
	// The Unix timestamp (in seconds) for when the run step was cancelled.
	CancelledAt NilInt `json:"cancelled_at"`
	// The Unix timestamp (in seconds) for when the run step failed.
	FailedAt NilInt `json:"failed_at"`
	// The Unix timestamp (in seconds) for when the run step completed.
	CompletedAt NilInt `json:"completed_at"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata *RunStepObjectMetadata    `json:"metadata"`
	Usage    NilRunStepCompletionUsage `json:"usage"`
}

// GetID returns the value of ID.
func (s *RunStepObject) GetID() string {
	return s.ID
}

// GetObject returns the value of Object.
func (s *RunStepObject) GetObject() RunStepObjectObject {
	return s.Object
}

// GetCreatedAt returns the value of CreatedAt.
func (s *RunStepObject) GetCreatedAt() int {
	return s.CreatedAt
}

// GetAssistantID returns the value of AssistantID.
func (s *RunStepObject) GetAssistantID() string {
	return s.AssistantID
}

// GetThreadID returns the value of ThreadID.
func (s *RunStepObject) GetThreadID() string {
	return s.ThreadID
}

// GetRunID returns the value of RunID.
func (s *RunStepObject) GetRunID() string {
	return s.RunID
}

// GetType returns the value of Type.
func (s *RunStepObject) GetType() RunStepObjectType {
	return s.Type
}

// GetStatus returns the value of Status.
func (s *RunStepObject) GetStatus() RunStepObjectStatus {
	return s.Status
}

// GetStepDetails returns the value of StepDetails.
func (s *RunStepObject) GetStepDetails() RunStepObjectStepDetails {
	return s.StepDetails
}

// GetLastError returns the value of LastError.
func (s *RunStepObject) GetLastError() NilRunStepObjectLastError {
	return s.LastError
}

// GetExpiredAt returns the value of ExpiredAt.
func (s *RunStepObject) GetExpiredAt() NilInt {
	return s.ExpiredAt
}

// GetCancelledAt returns the value of CancelledAt.
func (s *RunStepObject) GetCancelledAt() NilInt {
	return s.CancelledAt
}

// GetFailedAt returns the value of FailedAt.
func (s *RunStepObject) GetFailedAt() NilInt {
	return s.FailedAt
}

// GetCompletedAt returns the value of CompletedAt.
func (s *RunStepObject) GetCompletedAt() NilInt {
	return s.CompletedAt
}

// GetMetadata returns the value of Metadata.
func (s *RunStepObject) GetMetadata() *RunStepObjectMetadata {
	return s.Metadata
}

// GetUsage returns the value of Usage.
func (s *RunStepObject) GetUsage() NilRunStepCompletionUsage {
	return s.Usage
}

// SetID sets the value of ID.
func (s *RunStepObject) SetID(val string) {
	s.ID = val
}

// SetObject sets the value of Object.
func (s *RunStepObject) SetObject(val RunStepObjectObject) {
	s.Object = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *RunStepObject) SetCreatedAt(val int) {
	s.CreatedAt = val
}

// SetAssistantID sets the value of AssistantID.
func (s *RunStepObject) SetAssistantID(val string) {
	s.AssistantID = val
}

// SetThreadID sets the value of ThreadID.
func (s *RunStepObject) SetThreadID(val string) {
	s.ThreadID = val
}

// SetRunID sets the value of RunID.
func (s *RunStepObject) SetRunID(val string) {
	s.RunID = val
}

// SetType sets the value of Type.
func (s *RunStepObject) SetType(val RunStepObjectType) {
	s.Type = val
}

// SetStatus sets the value of Status.
func (s *RunStepObject) SetStatus(val RunStepObjectStatus) {
	s.Status = val
}

// SetStepDetails sets the value of StepDetails.
func (s *RunStepObject) SetStepDetails(val RunStepObjectStepDetails) {
	s.StepDetails = val
}

// SetLastError sets the value of LastError.
func (s *RunStepObject) SetLastError(val NilRunStepObjectLastError) {
	s.LastError = val
}

// SetExpiredAt sets the value of ExpiredAt.
func (s *RunStepObject) SetExpiredAt(val NilInt) {
	s.ExpiredAt = val
}

// SetCancelledAt sets the value of CancelledAt.
func (s *RunStepObject) SetCancelledAt(val NilInt) {
	s.CancelledAt = val
}

// SetFailedAt sets the value of FailedAt.
func (s *RunStepObject) SetFailedAt(val NilInt) {
	s.FailedAt = val
}

// SetCompletedAt sets the value of CompletedAt.
func (s *RunStepObject) SetCompletedAt(val NilInt) {
	s.CompletedAt = val
}

// SetMetadata sets the value of Metadata.
func (s *RunStepObject) SetMetadata(val *RunStepObjectMetadata) {
	s.Metadata = val
}

// SetUsage sets the value of Usage.
func (s *RunStepObject) SetUsage(val NilRunStepCompletionUsage) {
	s.Usage = val
}

// The last error associated with this run step. Will be `null` if there are no errors.
type RunStepObjectLastError struct {
	// One of `server_error` or `rate_limit_exceeded`.
	Code RunStepObjectLastErrorCode `json:"code"`
	// A human-readable description of the error.
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *RunStepObjectLastError) GetCode() RunStepObjectLastErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *RunStepObjectLastError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *RunStepObjectLastError) SetCode(val RunStepObjectLastErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *RunStepObjectLastError) SetMessage(val string) {
	s.Message = val
}

// One of `server_error` or `rate_limit_exceeded`.
type RunStepObjectLastErrorCode string

const (
	RunStepObjectLastErrorCodeServerError       RunStepObjectLastErrorCode = "server_error"
	RunStepObjectLastErrorCodeRateLimitExceeded RunStepObjectLastErrorCode = "rate_limit_exceeded"
)

// AllValues returns all RunStepObjectLastErrorCode values.
func (RunStepObjectLastErrorCode) AllValues() []RunStepObjectLastErrorCode {
	return []RunStepObjectLastErrorCode{
		RunStepObjectLastErrorCodeServerError,
		RunStepObjectLastErrorCodeRateLimitExceeded,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepObjectLastErrorCode) MarshalText() ([]byte, error) {
	switch s {
	case RunStepObjectLastErrorCodeServerError:
		return []byte(s), nil
	case RunStepObjectLastErrorCodeRateLimitExceeded:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepObjectLastErrorCode) UnmarshalText(data []byte) error {
	switch RunStepObjectLastErrorCode(data) {
	case RunStepObjectLastErrorCodeServerError:
		*s = RunStepObjectLastErrorCodeServerError
		return nil
	case RunStepObjectLastErrorCodeRateLimitExceeded:
		*s = RunStepObjectLastErrorCodeRateLimitExceeded
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type RunStepObjectMetadata struct{}

// The object type, which is always `thread.run.step`.
type RunStepObjectObject string

const (
	RunStepObjectObjectThreadRunStep RunStepObjectObject = "thread.run.step"
)

// AllValues returns all RunStepObjectObject values.
func (RunStepObjectObject) AllValues() []RunStepObjectObject {
	return []RunStepObjectObject{
		RunStepObjectObjectThreadRunStep,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepObjectObject) MarshalText() ([]byte, error) {
	switch s {
	case RunStepObjectObjectThreadRunStep:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepObjectObject) UnmarshalText(data []byte) error {
	switch RunStepObjectObject(data) {
	case RunStepObjectObjectThreadRunStep:
		*s = RunStepObjectObjectThreadRunStep
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`,
// or `expired`.
type RunStepObjectStatus string

const (
	RunStepObjectStatusInProgress RunStepObjectStatus = "in_progress"
	RunStepObjectStatusCancelled  RunStepObjectStatus = "cancelled"
	RunStepObjectStatusFailed     RunStepObjectStatus = "failed"
	RunStepObjectStatusCompleted  RunStepObjectStatus = "completed"
	RunStepObjectStatusExpired    RunStepObjectStatus = "expired"
)

// AllValues returns all RunStepObjectStatus values.
func (RunStepObjectStatus) AllValues() []RunStepObjectStatus {
	return []RunStepObjectStatus{
		RunStepObjectStatusInProgress,
		RunStepObjectStatusCancelled,
		RunStepObjectStatusFailed,
		RunStepObjectStatusCompleted,
		RunStepObjectStatusExpired,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepObjectStatus) MarshalText() ([]byte, error) {
	switch s {
	case RunStepObjectStatusInProgress:
		return []byte(s), nil
	case RunStepObjectStatusCancelled:
		return []byte(s), nil
	case RunStepObjectStatusFailed:
		return []byte(s), nil
	case RunStepObjectStatusCompleted:
		return []byte(s), nil
	case RunStepObjectStatusExpired:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepObjectStatus) UnmarshalText(data []byte) error {
	switch RunStepObjectStatus(data) {
	case RunStepObjectStatusInProgress:
		*s = RunStepObjectStatusInProgress
		return nil
	case RunStepObjectStatusCancelled:
		*s = RunStepObjectStatusCancelled
		return nil
	case RunStepObjectStatusFailed:
		*s = RunStepObjectStatusFailed
		return nil
	case RunStepObjectStatusCompleted:
		*s = RunStepObjectStatusCompleted
		return nil
	case RunStepObjectStatusExpired:
		*s = RunStepObjectStatusExpired
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The details of the run step.
type RunStepObjectStepDetails struct {
	OneOf RunStepObjectStepDetailsSum
}

// GetOneOf returns the value of OneOf.
func (s *RunStepObjectStepDetails) GetOneOf() RunStepObjectStepDetailsSum {
	return s.OneOf
}

// SetOneOf sets the value of OneOf.
func (s *RunStepObjectStepDetails) SetOneOf(val RunStepObjectStepDetailsSum) {
	s.OneOf = val
}

// RunStepObjectStepDetailsSum represents sum type.
type RunStepObjectStepDetailsSum struct {
	Type                                RunStepObjectStepDetailsSumType // switch on this field
	RunStepDetailsMessageCreationObject RunStepDetailsMessageCreationObject
	RunStepDetailsToolCallsObject       RunStepDetailsToolCallsObject
}

// RunStepObjectStepDetailsSumType is oneOf type of RunStepObjectStepDetailsSum.
type RunStepObjectStepDetailsSumType string

// Possible values for RunStepObjectStepDetailsSumType.
const (
	RunStepDetailsMessageCreationObjectRunStepObjectStepDetailsSum RunStepObjectStepDetailsSumType = "RunStepDetailsMessageCreationObject"
	RunStepDetailsToolCallsObjectRunStepObjectStepDetailsSum       RunStepObjectStepDetailsSumType = "RunStepDetailsToolCallsObject"
)

// IsRunStepDetailsMessageCreationObject reports whether RunStepObjectStepDetailsSum is RunStepDetailsMessageCreationObject.
func (s RunStepObjectStepDetailsSum) IsRunStepDetailsMessageCreationObject() bool {
	return s.Type == RunStepDetailsMessageCreationObjectRunStepObjectStepDetailsSum
}

// IsRunStepDetailsToolCallsObject reports whether RunStepObjectStepDetailsSum is RunStepDetailsToolCallsObject.
func (s RunStepObjectStepDetailsSum) IsRunStepDetailsToolCallsObject() bool {
	return s.Type == RunStepDetailsToolCallsObjectRunStepObjectStepDetailsSum
}

// SetRunStepDetailsMessageCreationObject sets RunStepObjectStepDetailsSum to RunStepDetailsMessageCreationObject.
func (s *RunStepObjectStepDetailsSum) SetRunStepDetailsMessageCreationObject(v RunStepDetailsMessageCreationObject) {
	s.Type = RunStepDetailsMessageCreationObjectRunStepObjectStepDetailsSum
	s.RunStepDetailsMessageCreationObject = v
}

// GetRunStepDetailsMessageCreationObject returns RunStepDetailsMessageCreationObject and true boolean if RunStepObjectStepDetailsSum is RunStepDetailsMessageCreationObject.
func (s RunStepObjectStepDetailsSum) GetRunStepDetailsMessageCreationObject() (v RunStepDetailsMessageCreationObject, ok bool) {
	if !s.IsRunStepDetailsMessageCreationObject() {
		return v, false
	}
	return s.RunStepDetailsMessageCreationObject, true
}

// NewRunStepDetailsMessageCreationObjectRunStepObjectStepDetailsSum returns new RunStepObjectStepDetailsSum from RunStepDetailsMessageCreationObject.
func NewRunStepDetailsMessageCreationObjectRunStepObjectStepDetailsSum(v RunStepDetailsMessageCreationObject) RunStepObjectStepDetailsSum {
	var s RunStepObjectStepDetailsSum
	s.SetRunStepDetailsMessageCreationObject(v)
	return s
}

// SetRunStepDetailsToolCallsObject sets RunStepObjectStepDetailsSum to RunStepDetailsToolCallsObject.
func (s *RunStepObjectStepDetailsSum) SetRunStepDetailsToolCallsObject(v RunStepDetailsToolCallsObject) {
	s.Type = RunStepDetailsToolCallsObjectRunStepObjectStepDetailsSum
	s.RunStepDetailsToolCallsObject = v
}

// GetRunStepDetailsToolCallsObject returns RunStepDetailsToolCallsObject and true boolean if RunStepObjectStepDetailsSum is RunStepDetailsToolCallsObject.
func (s RunStepObjectStepDetailsSum) GetRunStepDetailsToolCallsObject() (v RunStepDetailsToolCallsObject, ok bool) {
	if !s.IsRunStepDetailsToolCallsObject() {
		return v, false
	}
	return s.RunStepDetailsToolCallsObject, true
}

// NewRunStepDetailsToolCallsObjectRunStepObjectStepDetailsSum returns new RunStepObjectStepDetailsSum from RunStepDetailsToolCallsObject.
func NewRunStepDetailsToolCallsObjectRunStepObjectStepDetailsSum(v RunStepDetailsToolCallsObject) RunStepObjectStepDetailsSum {
	var s RunStepObjectStepDetailsSum
	s.SetRunStepDetailsToolCallsObject(v)
	return s
}

// The type of run step, which can be either `message_creation` or `tool_calls`.
type RunStepObjectType string

const (
	RunStepObjectTypeMessageCreation RunStepObjectType = "message_creation"
	RunStepObjectTypeToolCalls       RunStepObjectType = "tool_calls"
)

// AllValues returns all RunStepObjectType values.
func (RunStepObjectType) AllValues() []RunStepObjectType {
	return []RunStepObjectType{
		RunStepObjectTypeMessageCreation,
		RunStepObjectTypeToolCalls,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunStepObjectType) MarshalText() ([]byte, error) {
	switch s {
	case RunStepObjectTypeMessageCreation:
		return []byte(s), nil
	case RunStepObjectTypeToolCalls:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunStepObjectType) UnmarshalText(data []byte) error {
	switch RunStepObjectType(data) {
	case RunStepObjectTypeMessageCreation:
		*s = RunStepObjectTypeMessageCreation
		return nil
	case RunStepObjectTypeToolCalls:
		*s = RunStepObjectTypeToolCalls
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Tool call objects.
// Ref: #/components/schemas/RunToolCallObject
type RunToolCallObject struct {
	// The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the
	// [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
	ID string `json:"id"`
	// The type of tool call the output is required for. For now, this is always `function`.
	Type RunToolCallObjectType `json:"type"`
	// The function definition.
	Function RunToolCallObjectFunction `json:"function"`
}

// GetID returns the value of ID.
func (s *RunToolCallObject) GetID() string {
	return s.ID
}

// GetType returns the value of Type.
func (s *RunToolCallObject) GetType() RunToolCallObjectType {
	return s.Type
}

// GetFunction returns the value of Function.
func (s *RunToolCallObject) GetFunction() RunToolCallObjectFunction {
	return s.Function
}

// SetID sets the value of ID.
func (s *RunToolCallObject) SetID(val string) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *RunToolCallObject) SetType(val RunToolCallObjectType) {
	s.Type = val
}

// SetFunction sets the value of Function.
func (s *RunToolCallObject) SetFunction(val RunToolCallObjectFunction) {
	s.Function = val
}

// The function definition.
type RunToolCallObjectFunction struct {
	// The name of the function.
	Name string `json:"name"`
	// The arguments that the model expects you to pass to the function.
	Arguments string `json:"arguments"`
}

// GetName returns the value of Name.
func (s *RunToolCallObjectFunction) GetName() string {
	return s.Name
}

// GetArguments returns the value of Arguments.
func (s *RunToolCallObjectFunction) GetArguments() string {
	return s.Arguments
}

// SetName sets the value of Name.
func (s *RunToolCallObjectFunction) SetName(val string) {
	s.Name = val
}

// SetArguments sets the value of Arguments.
func (s *RunToolCallObjectFunction) SetArguments(val string) {
	s.Arguments = val
}

// The type of tool call the output is required for. For now, this is always `function`.
type RunToolCallObjectType string

const (
	RunToolCallObjectTypeFunction RunToolCallObjectType = "function"
)

// AllValues returns all RunToolCallObjectType values.
func (RunToolCallObjectType) AllValues() []RunToolCallObjectType {
	return []RunToolCallObjectType{
		RunToolCallObjectTypeFunction,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s RunToolCallObjectType) MarshalText() ([]byte, error) {
	switch s {
	case RunToolCallObjectTypeFunction:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *RunToolCallObjectType) UnmarshalText(data []byte) error {
	switch RunToolCallObjectType(data) {
	case RunToolCallObjectTypeFunction:
		*s = RunToolCallObjectTypeFunction
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/SubmitToolOutputsRunRequest
type SubmitToolOutputsRunRequest struct {
	// A list of tools for which the outputs are being submitted.
	ToolOutputs []SubmitToolOutputsRunRequestToolOutputsItem `json:"tool_outputs"`
}

// GetToolOutputs returns the value of ToolOutputs.
func (s *SubmitToolOutputsRunRequest) GetToolOutputs() []SubmitToolOutputsRunRequestToolOutputsItem {
	return s.ToolOutputs
}

// SetToolOutputs sets the value of ToolOutputs.
func (s *SubmitToolOutputsRunRequest) SetToolOutputs(val []SubmitToolOutputsRunRequestToolOutputsItem) {
	s.ToolOutputs = val
}

type SubmitToolOutputsRunRequestToolOutputsItem struct {
	// The ID of the tool call in the `required_action` object within the run object the output is being
	// submitted for.
	ToolCallID OptString `json:"tool_call_id"`
	// The output of the tool call to be submitted to continue the run.
	Output OptString `json:"output"`
}

// GetToolCallID returns the value of ToolCallID.
func (s *SubmitToolOutputsRunRequestToolOutputsItem) GetToolCallID() OptString {
	return s.ToolCallID
}

// GetOutput returns the value of Output.
func (s *SubmitToolOutputsRunRequestToolOutputsItem) GetOutput() OptString {
	return s.Output
}

// SetToolCallID sets the value of ToolCallID.
func (s *SubmitToolOutputsRunRequestToolOutputsItem) SetToolCallID(val OptString) {
	s.ToolCallID = val
}

// SetOutput sets the value of Output.
func (s *SubmitToolOutputsRunRequestToolOutputsItem) SetOutput(val OptString) {
	s.Output = val
}

// Represents a thread that contains [messages](/docs/api-reference/messages).
// Ref: #/components/schemas/ThreadObject
type ThreadObject struct {
	// The identifier, which can be referenced in API endpoints.
	ID string `json:"id"`
	// The object type, which is always `thread`.
	Object ThreadObjectObject `json:"object"`
	// The Unix timestamp (in seconds) for when the thread was created.
	CreatedAt int `json:"created_at"`
	// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
	// additional information about the object in a structured format. Keys can be a maximum of 64
	// characters long and values can be a maxium of 512 characters long.
	Metadata *ThreadObjectMetadata `json:"metadata"`
}

// GetID returns the value of ID.
func (s *ThreadObject) GetID() string {
	return s.ID
}

// GetObject returns the value of Object.
func (s *ThreadObject) GetObject() ThreadObjectObject {
	return s.Object
}

// GetCreatedAt returns the value of CreatedAt.
func (s *ThreadObject) GetCreatedAt() int {
	return s.CreatedAt
}

// GetMetadata returns the value of Metadata.
func (s *ThreadObject) GetMetadata() *ThreadObjectMetadata {
	return s.Metadata
}

// SetID sets the value of ID.
func (s *ThreadObject) SetID(val string) {
	s.ID = val
}

// SetObject sets the value of Object.
func (s *ThreadObject) SetObject(val ThreadObjectObject) {
	s.Object = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *ThreadObject) SetCreatedAt(val int) {
	s.CreatedAt = val
}

// SetMetadata sets the value of Metadata.
func (s *ThreadObject) SetMetadata(val *ThreadObjectMetadata) {
	s.Metadata = val
}

// Set of 16 key-value pairs that can be attached to an object. This can be useful for storing
// additional information about the object in a structured format. Keys can be a maximum of 64
// characters long and values can be a maxium of 512 characters long.
type ThreadObjectMetadata struct{}

// The object type, which is always `thread`.
type ThreadObjectObject string

const (
	ThreadObjectObjectThread ThreadObjectObject = "thread"
)

// AllValues returns all ThreadObjectObject values.
func (ThreadObjectObject) AllValues() []ThreadObjectObject {
	return []ThreadObjectObject{
		ThreadObjectObjectThread,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ThreadObjectObject) MarshalText() ([]byte, error) {
	switch s {
	case ThreadObjectObjectThread:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ThreadObjectObject) UnmarshalText(data []byte) error {
	switch ThreadObjectObject(data) {
	case ThreadObjectObjectThread:
		*s = ThreadObjectObjectThread
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/TranscriptionSegment
type TranscriptionSegment struct {
	// Unique identifier of the segment.
	ID int `json:"id"`
	// Seek offset of the segment.
	Seek int `json:"seek"`
	// Start time of the segment in seconds.
	Start float32 `json:"start"`
	// End time of the segment in seconds.
	End float32 `json:"end"`
	// Text content of the segment.
	Text string `json:"text"`
	// Array of token IDs for the text content.
	Tokens []int `json:"tokens"`
	// Temperature parameter used for generating the segment.
	Temperature float32 `json:"temperature"`
	// Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
	AvgLogprob float32 `json:"avg_logprob"`
	// Compression ratio of the segment. If the value is greater than 2.4, consider the compression
	// failed.
	CompressionRatio float32 `json:"compression_ratio"`
	// Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is
	// below -1, consider this segment silent.
	NoSpeechProb float32 `json:"no_speech_prob"`
}

// GetID returns the value of ID.
func (s *TranscriptionSegment) GetID() int {
	return s.ID
}

// GetSeek returns the value of Seek.
func (s *TranscriptionSegment) GetSeek() int {
	return s.Seek
}

// GetStart returns the value of Start.
func (s *TranscriptionSegment) GetStart() float32 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TranscriptionSegment) GetEnd() float32 {
	return s.End
}

// GetText returns the value of Text.
func (s *TranscriptionSegment) GetText() string {
	return s.Text
}

// GetTokens returns the value of Tokens.
func (s *TranscriptionSegment) GetTokens() []int {
	return s.Tokens
}

// GetTemperature returns the value of Temperature.
func (s *TranscriptionSegment) GetTemperature() float32 {
	return s.Temperature
}

// GetAvgLogprob returns the value of AvgLogprob.
func (s *TranscriptionSegment) GetAvgLogprob() float32 {
	return s.AvgLogprob
}

// GetCompressionRatio returns the value of CompressionRatio.
func (s *TranscriptionSegment) GetCompressionRatio() float32 {
	return s.CompressionRatio
}

// GetNoSpeechProb returns the value of NoSpeechProb.
func (s *TranscriptionSegment) GetNoSpeechProb() float32 {
	return s.NoSpeechProb
}

// SetID sets the value of ID.
func (s *TranscriptionSegment) SetID(val int) {
	s.ID = val
}

// SetSeek sets the value of Seek.
func (s *TranscriptionSegment) SetSeek(val int) {
	s.Seek = val
}

// SetStart sets the value of Start.
func (s *TranscriptionSegment) SetStart(val float32) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TranscriptionSegment) SetEnd(val float32) {
	s.End = val
}

// SetText sets the value of Text.
func (s *TranscriptionSegment) SetText(val string) {
	s.Text = val
}

// SetTokens sets the value of Tokens.
func (s *TranscriptionSegment) SetTokens(val []int) {
	s.Tokens = val
}

// SetTemperature sets the value of Temperature.
func (s *TranscriptionSegment) SetTemperature(val float32) {
	s.Temperature = val
}

// SetAvgLogprob sets the value of AvgLogprob.
func (s *TranscriptionSegment) SetAvgLogprob(val float32) {
	s.AvgLogprob = val
}

// SetCompressionRatio sets the value of CompressionRatio.
func (s *TranscriptionSegment) SetCompressionRatio(val float32) {
	s.CompressionRatio = val
}

// SetNoSpeechProb sets the value of NoSpeechProb.
func (s *TranscriptionSegment) SetNoSpeechProb(val float32) {
	s.NoSpeechProb = val
}

// Ref: #/components/schemas/TranscriptionWord
type TranscriptionWord struct {
	// The text content of the word.
	Word string `json:"word"`
	// Start time of the word in seconds.
	Start float32 `json:"start"`
	// End time of the word in seconds.
	End float32 `json:"end"`
}

// GetWord returns the value of Word.
func (s *TranscriptionWord) GetWord() string {
	return s.Word
}

// GetStart returns the value of Start.
func (s *TranscriptionWord) GetStart() float32 {
	return s.Start
}

// GetEnd returns the value of End.
func (s *TranscriptionWord) GetEnd() float32 {
	return s.End
}

// SetWord sets the value of Word.
func (s *TranscriptionWord) SetWord(val string) {
	s.Word = val
}

// SetStart sets the value of Start.
func (s *TranscriptionWord) SetStart(val float32) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *TranscriptionWord) SetEnd(val float32) {
	s.End = val
}
